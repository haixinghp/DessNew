/**
 * @file scp.c
 * @author NXP Semiconductors
 * @version 1.0
 * @par License
 * Copyright(C) NXP Semiconductors, 2016
 * All rights reserved.
 *
 * Software that is described herein is for illustrative purposes only
 * which provides customers with programming information regarding the
 * A7-series security ICs.  This software is supplied "AS IS" without any
 * warranties of any kind, and NXP Semiconductors and its licensor disclaim any and
 * all warranties, express or implied, including all implied warranties of
 * merchantability, fitness for a particular purpose and non-infringement of
 * intellectual property rights.  NXP Semiconductors assumes no responsibility
 * or liability for the use of the software, conveys no license or rights under any
 * patent, copyright, mask work right, or any other intellectual property rights in
 * or to any products. NXP Semiconductors reserves the right to make changes
 * in the software without notification. NXP Semiconductors also makes no
 * representation or warranty that such application will be suitable for the
 * specified use without further testing or modification.
 *
 * Permission to use, copy and modify this software is hereby granted,
 * under NXP Semiconductors' and its licensor's relevant copyrights in
 * the software, without fee, provided that it is used in conjunction with
 * NXP Semiconductors products. This copyright, permission, and disclaimer notice
 * must appear in all copies of this code.
 * @par Description
 * This file defines A7-series specific types
 * @par History
 *
 */

#include <string.h>
#include "scp.h"
#include "smCom.h"
#include "sm_apdu.h"

//#define SECURE_CHANNEL_SUPPORTED
#include <stdio.h>
//#include <assert.h>

#ifdef SECURE_CHANNEL_SUPPORTED
#include "HostCryptoAPI.h"
#define USE_SCP02
#endif // SECURE_CHANNEL_SUPPORTED


#ifdef SECURE_CHANNEL_SUPPORTED
/// @cond
#define CMAC_SIZE                   (8)

static S32 scp_GetCommandICV(ChannelId_t channelId, U8* pIcv);
static S32 scp02_GetCommandICV(ChannelId_t channelId, U8* pIcv);
static U32 scp_TransformCommand(apdu_t * pApdu);
static U32 scp02_TransformCommand(apdu_t * pApdu);
static U32 scp_TransformResponse(apdu_t *pApdu);
static U16 scp_PadData(apdu_t * pApdu);
static U16 scp02_PadData(apdu_t * pApdu);
static U16 scp_AddMacToCommand(ChannelId_t channelId, apdu_t * pApdu);
static U16 scp02_AddMacToCommand(ChannelId_t channelId, apdu_t * pApdu, const U8* pIv);
static SCP_SignalFunction scp_SignalFunctionCb = NULL;
/// @endcond

U16 SCP_Subscribe(SCP_SignalFunction callback, void *context)
{
  AX_UNUSED_ARG(context);
  scp_SignalFunctionCb = callback;
  return SCP_OK;
}

#endif


U32 scp_Transceive(apdu_t * pApdu, scp_CommandType_t type)
{
  U32 rv = SMCOM_OK;

#ifdef SECURE_CHANNEL_SUPPORTED
  scp_CommandType_t channelCommandType;
#ifdef TGT_EDEV
  ChannelId_t channelId = DEV_GetSelectedChannel(&channelCommandType);
#else //TGT_EDEV
  DEV_GetSelectedChannel(&channelCommandType);
#endif //TGT_EDEV

  // Even if C_MAC or C_ENC is requested, but the channel has not been set up successfully,
  // it will not be granted.
  if (type != NO_C_MAC_NO_C_ENC_NO_R_MAC_NO_R_ENC) {
    type = channelCommandType;
  }

  // Transform command


  if (type != NO_C_MAC_NO_C_ENC_NO_R_MAC_NO_R_ENC) {
#ifdef USE_SCP02
    rv = scp02_TransformCommand(pApdu);
#else
    rv = scp_TransformCommand(pApdu);
#endif
    if (rv != SW_OK)
    {
      pApdu->rxlen = 0;
      return rv;
    }
  } else {
    // scp_TransformCommand (if branch) already invokes smApduAdaptLc
    smApduAdaptLc(pApdu, pApdu->lc);
  }
  /* smApduAdaptLe(pApdu, 0); */
#ifdef USE_SCP02
  if (pApdu->hasLe)
#endif
    smApduAdaptLe(pApdu, pApdu->le);
#ifdef TGT_EDEV
  // EDEV Specific: Conditionally adapt CLA byte to label the command as a HOST channel command (as opposed to ADMIN channel)
  if (channelId == AX_HOST_CHANNEL) {
    pApdu->pBuf[0] |= 0xE0;
  }
#endif //TGT_EDEV
#else //SECURE_CHANNEL_SUPPORTED
  /* smApduAdaptLcLe(pApdu, pApdu->lc, 0); */
  smApduAdaptLcLe(pApdu, pApdu->lc, pApdu->le);
#endif //SECURE_CHANNEL_SUPPORTED

  rv = smCom_Transceive(pApdu);

#ifdef SECURE_CHANNEL_SUPPORTED
  // transform response
#ifdef USE_SCP02
  if ((type == SCP02_SECLVL_CDEC_CMAC_RMAC) && (rv == SMCOM_OK)) {
#else
    if ((type != NO_C_MAC_NO_C_ENC_NO_R_MAC_NO_R_ENC) && (rv == SMCOM_OK)) {
#endif
      rv = scp_TransformResponse(pApdu);
      if (rv != SMCOM_OK)
      {
        pApdu->rxlen = 0;
      }
    }
#endif // SECURE_CHANNEL_SUPPORTED

    return rv;
  }

#ifdef SECURE_CHANNEL_SUPPORTED
  /*
   * scp_TransformCommand
   *
   * SCPP03 spec, section 6.2.6
   */

  static U32 scp_TransformCommand(apdu_t *pApdu)
  {
    S32 nRet = HOST_CRYPTO_OK;
    U16 rv;
    U16 Lcc = 0;
    U8 iv[16];
    U8* pIv = (U8*) iv;
    scp_CommandType_t ignoreChannelCommandTypeAtThisLevel;

    ChannelId_t channelId = DEV_GetSelectedChannel(&ignoreChannelCommandTypeAtThisLevel);

    U8 apduPayloadToEncrypt[SCP_BUFFER_SIZE];

    Scp03SessionState_t session;

    // Get the current security level. (should be set to AUTH_C_DECRYPTION_R_ENCRYPTION in the GP_ExternalAuthenticate command)

    /* The Off-Card Entity first encrypts the Command Data field and then computes the C-MAC on the
       command with the ciphered data field as described in section 6.2.4 APDU Command C-MAC Generation
       and Verification. No encryption shall be applied to a command where there is no command data field. */

    // Patch CLA byte to indicate we are using SCP03
    pApdu->pBuf[0]  |= 0x04;

    if (pApdu->hasData ==  1)
    {
      int payloadOffset = 0;

      /* Prior to encrypting the data, the data shall be padded as defined in section 4.1.4. This padding becomes part of the data field.*/
      // DPRINTF("pApdu->lc: %d\n", pApdu->lc);
      Lcc = pApdu->lc;
      Lcc += scp_PadData(pApdu);
      // DPRINTF("Lcc: %d (@line %d)\n", Lcc, __LINE__);

      /* The final Lc value (Lcc) is the sum of: initial Lc + length of the padding + length of C-MAC */
      Lcc += CMAC_SIZE;
      // DPRINTF("Lcc: %d (@line %d)\n", Lcc, __LINE__);

      smApduAdaptLc(pApdu, Lcc);

      nRet = scp_GetCommandICV(channelId, pIv);
      if (nRet == HOST_CRYPTO_OK)
      {
        SCP_HostLocal_GetSessionState(channelId, &session);

        if (pApdu->extendedLength)
        {
          payloadOffset = APDU_OFFSET_LC + 3; // (3 bytes reserved for LC field)
        }
        else
        {
          payloadOffset = APDU_OFFSET_LC + 1; // (1 byte reserved for LC field)
        }
        memcpy(apduPayloadToEncrypt, &(pApdu->pBuf[payloadOffset]), (pApdu->buflen - payloadOffset));
        DPRINTF("SCP: Encrypting %d byte\n", pApdu->buflen-payloadOffset);

        {
          HLSE_MECHANISM_INFO mechInfo;
          U32 outLen = SCP_KEY_SIZE;

          memset(&mechInfo, 0, sizeof(mechInfo));
          mechInfo.mechanism = HLSE_AES_CBC_ENCRYPT;
          mechInfo.pParameter = pIv;
          mechInfo.ulParameterLen = 16;

          nRet = HLCRYPT_Encrypt(&mechInfo,
                                 session.sEnc, SCP_KEY_SIZE,
                                 apduPayloadToEncrypt, pApdu->buflen - payloadOffset,
                                 &(pApdu->pBuf[payloadOffset]), &outLen);
        }
      }
    }
    else // Handle commands with no command data field.
    {
      /* spec:
       * The length of the command message (Lc) shall be incremented by 8 to indicate the inclusion of the
       * C-MAC in the data field of the command message.
       */
      Lcc = pApdu->lc + CMAC_SIZE;
      // The MAC will become the payload of the APDU. so indicate there is a datapayload
      pApdu->hasData = 1;
      pApdu->lcLength = 1;
      pApdu->buflen += 1;
      smApduAdaptLc(pApdu, Lcc);
    }

    if (nRet == HOST_CRYPTO_OK)
    {
      // Add the MAC
      rv = scp_AddMacToCommand(channelId, pApdu);
    }
    else
    {
      rv = ERR_CRYPTO_ENGINE_FAILED;
    }
    return rv;
  }

  /*
   * scp02_TransformCommand
   *
   * GPCardSpec_v2.2 spec, Appendix E
   */

  static U32 scp02_TransformCommand(apdu_t *pApdu)
  {
    S32 nRet = HOST_CRYPTO_OK;
    U16 rv;
    U16 Lcc = 0;
    U8 paddingLen = 0;
    U8 zero_iv[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    U8 mcv[8];
    U8 hasData;
    U8 cmac[CMAC_SIZE];
    scp_CommandType_t ignoreChannelCommandTypeAtThisLevel;

    ChannelId_t channelId = DEV_GetSelectedChannel(&ignoreChannelCommandTypeAtThisLevel);

    U8 paddedPayload[SCP_BUFFER_SIZE];
    U16 paddedPayloadLen = 0;
    U8 encryptedPayload[SCP_BUFFER_SIZE];

    U8 sesEnc[] = { 0xad, 0xc1, 0x16, 0x3b, 0xa2, 0xa1, 0x47, 0xfb, 0xb8, 0x4b, 0xf4, 0x4c, 0x86, 0x76, 0xfb, 0x7d};
    U8 sesMac[] = { 0x3e, 0x06, 0xb1, 0xc8, 0xfc, 0xfd, 0x78, 0x8a, 0x57, 0x3b, 0x9a, 0x98, 0x89, 0xd0, 0xca, 0x50};
    U8 sesmcv[] = { 0x56, 0xab, 0x00, 0x73, 0x59, 0x51, 0x3f, 0x0a};

    Scp03SessionState_t session;
    SCP_HostLocal_GetSessionState(channelId, &session);

    // Patch CLA byte to indicate we are using SCP02
    pApdu->pBuf[0] |= 0x04;

    hasData = pApdu->hasData;

    // First, compute the C-MAC on the modified APDU
    nRet = scp02_GetCommandICV(channelId, mcv);
    if (nRet == HOST_CRYPTO_OK) {
      rv = scp02_AddMacToCommand(channelId, pApdu, mcv);
    }
    else {
      rv = ERR_CRYPTO_ENGINE_FAILED;
    }

    // Second, encrypt the data if it exists, and the security level is set with C-DEC
    if (rv == SW_OK) {
      if (hasData == 1) {
        int payloadOffset = 0;

        if (pApdu->extendedLength) {
          payloadOffset = APDU_OFFSET_LC + 3; // (3 bytes reserved for LC field)
        }
        else {
          payloadOffset = APDU_OFFSET_LC + 1; // (1 byte reserved for LC field)
        }

        // save the C-MAC
        memcpy(cmac, &pApdu->pBuf[pApdu->buflen - CMAC_SIZE], CMAC_SIZE);

        // do not copy the Header or the C-MAC
        paddedPayloadLen = (U16)(pApdu->buflen - payloadOffset - CMAC_SIZE);
        memcpy(paddedPayload, &pApdu->pBuf[payloadOffset], paddedPayloadLen);
        paddedPayload[paddedPayloadLen] = 0x80;
        ++paddedPayloadLen; 
        ++paddingLen;
        while ((paddedPayloadLen % 8)) {
          paddedPayload[paddedPayloadLen] = 0x00;
          ++paddedPayloadLen;
          ++paddingLen;
        }

        /* The final Lc value (Lcc) is the sum of: initial Lc + length of the padding + length of C-MAC */
        Lcc = (U16)(pApdu->lc + paddingLen);

        smApduAdaptLc(pApdu, Lcc);

        DPRINTF("SCP: Encrypting %d byte\n", pApdu->buflen - payloadOffset);

        {
          HLSE_MECHANISM_INFO mechInfo;
          U32 outLen = SCP_KEY_SIZE;

          memset(&mechInfo, 0, sizeof(mechInfo));
          mechInfo.mechanism = HLSE_DES_CBC_ENCRYPT;
          mechInfo.pParameter = zero_iv;
          mechInfo.ulParameterLen = sizeof(zero_iv);

          nRet = HLCRYPT_Encrypt(&mechInfo,
                                 session.sEnc, 16,
                                 paddedPayload, paddedPayloadLen,
                                 encryptedPayload, &outLen);
        }
        //nRet = HOST_3DES_CBC_Process(session.sEnc, 16, zero_iv, HOST_ENCRYPT, paddedPayload, paddedPayloadLen, encryptedPayload);
        if (nRet != HOST_CRYPTO_OK) {
          rv = ERR_CRYPTO_ENGINE_FAILED;
        }
        else {
          memcpy(&(pApdu->pBuf[payloadOffset]), encryptedPayload, paddedPayloadLen);
          // copy the C-MAC after the encrypted data
          memcpy(&(pApdu->pBuf[payloadOffset + paddedPayloadLen]), cmac, CMAC_SIZE);
          pApdu->buflen = pApdu->buflen + paddingLen;
          pApdu->offset = pApdu->buflen;
        }
      }
    }

    return rv;
  }

  /*
   * scp_PadData
   *
   * (spec 4.1.4) Unless specified otherwise, padding prior to performing an AES operation across a block of data is
   * achieved in the following manner:
   * - Append an '80' to the right of the data block;
   * - If the resultant data block length is a multiple of 16, no further padding is required;
   * - Append binary zeroes to the right of the data block until the data block length is a multiple of 16.
   */
  static U16 scp_PadData(apdu_t * pApdu)
  {
    U16 zeroBytesToPad = 0;
    U16 bytesToPad = 1;

    // pad the payload and adjust the length of the APDU
    if (pApdu->extendedLength == false)
    {
      // TODO: remove hard coded values
      if (pApdu->buflen > 5) // payload present => padding needed
      {
        pApdu->pBuf[pApdu->buflen++] = 0x80;

        zeroBytesToPad = (SCP_KEY_SIZE - ((pApdu->buflen - 5) % SCP_KEY_SIZE)) % SCP_KEY_SIZE;
      }
    }
    else
    {
      if (pApdu->buflen > 7) // payload present => padding needed
      {
        pApdu->pBuf[pApdu->buflen++] = 0x80;
        zeroBytesToPad = (SCP_KEY_SIZE - ((pApdu->buflen - 7) % SCP_KEY_SIZE)) % SCP_KEY_SIZE;
      }
    }

    bytesToPad += zeroBytesToPad;

    while (zeroBytesToPad > 0)
    {
      pApdu->pBuf[pApdu->buflen++] = 0x00;
      zeroBytesToPad--;
    }

    pApdu->offset = pApdu->buflen;

    // DPRINTF("Padded %d bytes.\n", bytesToPad);
    return bytesToPad;
  }

  /*
   * scp02_PadData
   *
   * (spec 4.1.4) Unless specified otherwise, padding prior to performing an AES operation across a block of data is
   * achieved in the following manner:
   * - Append an '80' to the right of the data block;
   * - If the resultant data block length is a multiple of 8, no further padding is required;
   * - Append binary zeroes to the right of the data block until the data block length is a multiple of 8.
   */
  static U16 scp02_PadData(apdu_t * pApdu)
  {
    U16 zeroBytesToPad = 0;
    U16 bytesToPad = 1;

    // pad the payload and adjust the length of the APDU
    if (pApdu->extendedLength == false)
    {
      // TODO: remove hard coded values
      if (pApdu->buflen > 5) // payload present => padding needed
      {
        pApdu->pBuf[pApdu->buflen++] = 0x80;

        zeroBytesToPad = (8 - ((pApdu->buflen - 5) % 8)) % 8;
      }
    }
    else
    {
      if (pApdu->buflen > 7) // payload present => padding needed
      {
        pApdu->pBuf[pApdu->buflen++] = 0x80;
        zeroBytesToPad = (8 - ((pApdu->buflen - 7) % 8)) % 8;
      }
    }

    bytesToPad += zeroBytesToPad;

    while (zeroBytesToPad > 0)
    {
      pApdu->pBuf[pApdu->buflen++] = 0x00;
      zeroBytesToPad--;
    }

    pApdu->offset = pApdu->buflen;

    // DPRINTF("Padded %d bytes.\n", bytesToPad);
    return bytesToPad;
  }

  /*
   * scp_AddMacToCommand
   *
   */
  static U16 scp_AddMacToCommand(ChannelId_t channelId, apdu_t *pApdu)
  {
    S32 nRet;
    Scp03SessionState_t session;
    U8 macToAdd[16];
    //axHcCmacCtx_t *cmacCtx;
    HLSE_CONTEXT_HANDLE hContext;

    HLSE_MECHANISM_INFO mechInfo;
    U32 signatureLen = sizeof(macToAdd);

    memset(&mechInfo, 0, sizeof(mechInfo));
    mechInfo.mechanism = HLSE_AES_CMAC;


    SCP_HostLocal_GetSessionState(channelId, &session);

    nRet = HLCRYPT_SignInit(&mechInfo, session.sMac, SCP_KEY_SIZE, &hContext);
    //    nRet = HOST_CMAC_Init(&cmacCtx, session.sMac, SCP_KEY_SIZE);
    if (nRet != HOST_CRYPTO_OK)
    {
      return ERR_CRYPTO_ENGINE_FAILED;
    }

    nRet = HLCRYPT_SignUpdate(hContext, session.mcv, SCP_KEY_SIZE);
    //    nRet = HOST_CMAC_Update(cmacCtx, session.mcv, SCP_KEY_SIZE);
    nRet &= HLCRYPT_SignUpdate(hContext, pApdu->pBuf, pApdu->buflen);
    //    nRet &= HOST_CMAC_Update(cmacCtx, pApdu->pBuf, pApdu->buflen);
    nRet &= HLCRYPT_SignFinal(hContext, macToAdd, &signatureLen);
    //    nRet &= HOST_CMAC_Finish(cmacCtx, macToAdd);
    if (nRet != HOST_CRYPTO_OK)
    {
      return ERR_CRYPTO_ENGINE_FAILED;
    }

    // Store updated mcv!
    SCP_HostLocal_SetMacChainingValue(channelId, macToAdd);

    memcpy(&(pApdu->pBuf[pApdu->buflen]), macToAdd, SCP_GP_IU_CARD_CRYPTOGRAM_LEN);
    pApdu->buflen += SCP_GP_IU_CARD_CRYPTOGRAM_LEN;
    pApdu->offset = pApdu->buflen;
    return SW_OK;
  }

  static void PadCommand(U8* command, U16* cmdLen)
  {
    if ((*cmdLen % 8) != 0x0)	{
      //We need to pad the command
      command[*cmdLen] = 0x80;
      (*cmdLen)++;

      while ((*cmdLen % 8) != 0x0)
      {
        command[*cmdLen] = 0x0;
        (*cmdLen)++;
        //command[4]+=1;
      }
    }
    else {
      //We need to pad the command
      command[*cmdLen] = 0x80;
      (*cmdLen)++;

      while ((*cmdLen % 8) != 0x0) {
        command[*cmdLen] = 0x0;
        (*cmdLen)++;
      }
    }
  }
  /*
   * scp02_AddMacToCommand
   *
   */
  static U16 scp02_AddMacToCommand(ChannelId_t channelId, apdu_t *pApdu, const U8* pIv)
  {
    int numOfLoops = 0;
    int indexPlace = 0;
    U8 sesEnc[] = { 0xad, 0xc1, 0x16, 0x3b, 0xa2, 0xa1, 0x47, 0xfb, 0xb8, 0x4b, 0xf4, 0x4c, 0x86, 0x76, 0xfb, 0x7d };
    U8 sesMac[] = { 0x3e, 0x06, 0xb1, 0xc8, 0xfc, 0xfd, 0x78, 0x8a, 0x57, 0x3b, 0x9a, 0x98, 0x89, 0xd0, 0xca, 0x50 };
    U8 sesmcv[] = { 0x56, 0xab, 0x00, 0x73, 0x59, 0x51, 0x3f, 0x0a };

    Scp03SessionState_t session;

    U8 macToAdd[8];
    U8 iv[8];
    U8 paddedCommand[SCP_BUFFER_SIZE];
    U16 Lcc;
    U8 hadData;
    U16 paddCommandLen = pApdu->buflen;
    HLSE_MECHANISM_INFO mechInfo;
    S32 ret;
    U32 outLen = 0;

    memset(&mechInfo, 0, sizeof(mechInfo));
    mechInfo.mechanism = HLSE_DES_CBC_ENCRYPT;

    // Lc = Lc + C-MAC length
    hadData = pApdu->hasData;
    Lcc = (pApdu->hasData ? pApdu->lc : 0);
    pApdu->hasData = 1;
    pApdu->lcLength = 1;
    pApdu->buflen += (hadData ? 0 : 1);
    Lcc += CMAC_SIZE;
    smApduAdaptLc(pApdu, Lcc);

    paddCommandLen = pApdu->buflen;
    memcpy(paddedCommand, pApdu->pBuf, paddCommandLen);
    PadCommand(paddedCommand, &paddCommandLen);

    SCP_HostLocal_GetSessionState(channelId, &session);

    // NOTE: pBuf is already padded

    numOfLoops = paddCommandLen / 8;
    //Calc the MAC of the command   
    memcpy(iv, pIv, 8);
    for (int y = 0; y < numOfLoops - 1;y++) {
      mechInfo.pParameter = iv;
      mechInfo.ulParameterLen = sizeof(iv);
      outLen = sizeof(macToAdd);
      ret = HLCRYPT_Encrypt(&mechInfo, session.sMac, 8, &paddedCommand[indexPlace], 8, macToAdd, &outLen);
      //HOST_3DES_CBC_Process(session.sMac, 8, iv, HOST_ENCRYPT, &paddedCommand[indexPlace], 8, macToAdd);
      indexPlace += 8;
      memcpy(iv, macToAdd, 8);
    }
    //Final 3DES encryption
    mechInfo.pParameter = iv;
    mechInfo.ulParameterLen = sizeof(iv);
    outLen = sizeof(macToAdd);
    ret = HLCRYPT_Encrypt(&mechInfo, session.sMac, 16, &paddedCommand[indexPlace], 8, macToAdd, &outLen);
    //    HOST_3DES_CBC_Process(session.sMac, 16, iv, HOST_ENCRYPT, &paddedCommand[indexPlace], 8, macToAdd);

    // Store updated mcv!
    SCP_HostLocal_SetMacChainingValue(channelId, macToAdd);

    memcpy(&(pApdu->pBuf[pApdu->buflen]), macToAdd, CMAC_SIZE);
    pApdu->buflen += CMAC_SIZE;
    pApdu->offset = pApdu->buflen;
    return SW_OK;
  }

  /*
   * scp_GetCommandICV
   *
   * The ICV shall be calculated as follows:
   * - A counter shall be incremented for each command (i.e. for each pair of command and response
   *   APDU) within a secure channel session.
   * - The starting value shall be 1 for the first command after a successful EXTERNAL AUTHENTICATE.
   * - The binary counter value shall be left padded with zeroes to form a full block.
   * - This block shall be encrypted with S-ENC; the result shall be used as ICV.
   */
  static S32 scp_GetCommandICV(ChannelId_t channelId, U8* pIcv)
  {
    S32 nRet;
    U8 ivZero[SCP_KEY_SIZE] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    Scp03SessionState_t session;

    SCP_HostLocal_GetSessionState(channelId, &session);
    PRINT_BYTE_STRING("SCP: SndCmdCounter", session.cCounter, SCP_KEY_SIZE);

    {
      HLSE_MECHANISM_INFO mechInfo;
      U32 outLen = SCP_KEY_SIZE;

      memset(&mechInfo, 0, sizeof(mechInfo));
      mechInfo.mechanism = HLSE_AES_CBC_ENCRYPT;
      mechInfo.pParameter = ivZero;
      mechInfo.ulParameterLen = SCP_KEY_SIZE;

      nRet = HLCRYPT_Encrypt(&mechInfo,
                             session.sEnc, SCP_KEY_SIZE,
                             session.cCounter, SCP_KEY_SIZE,
                             pIcv, &outLen);
    }
    //    nRet = HOST_AES_CBC_Process(session.sEnc, SCP_KEY_SIZE, ivZero, HOST_ENCRYPT, session.cCounter, SCP_KEY_SIZE, pIcv);
    return nRet;
  }


  /*
   * scp02_GetCommandICV
   *
   * The ICV shall be calculated as follows:
   * - A counter shall be incremented for each command (i.e. for each pair of command and response
   *   APDU) within a secure channel session.
   * - The starting value shall be 1 for the first command after a successful EXTERNAL AUTHENTICATE.
   * - The binary counter value shall be left padded with zeroes to form a full block.
   * - This block shall be encrypted with S-ENC; the result shall be used as ICV.
   */
  static S32 scp02_GetCommandICV(ChannelId_t channelId, U8* pIcv)
  {
    S32 nRet;
    U8 ivZero[8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
    U8 sesEnc[] = { 0xad, 0xc1, 0x16, 0x3b, 0xa2, 0xa1, 0x47, 0xfb, 0xb8, 0x4b, 0xf4, 0x4c, 0x86, 0x76, 0xfb, 0x7d };
    U8 sesMac[] = { 0x3e, 0x06, 0xb1, 0xc8, 0xfc, 0xfd, 0x78, 0x8a, 0x57, 0x3b, 0x9a, 0x98, 0x89, 0xd0, 0xca, 0x50 };
    U8 sesmcv[] = { 0x56, 0xab, 0x00, 0x73, 0x59, 0x51, 0x3f, 0x0a };

    Scp03SessionState_t session;
    SCP_HostLocal_GetSessionState(channelId, &session);

    PRINT_BYTE_STRING("SCP: SndCmdCounter", session.cCounter, SCP_KEY_SIZE);

    {
      HLSE_MECHANISM_INFO mechInfo;
      U32 outLen = SCP_KEY_SIZE;

      memset(&mechInfo, 0, sizeof(mechInfo));
      mechInfo.mechanism = HLSE_DES_CBC_ENCRYPT;
      mechInfo.pParameter = ivZero;
      mechInfo.ulParameterLen = sizeof(ivZero);

      nRet = HLCRYPT_Encrypt(&mechInfo,
                             session.sMac, 8,
                             session.mcv, 8,
                             pIcv, &outLen);
    }
    //nRet = HOST_3DES_CBC_Process(session.sMac, 8, ivZero, HOST_ENCRYPT, session.mcv, 8, pIcv);
    return nRet;
  }

  static S32 scp_GetResponseICV(ChannelId_t channelId, U8* pIcv)
  {
    S32 nRet;
    U8 ivZero[SCP_KEY_SIZE] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
    U8 commandCounter[SCP_KEY_SIZE];
    Scp03SessionState_t session;

    SCP_HostLocal_GetSessionState(channelId, &session);
    memcpy(commandCounter, session.cCounter, SCP_KEY_SIZE);
    commandCounter[0] = 0x80; // Section 6.2.7 of SCP03 spec
    PRINT_BYTE_STRING("SCP: RcvCmdCounter", commandCounter, 16);

    {
      HLSE_MECHANISM_INFO mechInfo;
      U32 outLen = SCP_KEY_SIZE;

      memset(&mechInfo, 0, sizeof(mechInfo));
      mechInfo.mechanism = HLSE_AES_CBC_ENCRYPT;
      mechInfo.pParameter = ivZero;
      mechInfo.ulParameterLen = SCP_KEY_SIZE;

      nRet = HLCRYPT_Encrypt(&mechInfo,
                             session.sEnc, SCP_KEY_SIZE,
                             commandCounter, sizeof(commandCounter),
                             pIcv, &outLen);
    }
    //    nRet = HOST_AES_CBC_Process(session.sEnc, SCP_KEY_SIZE, ivZero, HOST_ENCRYPT, commandCounter, sizeof(commandCounter), pIcv);
    return nRet;
  }

  static U32 scp_RemovePaddingRestoreSw(apdu_t *pApdu, U8 *plaintextResponse, U16 plaintextResponseLen, U8 *sw)
  {
    int i;
    int removePaddingOk = 0;

    i = plaintextResponseLen;

    while ( (i > 1) && (i > (plaintextResponseLen-SCP_KEY_SIZE)) )
    {
      if (plaintextResponse[i-1] == 0x00)
      {
        i--;
      }
      else if (plaintextResponse[i-1] == 0x80)
      {
        // We have found padding delimitor
        memcpy(&plaintextResponse[i-1], sw, SCP_GP_SW_LEN);
        memcpy(pApdu->pBuf, plaintextResponse, i+1);
        pApdu->rxlen = (U16)(i+1);
        removePaddingOk = 1;
        PRINT_BYTE_STRING("SCP: plaintextResponseStripped+SW", pApdu->pBuf, pApdu->rxlen);
        break;
      }
      else
      {
        // We've found a non-padding character while removing padding
        // Most likely the cipher text was not properly decoded.
        DPRINTF("Decoding failed.\n");
        break;
      }
    }

    if (removePaddingOk == 0)
    {

      DPRINTF("Invoking callback. 'Found illegal (or no) padding'\n");
      DPRINTF("**************************************************\n");
      if (scp_SignalFunctionCb != NULL)
      {
        scp_SignalFunctionCb(SCP_WRONG_PADDING, NULL);
      }

      return SCP_DECODE_FAIL;
    }
    return SMCOM_OK;
  }

  /**
   * @brief scp_TransformResponse
   * @param pApdu
   * @retval ::SMCOM_OK
   * @retval ::SCP_RSP_MAC_FAIL
   * @retval ::SCP_DECODE_FAIL
   */
  static U32 scp_TransformResponse(apdu_t *pApdu)
  {
    U32 status = SMCOM_OK;
    U8 iv[16];
    U8* pIv = (U8*)iv;
    scp_CommandType_t dummy;

    ChannelId_t channelId = DEV_GetSelectedChannel(&dummy);
    Scp03SessionState_t session;

    U8 response[SCP_BUFFER_SIZE];
    U8 plaintextResponse[SCP_BUFFER_SIZE];
    U8 sw[SCP_GP_SW_LEN];
    U8 pMac[16];
    //axHcCmacCtx_t *cmacCtx;
    HLSE_CONTEXT_HANDLE hContext;

    HLSE_MECHANISM_INFO mechInfo;
    U32 signatureLen = sizeof(pMac);

    memset(&mechInfo, 0, sizeof(mechInfo));
    mechInfo.mechanism = HLSE_AES_CMAC;

    SCP_HostLocal_GetSessionState(channelId, &session);

    if (pApdu->rxlen >= 10)
    {
      S32 nRet = 1;
      memcpy(sw, &(pApdu->pBuf[pApdu->rxlen - SCP_GP_SW_LEN]), SCP_GP_SW_LEN);

      // get the MAC chaining value
      nRet = HLCRYPT_SignInit(&mechInfo, session.sRMac, SCP_KEY_SIZE, &hContext);
      //        nRet = HOST_CMAC_Init(&cmacCtx, session.sRMac, SCP_KEY_SIZE);
      if (nRet != HOST_CRYPTO_OK)
      {
        return ERR_CRYPTO_ENGINE_FAILED;
      }

      nRet = HLCRYPT_SignUpdate(hContext, session.mcv, SCP_CMAC_SIZE);
      //        nRet = HOST_CMAC_Update(cmacCtx, session.mcv, SCP_CMAC_SIZE);
      if (pApdu->rxlen > 10)
      {
        nRet &= HLCRYPT_SignUpdate(hContext, pApdu->pBuf, pApdu->rxlen - SCP_COMMAND_MAC_SIZE - SCP_GP_SW_LEN);
        //            nRet &= HOST_CMAC_Update(cmacCtx, pApdu->pBuf, pApdu->rxlen - SCP_COMMAND_MAC_SIZE - SCP_GP_SW_LEN);
      }

      nRet &= HLCRYPT_SignUpdate(hContext, sw, SCP_GP_SW_LEN);
      //        nRet &= HOST_CMAC_Update(cmacCtx, sw, SCP_GP_SW_LEN);
      nRet &= HLCRYPT_SignFinal(hContext, pMac, &signatureLen);
      //        nRet &= HOST_CMAC_Finish(cmacCtx, pMac);
      PRINT_BYTE_STRING("SCP: Calculated Response Mac", pMac, SCP_CMAC_SIZE);
      if (nRet != HOST_CRYPTO_OK)
      {
        return ERR_CRYPTO_ENGINE_FAILED;
      }

      // Do a comparison of the received and the calculated mac
      if (memcmp(pMac, &pApdu->pBuf[pApdu->rxlen - SCP_COMMAND_MAC_SIZE - SCP_GP_SW_LEN], SCP_COMMAND_MAC_SIZE) != 0)
      {
        DPRINTF("Invoking callback. 'RESPONSE MAC DID NOT VERIFY!'\n");
        DPRINTF("*************************************************\n");
        if (scp_SignalFunctionCb != NULL)
        {
          scp_SignalFunctionCb(SCP_WRONG_RESPMAC, NULL);
        }
        return SCP_RSP_MAC_FAIL;
      }
    }

    // Decrypt Response Data Field in case Reponse Mac verified OK
    if (pApdu->rxlen > 10)
    {
      S32 nRet;
      memcpy(response, pApdu->pBuf, pApdu->rxlen - 10);
      PRINT_BYTE_STRING("SCP: EncResponse (MAC and SW stripped)", response, pApdu->rxlen - 10);

      memcpy(sw, &(pApdu->pBuf[pApdu->rxlen - SCP_GP_SW_LEN]), SCP_GP_SW_LEN);
      // PRINT_BYTE_STRING("sw", sw, 2);

      nRet = scp_GetResponseICV(channelId, pIv);
      if (nRet != HOST_CRYPTO_OK)
      {
        return ERR_CRYPTO_ENGINE_FAILED;
      }

      {
        U32 outLen = SCP_BUFFER_SIZE;

        memset(&mechInfo, 0, sizeof(mechInfo));
        mechInfo.mechanism = HLSE_AES_CBC_DECRYPT;
        mechInfo.pParameter = pIv;
        mechInfo.ulParameterLen = SCP_KEY_SIZE;

        nRet = HLCRYPT_Decrypt(&mechInfo,
                               session.sEnc, SCP_KEY_SIZE,
                               response, pApdu->rxlen - 10,
                               plaintextResponse, &outLen);
      }
      //        nRet = HOST_AES_CBC_Process(session.sEnc, SCP_KEY_SIZE, pIv, HOST_DECRYPT, response, pApdu->rxlen - 10, plaintextResponse);
      if (nRet != HOST_CRYPTO_OK)
      {
        return ERR_CRYPTO_ENGINE_FAILED;
      }
      PRINT_BYTE_STRING("SCP: Plaintext Response", plaintextResponse, pApdu->rxlen - 10);

      // Remove the padding from the plaintextResponse
      status = scp_RemovePaddingRestoreSw(pApdu, plaintextResponse, pApdu->rxlen - 10, sw);
    }
    else if (pApdu->rxlen == 10)
    {
      // There's no data payload in response
      memcpy(pApdu->pBuf, sw, SCP_GP_SW_LEN);
      pApdu->rxlen = SCP_GP_SW_LEN;
    }
    else
    {
      // We're receiving a response with an unexpected response length
      DPRINTF("SCP: Unexpected Response Length: %d\n", pApdu->rxlen);
    }
    SCP_HostLocal_IncIcvCCounter(channelId);
    return status;
  }

#endif // SECURE_CHANNEL_SUPPORTED
