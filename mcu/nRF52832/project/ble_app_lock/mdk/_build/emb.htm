<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\emb.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\emb.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri May 06 13:21:49 2022
<BR><P>
<H3>Maximum Stack Usage =       2400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
App_GUI_GotoAppModelMenu &rArr; APP_BleServerProcess &rArr; BleID2CasePro &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">NMI_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[12]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[13]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">BusFault_Handler</a><BR>
 <LI><a href="#[14]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">UsageFault_Handler</a><BR>
 <LI><a href="#[15]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">SVC_Handler</a><BR>
 <LI><a href="#[16]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">DebugMon_Handler</a><BR>
 <LI><a href="#[17]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">PendSV_Handler</a><BR>
 <LI><a href="#[18]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SysTick_Handler</a><BR>
 <LI><a href="#[28]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[9d]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42a]">queue_process</a><BR>
 <LI><a href="#[a7]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a7]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</a><BR>
 <LI><a href="#[a6]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a6]">__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[41]">APP_UpdateDataHandler</a> from app_update.o(i.APP_UpdateDataHandler) referenced from app_ble.o(i.APP_BleInit)
 <LI><a href="#[60]">App_GUI_AddAdminFaceMenu</a> from app_gui.o(i.App_GUI_AddAdminFaceMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[65]">App_GUI_AddAdminFingerMenu</a> from app_gui.o(i.App_GUI_AddAdminFingerMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[61]">App_GUI_AddGuestFaceMenu</a> from app_gui.o(i.App_GUI_AddGuestFaceMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[66]">App_GUI_AddGuestFingerMenu</a> from app_gui.o(i.App_GUI_AddGuestFingerMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[88]">App_GUI_AginTestMenu</a> from app_gui.o(i.App_GUI_AginTestMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[6e]">App_GUI_AlarmHandlerMenu</a> from app_gui.o(i.App_GUI_AlarmHandlerMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[75]">App_GUI_BackFactoryMenu</a> from app_gui.o(i.App_GUI_BackFactoryMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[6c]">App_GUI_BatVolLowErrMenu</a> from app_gui.o(i.App_GUI_BatVolLowErrMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[86]">App_GUI_BellLampMenu</a> from app_gui.o(i.App_GUI_BellLampMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[83]">App_GUI_BellVideoMenu</a> from app_gui.o(i.App_GUI_BellVideoMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[74]">App_GUI_BleOpenErrWarmMenu</a> from app_gui.o(i.App_GUI_BleOpenErrWarmMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[6a]">App_GUI_ChangePwdMenu</a> from app_gui.o(i.App_GUI_ChangePwdMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[5c]">App_GUI_CheckAdminMenu</a> from app_gui.o(i.App_GUI_CheckAdminMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[63]">App_GUI_CheckFaceErrMenu</a> from app_gui.o(i.App_GUI_CheckFaceErrMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[68]">App_GUI_CheckFingerErrMenu</a> from app_gui.o(i.App_GUI_CheckFingerErrMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[6b]">App_GUI_CheckPwdErrMenu</a> from app_gui.o(i.App_GUI_CheckPwdErrMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[5e]">App_GUI_CloseDoorMenu</a> from app_gui.o(i.App_GUI_CloseDoorMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[62]">App_GUI_DelFaceMenu</a> from app_gui.o(i.App_GUI_DelFaceMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[67]">App_GUI_DelFingerMenu</a> from app_gui.o(i.App_GUI_DelFingerMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[71]">App_GUI_DeployWarmMenu</a> from app_gui.o(i.App_GUI_DeployWarmMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[6d]">App_GUI_EepromErrorMenu</a> from app_gui.o(i.App_GUI_EepromErrorMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[81]">App_GUI_ErrorCheckMenu</a> from app_gui.o(i.App_GUI_ErrorCheckMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[72]">App_GUI_FalseLockWarmMenu</a> from app_gui.o(i.App_GUI_FalseLockWarmMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[73]">App_GUI_ForgetLockWarmMenu</a> from app_gui.o(i.App_GUI_ForgetLockWarmMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[77]">App_GUI_GotoAppModelMenu</a> from app_gui.o(i.App_GUI_GotoAppModelMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[76]">App_GUI_GotoOtaModelMenu</a> from app_gui.o(i.App_GUI_GotoOtaModelMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[89]">App_GUI_GotoSleepModelMenu</a> from app_gui.o(i.App_GUI_GotoSleepModelMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[5a]">App_GUI_MainDeskMenu</a> from app_gui.o(i.App_GUI_MainDeskMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[84]">App_GUI_NetworkUpdateMenu</a> from app_gui.o(i.App_GUI_NetworkUpdateMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[5d]">App_GUI_OpenDoorMenu</a> from app_gui.o(i.App_GUI_OpenDoorMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[7b]">App_GUI_SetAutoLockMenu</a> from app_gui.o(i.App_GUI_SetAutoLockMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[7f]">App_GUI_SetDeployMenu</a> from app_gui.o(i.App_GUI_SetDeployMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[7c]">App_GUI_SetDoubleCheckMenu</a> from app_gui.o(i.App_GUI_SetDoubleCheckMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[5f]">App_GUI_SetFaceMenu</a> from app_gui.o(i.App_GUI_SetFaceMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[64]">App_GUI_SetFingerMenu</a> from app_gui.o(i.App_GUI_SetFingerMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[79]">App_GUI_SetMotorDirMenu</a> from app_gui.o(i.App_GUI_SetMotorDirMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[7a]">App_GUI_SetMotorTorsionMenu</a> from app_gui.o(i.App_GUI_SetMotorTorsionMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[7e]">App_GUI_SetNearSenseMenu</a> from app_gui.o(i.App_GUI_SetNearSenseMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[69]">App_GUI_SetPwdMenu</a> from app_gui.o(i.App_GUI_SetPwdMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[80]">App_GUI_SetStayCheckMenu</a> from app_gui.o(i.App_GUI_SetStayCheckMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[78]">App_GUI_SetSysParaMenu</a> from app_gui.o(i.App_GUI_SetSysParaMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[7d]">App_GUI_SetVolGradeMenu</a> from app_gui.o(i.App_GUI_SetVolGradeMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[82]">App_GUI_SmartScreenShowMenu</a> from app_gui.o(i.App_GUI_SmartScreenShowMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[70]">App_GUI_StayWarmMenu</a> from app_gui.o(i.App_GUI_StayWarmMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[5b]">App_GUI_SystemManageMenu</a> from app_gui.o(i.App_GUI_SystemManageMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[6f]">App_GUI_TryProtectMenu</a> from app_gui.o(i.App_GUI_TryProtectMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[87]">App_GUI_WakeButSleepMenu</a> from app_gui.o(i.App_GUI_WakeButSleepMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[85]">App_GUI_WeatherUpdateMenu</a> from app_gui.o(i.App_GUI_WeatherUpdateMenu) referenced from app_gui.o(.constdata)
 <LI><a href="#[13]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[42]">DRV_ADC_CaptureIRQ</a> from drv_adc.o(i.DRV_ADC_CaptureIRQ) referenced from drv_adc.o(i.DRV_ADC_ConfigInit)
 <LI><a href="#[43]">DRV_GpioHandler</a> from drv_gpio.o(i.DRV_GpioHandler) referenced from drv_gpio.o(i.DRV_GpioInterruptEnable)
 <LI><a href="#[45]">DRV_Uart_EventHandle</a> from drv_uart.o(i.DRV_Uart_EventHandle) referenced from drv_uart.o(i.DRV_Uart_ConfigInit)
 <LI><a href="#[16]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3d]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">GPIOTE_IRQHandler</a> from nrfx_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[46]">HAL_Uart_PushByteIntoQueue0</a> from hal_uart.o(i.HAL_Uart_PushByteIntoQueue0) referenced from hal_uart.o(i.HAL_Uart_ConfigInit)
 <LI><a href="#[47]">HAL_Uart_PushByteIntoQueue1</a> from hal_uart.o(i.HAL_Uart_PushByteIntoQueue1) referenced from hal_uart.o(i.HAL_Uart_ConfigInit)
 <LI><a href="#[11]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3c]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[37]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[36]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">POWER_CLOCK_IRQHandler</a> from nrfx_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[38]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[39]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">RNG_IRQHandler</a> from nrfx_rng.o(i.RNG_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3b]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">SAADC_IRQHandler</a> from nrfx_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3a]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[32]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3f]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[48]">SystemLifeTickTimerHandler</a> from systemtim.o(i.SystemLifeTickTimerHandler) referenced from systemtim.o(i.SystemLifeTickTimerInit)
 <LI><a href="#[49]">SystemTim10MsTick_Handler</a> from systemtim.o(i.SystemTim10MsTick_Handler) referenced from systemtim.o(i.SystemTimerIint)
 <LI><a href="#[25]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">TIMER1_IRQHandler</a> from nrfx_timer.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">UARTE0_UART0_IRQHandler</a> from nrfx_prs.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[44]">WakeupISRhandler</a> from isr.o(i.WakeupISRhandler) referenced from drv_motor_218.o(i.DRV_Motor218_PinInterruptEnable)
 <LI><a href="#[44]">WakeupISRhandler</a> from isr.o(i.WakeupISRhandler) referenced from isr.o(i.SystemWakeupPin_ISR_Enable)
 <LI><a href="#[40]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[4b]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[57]">app_error_fault_handler</a> from app_error_weak.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[4d]">app_simple_timer_event_handler</a> from app_simple_timer.o(i.app_simple_timer_event_handler) referenced from app_simple_timer.o(i.app_simple_timer_init)
 <LI><a href="#[95]">ble_advertising_on_ble_evt</a> from ble_advertising.o(i.ble_advertising_on_ble_evt) referenced from drv_ble.o(sdh_ble_observers1)
 <LI><a href="#[9e]">ble_advertising_on_sys_evt</a> from ble_advertising.o(i.ble_advertising_on_sys_evt) referenced from drv_ble.o(sdh_soc_observers1)
 <LI><a href="#[94]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[97]">ble_evt_handler</a> from ble_conn_params.o(i.ble_evt_handler) referenced from ble_conn_params.o(sdh_ble_observers1)
 <LI><a href="#[9a]">ble_evt_handler</a> from drv_ble.o(i.ble_evt_handler) referenced from drv_ble.o(sdh_ble_observers3)
 <LI><a href="#[98]">ble_nus_on_ble_evt</a> from ble_nus.o(i.ble_nus_on_ble_evt) referenced from drv_ble.o(sdh_ble_observers2)
 <LI><a href="#[53]">clock_irq_handler</a> from nrf_drv_clock.o(i.clock_irq_handler) referenced from nrf_drv_clock.o(i.nrf_drv_clock_init)
 <LI><a href="#[51]">conn_params_error_handler</a> from drv_ble.o(i.conn_params_error_handler) referenced from drv_ble.o(i.conn_params_init)
 <LI><a href="#[90]">erase</a> from nrf_fstorage_sd.o(i.erase) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[b]">fm_i2c_close_device</a> from se_driver.o(i.fm_i2c_close_device) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[9]">fm_i2c_dev_init</a> from se_driver.o(i.fm_i2c_dev_init) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[8]">fm_i2c_drv_reg</a> from se_driver.o(i.fm_i2c_drv_reg) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[e]">fm_i2c_drv_unreg</a> from se_driver.o(i.fm_i2c_drv_unreg) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[c]">fm_i2c_get_atr</a> from se_driver.o(i.fm_i2c_get_atr) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[a]">fm_i2c_open_device</a> from se_driver.o(i.fm_i2c_open_device) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[d]">fm_i2c_transceive</a> from se_driver.o(i.fm_i2c_transceive) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[4a]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[52]">gatt_evt_handler</a> from drv_ble.o(i.gatt_evt_handler) referenced from drv_ble.o(i.gatt_init)
 <LI><a href="#[8c]">init</a> from nrf_fstorage_sd.o(i.init) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[93]">is_busy</a> from nrf_fstorage_sd.o(i.is_busy) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[3e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[96]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from drv_ble.o(sdh_ble_observers1)
 <LI><a href="#[99]">nrf_ble_qwr_on_ble_evt</a> from nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt) referenced from drv_ble.o(sdh_ble_observers2)
 <LI><a href="#[9b]">nrf_fstorage_sdh_req_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[a3]">nrf_fstorage_sdh_state_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[9d]">nrf_fstorage_sys_evt_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[58]">nrf_qwr_error_handler</a> from drv_ble.o(i.nrf_qwr_error_handler) referenced from drv_ble.o(i.services_init)
 <LI><a href="#[9f]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[a0]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[54]">nrfx_rng_handler</a> from nrf_drv_rng.o(i.nrfx_rng_handler) referenced from nrf_drv_rng.o(i.nrf_drv_rng_init)
 <LI><a href="#[54]">nrfx_rng_handler</a> from nrf_drv_rng.o(i.nrfx_rng_handler) referenced from nrf_drv_rng.o(i.sd_state_evt_handler)
 <LI><a href="#[8a]">nrfx_uart_0_irq_handler</a> from nrfx_uart.o(i.nrfx_uart_0_irq_handler) referenced from nrfx_uart.o(.constdata)
 <LI><a href="#[8b]">nrfx_uarte_0_irq_handler</a> from nrfx_uarte.o(i.nrfx_uarte_0_irq_handler) referenced from nrfx_uarte.o(.constdata)
 <LI><a href="#[59]">nus_data_handler</a> from drv_ble.o(i.nus_data_handler) referenced from drv_ble.o(i.services_init)
 <LI><a href="#[4c]">on_adv_evt</a> from drv_ble.o(i.on_adv_evt) referenced from drv_ble.o(i.advertising_init)
 <LI><a href="#[50]">on_conn_params_evt</a> from drv_ble.o(i.on_conn_params_evt) referenced from drv_ble.o(i.conn_params_init)
 <LI><a href="#[8e]">read</a> from nrf_fstorage_sd.o(i.read) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[91]">rmap</a> from nrf_fstorage_sd.o(i.rmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[a1]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced 2 times from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[9c]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[4e]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[56]">uart_evt_handler</a> from nrf_drv_uart.o(i.uart_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[55]">uarte_evt_handler</a> from nrf_drv_uart.o(i.uarte_evt_handler) referenced from nrf_drv_uart.o(i.nrf_drv_uart_init)
 <LI><a href="#[8d]">uninit</a> from nrf_fstorage_sd.o(i.uninit) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[4f]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[1]">user_i2c_dev_power_off</a> from se_driver.o(i.user_i2c_dev_power_off) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[0]">user_i2c_dev_power_on</a> from se_driver.o(i.user_i2c_dev_power_on) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[2]">user_i2c_init</a> from se_driver.o(i.user_i2c_init) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[6]">user_i2c_recv_char</a> from se_driver.o(i.user_i2c_recv_char) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[7]">user_i2c_send_addr</a> from se_driver.o(i.user_i2c_send_addr) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[5]">user_i2c_send_char</a> from se_driver.o(i.user_i2c_send_char) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[3]">user_i2c_start</a> from se_driver.o(i.user_i2c_start) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[4]">user_i2c_stop</a> from se_driver.o(i.user_i2c_stop) referenced 2 times from se_driver.o(.data)
 <LI><a href="#[92]">wmap</a> from nrf_fstorage_sd.o(i.wmap) referenced from nrf_fstorage_sd.o(.constdata)
 <LI><a href="#[8f]">write</a> from nrf_fstorage_sd.o(i.write) referenced from nrf_fstorage_sd.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[493]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[a4]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b7]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[494]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[495]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[496]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[497]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[498]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[499]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[409]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
</UL>

<P><STRONG><a name="[a6]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
</UL>

<P><STRONG><a name="[40c]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>

<P><STRONG><a name="[a7]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>

<P><STRONG><a name="[408]"></a>__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_atfifo.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
</UL>

<P><STRONG><a name="[49a]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[411]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>

<P><STRONG><a name="[410]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>

<P><STRONG><a name="[49b]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[49c]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[49d]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[49e]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_cmp_exch</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[49f]"></a>__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_sub_hs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_atomic.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4a0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4a1]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_tx_event_handle
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyWriteId
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_GetCameraData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleRespondData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_ok
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommand
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_tx
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_sym_crypto
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_get_id2
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_hash_sum
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_application
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_update
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_CfgWrite
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDelFingerPro
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryPwdByStringFromEeprom
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryByIdFromEeprom
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ExchangePwdMegIntoEeprom
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write_null
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Bytes2String
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_base64_decode
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[4a2]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4a3]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4a4]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleDelPhone
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write_null
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4a5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4a6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ID2HWSleep
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleRespondData
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ID2Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_reset_queue_data
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_clear_queue
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_tx
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx_handler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_pack_start
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Poweroff
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_transmit
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitFlash
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyDeleteClear
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllSosPwdsFromEeprom
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllPwdMegFromEeprom
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyCheckRegId
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDelFingerPro
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryPwdByStringFromEeprom
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryByIdFromEeprom
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ExchangePwdMegIntoEeprom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_DelPwdIdFromEeprom
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SearchEmptyPwdEepromAddr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleRespondData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_module_update_data_rec
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_check_access
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write_null
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_reset_common
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_reset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_get_registid
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_get_nullnum
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_PlayVoice
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_ConfigInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FifoInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_log_hex_dump
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[4a7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3d6]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
</UL>

<P><STRONG><a name="[18f]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryPwdByStringFromEeprom
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryTmpPwdFromEeprom
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QuerySosPwdFromEeprom
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_base64_decode
</UL>

<P><STRONG><a name="[1c6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[132]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_km_key_name
</UL>

<P><STRONG><a name="[1bb]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[4a8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4a9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[31b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4aa]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[4ab]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4ac]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b0]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4ad]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4ae]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>APP_BleDelPhone</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, app_ble.o(i.APP_BleDelPhone))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = APP_BleDelPhone &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[14b]"></a>APP_BleGetAdminState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ble.o(i.APP_BleGetAdminState))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
</UL>

<P><STRONG><a name="[ba]"></a>APP_BleInit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, app_ble.o(i.APP_BleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = APP_BleInit &rArr; DRV_BleInit &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemAppBleInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
</UL>

<P><STRONG><a name="[bc]"></a>APP_BleServerProcess</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_ble.o(i.APP_BleServerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 2384<LI>Call Chain = APP_BleServerProcess &rArr; BleID2CasePro &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFaceCasePro
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_GetFifoData
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
</UL>

<P><STRONG><a name="[14a]"></a>APP_BleSetAdminState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_ble.o(i.APP_BleSetAdminState))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
</UL>

<P><STRONG><a name="[c2]"></a>APP_FINGER_CfgGetNullNum</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_finger.o(i.APP_FINGER_CfgGetNullNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = APP_FINGER_CfgGetNullNum &rArr; app_finger_cfg_get_nullnum &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_get_nullnum
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
</UL>

<P><STRONG><a name="[c4]"></a>APP_FINGER_CfgRead</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_finger.o(i.APP_FINGER_CfgRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = APP_FINGER_CfgRead &rArr; app_finger_cfg_read &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheck
</UL>

<P><STRONG><a name="[c6]"></a>APP_FINGER_CfgWrite</STRONG> (Thumb, 30 bytes, Stack size 72 bytes, app_finger.o(i.APP_FINGER_CfgWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = APP_FINGER_CfgWrite &rArr; app_finger_cfg_write &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[1c1]"></a>APP_FINGER_GetAddFingerFlow</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, app_finger.o(i.APP_FINGER_GetAddFingerFlow))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
</UL>

<P><STRONG><a name="[c9]"></a>APP_FINGER_GetFingerID</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_finger.o(i.APP_FINGER_GetFingerID))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = APP_FINGER_GetFingerID &rArr; app_finger_cfg_get_registid &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_get_registid
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
</UL>

<P><STRONG><a name="[f1]"></a>APP_FINGER_GetFlowResult</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_finger.o(i.APP_FINGER_GetFlowResult))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDelFingerPro
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[cb]"></a>APP_FINGER_GetPowerFlag</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_finger.o(i.APP_FINGER_GetPowerFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_FINGER_GetPowerFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetPowerFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCfgVersionUpdate
</UL>

<P><STRONG><a name="[cd]"></a>APP_FINGER_GetProtocalVersion</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_finger.o(i.APP_FINGER_GetProtocalVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_FINGER_GetProtocalVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetProtocalVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCfgVersionUpdate
</UL>

<P><STRONG><a name="[cf]"></a>APP_FINGER_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_finger.o(i.APP_FINGER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = APP_FINGER_Init &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[d2]"></a>APP_FINGER_Operate</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, app_finger.o(i.APP_FINGER_Operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_WakeUp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Sleep
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_img_reset
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_get_nullnum
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDelFingerPro
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheck
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[d7]"></a>APP_FINGER_Scan</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, app_finger.o(i.APP_FINGER_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = APP_FINGER_Scan &rArr; app_finger_ack_scan &rArr; app_finger_add &rArr; app_finger_ack_ok &rArr; app_finger_cfg_write &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Scan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Operate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetTxRxFlag
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetPowerStatus
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetFlowStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_work_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_inparam_scan
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_ThreadRealTime
</UL>

<P><STRONG><a name="[e0]"></a>APP_FINGER_Sleep</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_finger.o(i.APP_FINGER_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = APP_FINGER_Sleep &rArr; app_finger_reset_flag &rArr; FINGER_Sleep &rArr; FINGER_Poweroff &rArr; DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDelFingerPro
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheckStop
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheck
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[e1]"></a>APP_ID2HWSleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_id2.o(i.APP_ID2HWSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = APP_ID2HWSleep &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[e3]"></a>APP_ID2Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_id2.o(i.APP_ID2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = APP_ID2Init &rArr; id2_client_init &rArr; km_init &rArr; irot_hal_init &rArr; open_session &rArr; se_open_session &rArr; fm_se_register
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
</UL>

<P><STRONG><a name="[11b]"></a>APP_SCREEN_Operate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_screen.o(i.APP_SCREEN_Operate))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SystemManageMenu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayWarmMenu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetFingerMenu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoOtaModelMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ErrorCheckMenu
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_EepromErrorMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellVideoMenu
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BatVolLowErrMenu
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[150]"></a>APP_SCREEN_Sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_screen.o(i.APP_SCREEN_Sleep))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
</UL>

<P><STRONG><a name="[3b1]"></a>APP_SCREEN_Update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_screen.o(i.APP_SCREEN_Update))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_module_update_data_rec
</UL>

<P><STRONG><a name="[2ea]"></a>APP_SCREEN_WakeUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_screen.o(i.APP_SCREEN_WakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[41]"></a>APP_UpdateDataHandler</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_update.o(i.APP_UpdateDataHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = APP_UpdateDataHandler &rArr; ble_module_update_data_rec &rArr; ble_tx_event_handle &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_module_update_data_rec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_ble.o(i.APP_BleInit)
</UL>
<P><STRONG><a name="[30a]"></a>APP_UpdateWorkCntCountDown</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_update.o(i.APP_UpdateWorkCntCountDown))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[e8]"></a>APP_WIFI_TxState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_wifi.o(i.APP_WIFI_TxState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = APP_WIFI_TxState &rArr; CAM_GetQueueClearState &rArr; cam_get_queue_len &rArr; cam_clear_queue &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_GetQueueClearState
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
</UL>

<P><STRONG><a name="[2fe]"></a>APP_Wifi_Sleep</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_wifi.o(i.APP_Wifi_Sleep))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[ea]"></a>AppBleRespondData</STRONG> (Thumb, 294 bytes, Stack size 280 bytes, app_ble.o(i.AppBleRespondData))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = AppBleRespondData &rArr; Encrypto_my_aes &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_tx_event_handle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_PrintHex
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_aes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
</UL>

<P><STRONG><a name="[ef]"></a>AppBleUserDataDecode</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, app_ble.o(i.AppBleUserDataDecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = AppBleUserDataDecode &rArr; Encrypto_my_aes &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_aes
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[c1]"></a>App_BleProHandleThread</STRONG> (Thumb, 1830 bytes, Stack size 16 bytes, app_ble.o(i.App_BleProHandleThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = App_BleProHandleThread &rArr; App_WIFI_ConfigThread &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_GetServerState
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_GetCameraData
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_ConfigThread
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HumanSensorSet
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_UpdateMenuQuitTime
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDeviceRegThread
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDelFingerPro
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleRespondData
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleServerProcess
</UL>

<P><STRONG><a name="[308]"></a>App_CAM_Tim10Ms</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, app_cam.o(i.App_CAM_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[106]"></a>App_Export_FileInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, app_export.o(i.App_Export_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = App_Export_FileInit &rArr; HAL_EXPORT_FileInit &rArr; HAL_EXPORT_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_FileInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[301]"></a>App_Export_GetAlrmWarmEnSts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_export.o(i.App_Export_GetAlrmWarmEnSts))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[109]"></a>App_Export_GetAlrmWarmState</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, app_export.o(i.App_Export_GetAlrmWarmState))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = App_Export_GetAlrmWarmState &rArr; HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckAlarmButtonHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupISRhandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAlarmButtonRecoveryWarm
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAlarmButtonActionWarm
</UL>

<P><STRONG><a name="[11f]"></a>App_Export_GetPinState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_export.o(i.App_Export_GetPinState))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[10b]"></a>App_Export_ScanPortThread</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, app_export.o(i.App_Export_ScanPortThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = App_Export_ScanPortThread &rArr; HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread10Ms
</UL>

<P><STRONG><a name="[13f]"></a>App_Export_SetAlrmWarmEn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_export.o(i.App_Export_SetAlrmWarmEn))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAlarmButtonRecoveryWarm
</UL>

<P><STRONG><a name="[10c]"></a>App_Export_SleepInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_export.o(i.App_Export_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_Export_SleepInit &rArr; HAL_EXPORT_SleepInit &rArr; DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_SleepInit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[302]"></a>App_Export_Tim10Ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_export.o(i.App_Export_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[10e]"></a>App_Export_WakeupInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_export.o(i.App_Export_WakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = App_Export_WakeupInit &rArr; HAL_EXPORT_WakeupInit &rArr; DRV_NCA9555_WakeupInit &rArr; DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_WakeupInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
</UL>

<P><STRONG><a name="[110]"></a>App_FINGER_Tim10Ms</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_finger.o(i.App_FINGER_Tim10Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_FINGER_Tim10Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_WorkCountDown
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_work_cnt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_img_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[1bc]"></a>App_GUI_DefaultDoorState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_DefaultDoorState))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[147]"></a>App_GUI_FileInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = App_GUI_FileInit &rArr; DRV_InterGenerateRandVec &rArr; nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterGenerateRandVec
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[139]"></a>App_GUI_GetCloseModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_GetCloseModel))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
</UL>

<P><STRONG><a name="[300]"></a>App_GUI_GetCurMenuNo</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_GetCurMenuNo))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[155]"></a>App_GUI_GetDoubleCheckSwSts</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_GetDoubleCheckSwSts))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
</UL>

<P><STRONG><a name="[156]"></a>App_GUI_GetDoubleCheckType</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_GetDoubleCheckType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_GUI_GetDoubleCheckType
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
</UL>

<P><STRONG><a name="[313]"></a>App_GUI_GetNearSenseUnworkCurTim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_GetNearSenseUnworkCurTim))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupISRhandler
</UL>

<P><STRONG><a name="[13c]"></a>App_GUI_GetOpenModel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_GetOpenModel))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
</UL>

<P><STRONG><a name="[115]"></a>App_GUI_GetRegisterSts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_GetRegisterSts))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckButtonStateHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetFingerMenu
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheck
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[154]"></a>App_GUI_GetSysSleepSts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_GetSysSleepSts))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupISRhandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
</UL>

<P><STRONG><a name="[131]"></a>App_GUI_GetSysWakeupType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_GetSysWakeupType))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuProcess
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeupInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckTryProtectHandler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatErrorHandler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckAlarmButtonHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupISRhandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellVideoMenu
</UL>

<P><STRONG><a name="[15a]"></a>App_GUI_GetSystemWorkSts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_GetSystemWorkSts))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuProcess
</UL>

<P><STRONG><a name="[144]"></a>App_GUI_GetWifiUploadSwSts</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_GetWifiUploadSwSts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = App_GUI_GetWifiUploadSwSts &rArr; HAL_ADC_GetCellBatVolState &rArr; HAL_ADC_GetValidVal &rArr; HAL_ADC_GetAdcVal
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetCellBatVolState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
</UL>

<P><STRONG><a name="[117]"></a>App_GUI_MenuJump</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_MenuJump))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeupInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FileInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckTryProtectHandler
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckEepromErrHandler
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckButtonStateHandler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatErrorHandler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckAlarmButtonHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WeatherUpdateMenu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SystemManageMenu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayWarmMenu
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SmartScreenShowMenu
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetVolGradeMenu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysParaMenu
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetStayCheckMenu
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetPwdMenu
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetNearSenseMenu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorTorsionMenu
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorDirMenu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetFingerMenu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDoubleCheckMenu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDeployMenu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetAutoLockMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoOtaModelMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ErrorCheckMenu
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_EepromErrorMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BatVolLowErrMenu
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[159]"></a>App_GUI_MenuProcess</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_MenuProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = App_GUI_MenuProcess &rArr; SystemSelfCheck &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSystemWorkSts
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSystemWorkSts
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_ThreadRealTime
</UL>

<P><STRONG><a name="[13a]"></a>App_GUI_RelieveTryProtect</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_RelieveTryProtect))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = App_GUI_RelieveTryProtect &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StopStayDetectTim
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckButtonStateHandler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SystemManageMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
</UL>

<P><STRONG><a name="[128]"></a>App_GUI_SetCloseModel</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_SetCloseModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_GUI_SetCloseModel &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckButtonStateHandler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[130]"></a>App_GUI_SetOpenModel</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_SetOpenModel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_GUI_SetOpenModel &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetAutoLockTimPara
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckButtonStateHandler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[152]"></a>App_GUI_SetSysSleepSts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_SetSysSleepSts))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupISRhandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
</UL>

<P><STRONG><a name="[120]"></a>App_GUI_SetSysWakeupType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_SetSysWakeupType))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupISRhandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[15c]"></a>App_GUI_SetSystemWorkSts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_SetSystemWorkSts))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuProcess
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[2fd]"></a>App_GUI_SleepInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_SleepInit))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[169]"></a>App_GUI_StayDetectSts</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_StayDetectSts))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim10Ms
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupISRhandler
</UL>

<P><STRONG><a name="[15e]"></a>App_GUI_StopStayDetectTim</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_StopStayDetectTim))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayWarmMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
</UL>

<P><STRONG><a name="[164]"></a>App_GUI_Tim1000Ms</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_Tim1000Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = App_GUI_Tim1000Ms &rArr; HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysWakeupType
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_Tim1000Ms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayDetectSts
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysSleepSts
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_GetHandleTryForbitWarmState
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_GetForgetLockWarmState
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_GetFalseLockWarmState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetAutoLockSts
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLifeTickTimerHandler
</UL>

<P><STRONG><a name="[16a]"></a>App_GUI_Tim10Ms</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_Tim10Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = App_GUI_Tim10Ms &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayDetectSts
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[fb]"></a>App_GUI_UpdateMenuQuitTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_UpdateMenuQuitTime))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_MainProcess
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_GetFifoData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
</UL>

<P><STRONG><a name="[16b]"></a>App_GUI_WakeupInit</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_WakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = App_GUI_WakeupInit &rArr; DRV_InterGenerateRandVec &rArr; nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterGenerateRandVec
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
</UL>

<P><STRONG><a name="[16c]"></a>App_HumanSensorFileInit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, app_humansensor.o(i.App_HumanSensorFileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = App_HumanSensorFileInit &rArr; App_HumanSensorSet &rArr; DRV_Radar_SetMode &rArr; DRV_Radar_SetDistance &rArr; DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HumanSensorSet
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HumanSensorWakeupInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[100]"></a>App_HumanSensorSet</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, app_humansensor.o(i.App_HumanSensorSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = App_HumanSensorSet &rArr; DRV_Radar_SetMode &rArr; DRV_Radar_SetDistance &rArr; DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HumanSensorFileInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
</UL>

<P><STRONG><a name="[16e]"></a>App_HumanSensorWakeupInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_humansensor.o(i.App_HumanSensorWakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = App_HumanSensorWakeupInit &rArr; App_HumanSensorFileInit &rArr; App_HumanSensorSet &rArr; DRV_Radar_SetMode &rArr; DRV_Radar_SetDistance &rArr; DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HumanSensorFileInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
</UL>

<P><STRONG><a name="[30b]"></a>App_HumanSensor_Tim10Ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_humansensor.o(i.App_HumanSensor_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[16f]"></a>App_Key_FileInit</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, app_key.o(i.App_Key_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = App_Key_FileInit &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[12b]"></a>App_Key_GetCloseHandleSts</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_key.o(i.App_Key_GetCloseHandleSts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Key_GetCloseHandleSts
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetKeyValidState
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetMotorTurnDir
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWaitSteady
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[137]"></a>App_Key_GetCombinKeyState</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, app_key.o(i.App_Key_GetCombinKeyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Key_GetCombinKeyState
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetKeyValidState
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_ResetPushTime
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetPushTime
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetDoublePushState
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWaitSteady
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
</UL>

<P><STRONG><a name="[122]"></a>App_Key_GetKeyValidState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_key.o(i.App_Key_GetKeyValidState))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetOpenHandleSts
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCombinKeyState
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCloseHandleSts
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[13b]"></a>App_Key_GetOpenHandleSts</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_key.o(i.App_Key_GetOpenHandleSts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Key_GetOpenHandleSts
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetKeyValidState
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetMotorTurnDir
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWaitSteady
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
</UL>

<P><STRONG><a name="[136]"></a>App_Key_ResetCombinKeyFlow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_key.o(i.App_Key_ResetCombinKeyFlow))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
</UL>

<P><STRONG><a name="[179]"></a>App_Key_ScanKeyProcess</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_key.o(i.App_Key_ScanKeyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = App_Key_ScanKeyProcess &rArr; App_Key_KeyCapture &rArr; HAL_Touch_GetIICBusState &rArr; DRV_GT316L_GetIICBusState &rArr; DRV_GT316L_ReadBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_KeyCapture
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread10Ms
</UL>

<P><STRONG><a name="[17a]"></a>App_Key_SleepInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_key.o(i.App_Key_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = App_Key_SleepInit &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[306]"></a>App_Key_Tim10Ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_key.o(i.App_Key_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[17b]"></a>App_Key_WakeupInit</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, app_key.o(i.App_Key_WakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = App_Key_WakeupInit &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
</UL>

<P><STRONG><a name="[17c]"></a>App_LED_BreathThread</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, app_led.o(i.App_LED_BreathThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = App_LED_BreathThread &rArr; HAL_Touch_PwmOutputCtrl &rArr; DRV_GT316L_PwmOutputCtrl &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_PwmOutputCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread100Ms
</UL>

<P><STRONG><a name="[17e]"></a>App_LED_FileInit</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, app_led.o(i.App_LED_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_LED_FileInit &rArr; HAL_EXPORT_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[f4]"></a>App_LED_OutputCtrl</STRONG> (Thumb, 1218 bytes, Stack size 16 bytes, app_led.o(i.App_LED_OutputCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_PwmOutputCtrl
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_MainProcess
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_SleepInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_FileInit
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckProNormalHandler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckProBreakHandler
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckButtonStateHandler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDeviceRegThread
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_get_led
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WeatherUpdateMenu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SystemManageMenu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayWarmMenu
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetVolGradeMenu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysParaMenu
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetStayCheckMenu
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetPwdMenu
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetNearSenseMenu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorTorsionMenu
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorDirMenu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetFingerMenu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDoubleCheckMenu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDeployMenu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetAutoLockMenu
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoOtaModelMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ErrorCheckMenu
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_EepromErrorMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellVideoMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BatVolLowErrMenu
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[180]"></a>App_LED_SleepInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_led.o(i.App_LED_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_LED_SleepInit &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[304]"></a>App_LED_Tim10Ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_led.o(i.App_LED_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[30f]"></a>App_LED_WakeupInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_led.o(i.App_LED_WakeupInit))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
</UL>

<P><STRONG><a name="[183]"></a>App_PWD_ClearAllPwdMegFromEeprom</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, app_pwd.o(i.App_PWD_ClearAllPwdMegFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = App_PWD_ClearAllPwdMegFromEeprom &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ChangePwdPageidToEepromAddr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
</UL>

<P><STRONG><a name="[185]"></a>App_PWD_ClearAllSosPwdsFromEeprom</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, app_pwd.o(i.App_PWD_ClearAllSosPwdsFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_PWD_ClearAllSosPwdsFromEeprom &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ChgSosPwdPageidToEepromAddr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[187]"></a>App_PWD_ClearAllTmpPwdsFromEeprom</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, app_pwd.o(i.App_PWD_ClearAllTmpPwdsFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = App_PWD_ClearAllTmpPwdsFromEeprom &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ChgTempPwdPageidToEepromAddr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
</UL>

<P><STRONG><a name="[189]"></a>App_PWD_CreateTempPwds</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, app_pwd.o(i.App_PWD_CreateTempPwds))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = App_PWD_CreateTempPwds &rArr; RTC_TimeUpdate &rArr; HAL_RTC_TimeToTm &rArr; rtc_month_days
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Bcd2Bin
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[18b]"></a>App_PWD_DelPwdIdFromEeprom</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, app_pwd.o(i.App_PWD_DelPwdIdFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = App_PWD_DelPwdIdFromEeprom &rArr; App_PWD_QueryByIdFromEeprom &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryByIdFromEeprom
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[18d]"></a>App_PWD_ExchangePwdMegIntoEeprom</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, app_pwd.o(i.App_PWD_ExchangePwdMegIntoEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = App_PWD_ExchangePwdMegIntoEeprom &rArr; App_PWD_QueryByIdFromEeprom &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryByIdFromEeprom
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[18c]"></a>App_PWD_QueryByIdFromEeprom</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, app_pwd.o(i.App_PWD_QueryByIdFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = App_PWD_QueryByIdFromEeprom &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ChangePwdPageidToEepromAddr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ExchangePwdMegIntoEeprom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_DelPwdIdFromEeprom
</UL>

<P><STRONG><a name="[18e]"></a>App_PWD_QueryPwdByStringFromEeprom</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, app_pwd.o(i.App_PWD_QueryPwdByStringFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = App_PWD_QueryPwdByStringFromEeprom &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ChangePwdPageidToEepromAddr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_VerifyUserPwd
</UL>

<P><STRONG><a name="[135]"></a>App_PWD_SaveOnePwdMegIntoEeprom</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, app_pwd.o(i.App_PWD_SaveOnePwdMegIntoEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_PWD_SaveOnePwdMegIntoEeprom &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SearchEmptyPwdEepromAddr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
</UL>

<P><STRONG><a name="[193]"></a>App_PWD_SaveSosPwdIntoEeprom</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, app_pwd.o(i.App_PWD_SaveSosPwdIntoEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = App_PWD_SaveSosPwdIntoEeprom &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ChgSosPwdPageidToEepromAddr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[194]"></a>App_PWD_SaveTempPwdsIntoEeprom</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, app_pwd.o(i.App_PWD_SaveTempPwdsIntoEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = App_PWD_SaveTempPwdsIntoEeprom &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ChgTempPwdPageidToEepromAddr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[161]"></a>App_PWD_VerifySosPwd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_pwd.o(i.App_PWD_VerifySosPwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = App_PWD_VerifySosPwd &rArr; App_PWD_QuerySosPwdFromEeprom &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QuerySosPwdFromEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
</UL>

<P><STRONG><a name="[162]"></a>App_PWD_VerifyTempPwd</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_pwd.o(i.App_PWD_VerifyTempPwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_PWD_VerifyTempPwd &rArr; App_PWD_QueryTmpPwdFromEeprom &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryTmpPwdFromEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
</UL>

<P><STRONG><a name="[160]"></a>App_PWD_VerifyUserPwd</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, app_pwd.o(i.App_PWD_VerifyUserPwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = App_PWD_VerifyUserPwd &rArr; App_PWD_QueryPwdByStringFromEeprom &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryPwdByStringFromEeprom
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_CheckTimeliness
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
</UL>

<P><STRONG><a name="[307]"></a>App_SCREEN_Tim10Ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_screen.o(i.App_SCREEN_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[195]"></a>App_Scheduler_Process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.App_Scheduler_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = App_Scheduler_Process &rArr; App_Scheduler_ThreadRealTime &rArr; App_GUI_MenuProcess &rArr; SystemSelfCheck &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_ThreadRealTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread50Ms
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread500Ms
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread10Ms
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread100Ms
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread1000Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformLoopExecute
</UL>

<P><STRONG><a name="[30c]"></a>App_Scheduler_Tim10Ms</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, scheduler.o(i.App_Scheduler_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[1a1]"></a>App_Touch_FileInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_touch.o(i.App_Touch_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = App_Touch_FileInit &rArr; HAL_Touch_FileInit &rArr; DRV_GT316L_FileInit &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_FileInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[f3]"></a>App_Touch_FuncEnCtrl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_touch.o(i.App_Touch_FuncEnCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_Touch_FuncEnCtrl &rArr; MemsetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemsetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_WakeupInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_SleepInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FileInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDeviceRegThread
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WeatherUpdateMenu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SystemManageMenu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayWarmMenu
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetVolGradeMenu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysParaMenu
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetStayCheckMenu
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetPwdMenu
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetNearSenseMenu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorTorsionMenu
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorDirMenu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetFingerMenu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDoubleCheckMenu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDeployMenu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetAutoLockMenu
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoOtaModelMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ErrorCheckMenu
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_EepromErrorMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellVideoMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BatVolLowErrMenu
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[f5]"></a>App_Touch_GetCurrentKeyIndex</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_touch.o(i.App_Touch_GetCurrentKeyIndex))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDeviceRegThread
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
</UL>

<P><STRONG><a name="[f6]"></a>App_Touch_GetCurrentKeyValBuf</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, app_touch.o(i.App_Touch_GetCurrentKeyValBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_Touch_GetCurrentKeyValBuf &rArr; MemsetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemsetByte
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemcpyByteTobyte
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDeviceRegThread
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetAutoLockMenu
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
</UL>

<P><STRONG><a name="[118]"></a>App_Touch_GetCurrentKeyValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_touch.o(i.App_Touch_GetCurrentKeyValue))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SystemManageMenu
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetVolGradeMenu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysParaMenu
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetStayCheckMenu
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetNearSenseMenu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorTorsionMenu
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorDirMenu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetFingerMenu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDoubleCheckMenu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDeployMenu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetAutoLockMenu
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[19e]"></a>App_Touch_MainProcess</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, app_touch.o(i.App_Touch_MainProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_Touch_MainProcess &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_GetKeyValue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_UpdateMenuQuitTime
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread50Ms
</UL>

<P><STRONG><a name="[1a6]"></a>App_Touch_SleepInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_touch.o(i.App_Touch_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = App_Touch_SleepInit &rArr; HAL_Touch_SleepInit &rArr; DRV_GT316L_SleepInit &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_SleepInit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[305]"></a>App_Touch_Tim10Ms</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_touch.o(i.App_Touch_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[1a8]"></a>App_Touch_WakeupInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_touch.o(i.App_Touch_WakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = App_Touch_WakeupInit &rArr; HAL_Touch_FileInit &rArr; DRV_GT316L_FileInit &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_FileInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
</UL>

<P><STRONG><a name="[102]"></a>App_WIFI_CommomTx</STRONG> (Thumb, 2346 bytes, Stack size 1056 bytes, app_wifi.o(i.App_WIFI_CommomTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_GetMacAdd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValidVal
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_PrintHex
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeUpdate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UploadDataFill
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GetCheckSumWord
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Wifi_TxMessage
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SetCapture
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_ConfigThread
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WeatherUpdateMenu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayWarmMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[ff]"></a>App_WIFI_ConfigThread</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, app_wifi.o(i.App_WIFI_ConfigThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = App_WIFI_ConfigThread &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioRead
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PowerOn
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PowerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
</UL>

<P><STRONG><a name="[2eb]"></a>App_WIFI_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_wifi.o(i.App_WIFI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[1a0]"></a>App_WIFI_ScanProcess</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_wifi.o(i.App_WIFI_ScanProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = App_WIFI_ScanProcess &rArr; CAM_ServerScan &rArr; CAM_UartWakeUp &rArr; CAM_SendCommand &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ServerScan
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_ThreadRealTime
</UL>

<P><STRONG><a name="[309]"></a>App_Wifi_Tim10Ms</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app_wifi.o(i.App_Wifi_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[1b3]"></a>BLEParse</STRONG> (Thumb, 4958 bytes, Stack size 144 bytes, app_ble.o(i.BLEParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = BLEParse &rArr; AppBleRespondData &rArr; Encrypto_my_aes &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_GetMacAdd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_ReadTime
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValidVal
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllSosPwdsFromEeprom
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleDelPhone
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyCheckRegId
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyWriteId
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyReadId
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyDeleteId
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WriteTime
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterGenerateStartOta
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_UpdateMenuQuitTime
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiUploadSwSts
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DefaultDoorState
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_CfgWrite
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleUserDataDecode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleSetAdminState
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Bcd2Bin
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveTempPwdsIntoEeprom
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveSosPwdIntoEeprom
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveOnePwdMegIntoEeprom
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ExchangePwdMegIntoEeprom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_DelPwdIdFromEeprom
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_CreateTempPwds
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_PrintHex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_GenerateRandVec
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_aes
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleRespondData
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteFixSeting
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReadFixSeting
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogClear
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_GetFifoData
</UL>

<P><STRONG><a name="[bd]"></a>BLE_GetFifoData</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, app_ble.o(i.BLE_GetFifoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = BLE_GetFifoData &rArr; BLEParse &rArr; AppBleRespondData &rArr; Encrypto_my_aes &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_UpdateMenuQuitTime
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleServerProcess
</UL>

<P><STRONG><a name="[c0]"></a>BleFaceCasePro</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_ble.o(i.BleFaceCasePro))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleServerProcess
</UL>

<P><STRONG><a name="[bf]"></a>BleFingerCasePro</STRONG> (Thumb, 658 bytes, Stack size 136 bytes, app_ble.o(i.BleFingerCasePro))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = BleFingerCasePro &rArr; AppBleRespondData &rArr; Encrypto_my_aes &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetFlowResult
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GetBleConnect
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetFingerID
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetAddFingerFlow
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_CfgGetNullNum
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleRespondData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleServerProcess
</UL>

<P><STRONG><a name="[be]"></a>BleID2CasePro</STRONG> (Thumb, 1200 bytes, Stack size 568 bytes, app_id2.o(i.BleID2CasePro))
<BR><BR>[Stack]<UL><LI>Max Depth = 2376<LI>Call Chain = BleID2CasePro &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_challenge_auth_code
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_PrintHex
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_GenerateRandVec
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_sha256
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_base64
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_aes
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleRespondData
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleServerProcess
</UL>

<P><STRONG><a name="[1c8]"></a>CAM_ClearCameraData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_cam.o(i.CAM_ClearCameraData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAM_ClearCameraData &rArr; CAM_SendCommandStart &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
</UL>

<P><STRONG><a name="[104]"></a>CAM_GetCameraData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, app_cam.o(i.CAM_GetCameraData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAM_GetCameraData &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
</UL>

<P><STRONG><a name="[e9]"></a>CAM_GetQueueClearState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_cam.o(i.CAM_GetQueueClearState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAM_GetQueueClearState &rArr; cam_get_queue_len &rArr; cam_clear_queue &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_queue_len
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_WIFI_TxState
</UL>

<P><STRONG><a name="[fe]"></a>CAM_GetServerState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_cam.o(i.CAM_GetServerState))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_PirWakeUpTest
</UL>

<P><STRONG><a name="[145]"></a>CAM_PirWakeUpTest</STRONG> (Thumb, 454 bytes, Stack size 24 bytes, app_cam.o(i.CAM_PirWakeUpTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = CAM_PirWakeUpTest &rArr; HAL_Uart_ConfigInit &rArr; DRV_Uart_ConfigInit &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_GetServerState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_UartSelect
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ReadFifoData
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ErrorCheckMenu
</UL>

<P><STRONG><a name="[fd]"></a>CAM_SendCommandStart</STRONG> (Thumb, 1474 bytes, Stack size 24 bytes, app_cam.o(i.CAM_SendCommandStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CAM_SendCommandStart &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ClearCameraData
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SetCapture
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_PirWakeUpTest
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[1b1]"></a>CAM_ServerScan</STRONG> (Thumb, 702 bytes, Stack size 16 bytes, app_cam.o(i.CAM_ServerScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = CAM_ServerScan &rArr; CAM_UartWakeUp &rArr; CAM_SendCommand &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_GetCurDeviceType
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartRelease
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartWakeUp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommand
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ReadFifoData
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_ScanProcess
</UL>

<P><STRONG><a name="[1ad]"></a>CAM_SetCapture</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_cam.o(i.CAM_SetCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAM_SetCapture &rArr; CAM_SendCommandStart &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
</UL>

<P><STRONG><a name="[1d2]"></a>CAM_UartRelease</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_cam.o(i.CAM_UartRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = CAM_UartRelease &rArr; DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinSet
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_DeInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_UartSelect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_reset_queue_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ServerScan
</UL>

<P><STRONG><a name="[1cb]"></a>DRV_74HC0452_UartSelect</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, drv_74hc4052.o(i.DRV_74HC0452_UartSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinSet
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_SleepInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_FileInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartRelease
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_PirWakeUpTest
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartWakeUp
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Poweroff
</UL>

<P><STRONG><a name="[1e0]"></a>DRV_ADC_FileInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drv_adc.o(i.DRV_ADC_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DRV_ADC_FileInit &rArr; DRV_ADC_ConfigInit &rArr; nrfx_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_ConfigInit
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_WakeupInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_FileInit
</UL>

<P><STRONG><a name="[23f]"></a>DRV_ADC_GetAdcVal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_adc.o(i.DRV_ADC_GetAdcVal))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetAdcVal
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetAmpAdcVal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetAmpAdcVal
</UL>

<P><STRONG><a name="[24b]"></a>DRV_ADC_GetVoltage</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_adc.o(i.DRV_ADC_GetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_ADC_GetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValidVal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetAmpAdcVal
</UL>

<P><STRONG><a name="[1e1]"></a>DRV_ADC_SampleTrigger</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_adc.o(i.DRV_ADC_SampleTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DRV_ADC_SampleTrigger &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_SampleTrigger
</UL>

<P><STRONG><a name="[1e3]"></a>DRV_ADC_SleepInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drv_adc.o(i.DRV_ADC_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DRV_ADC_SleepInit &rArr; DRV_ADC_AdcSourceRelease &rArr; nrfx_saadc_uninit &rArr; nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioDisconnect
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_AdcSourceRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_SleepInit
</UL>

<P><STRONG><a name="[1e5]"></a>DRV_AM5BA340_FileInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_am5ba340.o(i.DRV_AM5BA340_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DRV_AM5BA340_FileInit &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WakeupInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_FileInit
</UL>

<P><STRONG><a name="[1e6]"></a>DRV_AM5BA340_PlayVoice</STRONG> (Thumb, 5650 bytes, Stack size 112 bytes, drv_am5ba340.o(i.DRV_AM5BA340_PlayVoice))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DRV_AM5BA340_PlayVoice &rArr; DRV_AM5BA340_SendBytes &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_SendBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_VolumeSet
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayVoiceNum
</UL>

<P><STRONG><a name="[1e9]"></a>DRV_AM5BA340_SleepInit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_am5ba340.o(i.DRV_AM5BA340_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DRV_AM5BA340_SleepInit &rArr; DRV_GpioOut0 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_SleepInit
</UL>

<P><STRONG><a name="[1ea]"></a>DRV_AM5BA340_VolumeSet</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, drv_am5ba340.o(i.DRV_AM5BA340_VolumeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DRV_AM5BA340_VolumeSet &rArr; DRV_AM5BA340_PlayVoice &rArr; DRV_AM5BA340_SendBytes &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_PlayVoice
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
</UL>

<P><STRONG><a name="[1eb]"></a>DRV_BM8563_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_rtc_bm8563.o(i.DRV_BM8563_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DRV_BM8563_Init &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_ReadTime
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1ed]"></a>DRV_BM8563_ReadTime</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, drv_rtc_bm8563.o(i.DRV_BM8563_ReadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = DRV_BM8563_ReadTime &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_ReadTime
</UL>

<P><STRONG><a name="[1ef]"></a>DRV_BM8563_ShutDowFlag</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_rtc_bm8563.o(i.DRV_BM8563_ShutDowFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DRV_BM8563_ShutDowFlag &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1f0]"></a>DRV_BM8563_WriteTime</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, drv_rtc_bm8563.o(i.DRV_BM8563_WriteTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DRV_BM8563_WriteTime &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WriteTime
</UL>

<P><STRONG><a name="[bb]"></a>DRV_BleInit</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, drv_ble.o(i.DRV_BleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = DRV_BleInit &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FifoInit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleInit
</UL>

<P><STRONG><a name="[1f7]"></a>DRV_FifoInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_ble.o(i.DRV_FifoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_FifoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
</UL>

<P><STRONG><a name="[1fa]"></a>DRV_GT316L_FileInit</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, drv_gt316l.o(i.DRV_GT316L_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = DRV_GT316L_FileInit &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_FileInit
</UL>

<P><STRONG><a name="[1fc]"></a>DRV_GT316L_GetIICBusState</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_gt316l.o(i.DRV_GT316L_GetIICBusState))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DRV_GT316L_GetIICBusState &rArr; DRV_GT316L_ReadBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_GetIICBusState
</UL>

<P><STRONG><a name="[1fe]"></a>DRV_GT316L_GetKeyValue</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, drv_gt316l.o(i.DRV_GT316L_GetKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = DRV_GT316L_GetKeyValue &rArr; DRV_GT316L_ReadBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_GetKeyValue
</UL>

<P><STRONG><a name="[1ff]"></a>DRV_GT316L_PwmOutputCtrl</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, drv_gt316l.o(i.DRV_GT316L_PwmOutputCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DRV_GT316L_PwmOutputCtrl &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_PwmOutputCtrl
</UL>

<P><STRONG><a name="[201]"></a>DRV_GT316L_SleepInit</STRONG> (Thumb, 544 bytes, Stack size 64 bytes, drv_gt316l.o(i.DRV_GT316L_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = DRV_GT316L_SleepInit &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_SleepInit
</UL>

<P><STRONG><a name="[124]"></a>DRV_GetBleConnect</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, drv_ble.o(i.DRV_GetBleConnect))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[202]"></a>DRV_GpioDefault</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.DRV_GpioDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DRV_GpioDefault &rArr; DRV_GpioDisconnect &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[1e4]"></a>DRV_GpioDisconnect</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_gpio.o(i.DRV_GpioDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DRV_GpioDisconnect &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioDefault
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_SleepInit
</UL>

<P><STRONG><a name="[204]"></a>DRV_GpioHighOut0</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_gpio.o(i.DRV_GpioHighOut0))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DRV_GpioHighOut0 &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OpenDoorThread
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_CloseDoorThread
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceCloseDoorThread
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_FileInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_CloseDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_0
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_0
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OutputCtrl
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OutputCtrl
</UL>

<P><STRONG><a name="[206]"></a>DRV_GpioHighOut1</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_gpio.o(i.DRV_GpioHighOut1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DRV_GpioHighOut1 &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OpenDoorThread
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_CloseDoorThread
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceCloseDoorThread
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_CloseDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OutputCtrl
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OutputCtrl
</UL>

<P><STRONG><a name="[170]"></a>DRV_GpioInputPullnull</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.DRV_GpioInputPullnull))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_WakeupInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_SleepInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_FileInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_SleepInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_FileInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_FileInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_DeInit
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SDA_IN
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_1
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_1
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_SleepInit
</UL>

<P><STRONG><a name="[209]"></a>DRV_GpioInputPullup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_gpio.o(i.DRV_GpioInputPullup))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_WakeupInit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_FileInit
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_wait_ack
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_read_byte
</UL>

<P><STRONG><a name="[20a]"></a>DRV_GpioInterruptDisable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_gpio.o(i.DRV_GpioInterruptDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_GpioInterruptDisable &rArr; nrfx_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupPin_ISR_Disable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptDisable
</UL>

<P><STRONG><a name="[20c]"></a>DRV_GpioInterruptEnable</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, drv_gpio.o(i.DRV_GpioInterruptEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = DRV_GpioInterruptEnable &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_is_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupPin_ISR_Enable
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptEnable
</UL>

<P><STRONG><a name="[e5]"></a>DRV_GpioOut0</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_gpio.o(i.DRV_GpioOut0))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DRV_GpioOut0 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOutPP
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ID2Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PowerOn
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellCtrl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_SleepInit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_SleepInit
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatVolCaptPinEnCtrl
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatChargeSwitchCtrl
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_IICSendBytes
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_SendBytes
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_stop
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_start
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_write_byte
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_wait_ack
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_send_noack
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_send_ack
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_restart
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_read_byte
</UL>

<P><STRONG><a name="[e2]"></a>DRV_GpioOut1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_gpio.o(i.DRV_GpioOut1))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOutPP
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ID2HWSleep
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ID2Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PowerOff
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellCtrl
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_FileInit
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatVolCaptPinEnCtrl
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatChargeSwitchCtrl
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_IICSendBytes
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_SendBytes
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_stop
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_start
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_write_byte
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_wait_ack
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_send_noack
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_send_ack
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_restart
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_read_byte
</UL>

<P><STRONG><a name="[211]"></a>DRV_GpioOutPP</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, drv_gpio.o(i.DRV_GpioOutPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_wait_ack
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_read_byte
</UL>

<P><STRONG><a name="[178]"></a>DRV_GpioRead</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_gpio.o(i.DRV_GpioRead))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_ConfigThread
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_KeyScan
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinSenseHandler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_SleepInit
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_SDA_IN
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetSensorState
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_wait_ack
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_read_byte
</UL>

<P><STRONG><a name="[216]"></a>DRV_HE24C512_ReadBytes</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_he24c512.o(i.DRV_HE24C512_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_IICGetBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
</UL>

<P><STRONG><a name="[217]"></a>DRV_HE24C512_WriteBytes</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, drv_he24c512.o(i.DRV_HE24C512_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_IICSendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
</UL>

<P><STRONG><a name="[218]"></a>DRV_HFClock_Release</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_clk.o(i.DRV_HFClock_Release))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DRV_HFClock_Release &rArr; nrf_drv_clock_hfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepBusClkInit
</UL>

<P><STRONG><a name="[21a]"></a>DRV_HFClock_Request</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_clk.o(i.DRV_HFClock_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DRV_HFClock_Request &rArr; nrf_drv_clock_hfclk_request &rArr; hfclk_start &rArr; nrfx_clock_hfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWorkBusClkInit
</UL>

<P><STRONG><a name="[1ee]"></a>DRV_IICReadByte</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, drv_iic.o(i.DRV_IICReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RcvByte
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck_I2c
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack_I2c
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BM8563_ShutDowFlag
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BM8563_ReadTime
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_GetBytes
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_ReadBytes
</UL>

<P><STRONG><a name="[213]"></a>DRV_IICReadByteEeprom</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, drv_iic.o(i.DRV_IICReadByteEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RcvByte
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck_I2c
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack_I2c
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_IICGetBytes
</UL>

<P><STRONG><a name="[200]"></a>DRV_IICWrite</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, drv_iic.o(i.DRV_IICWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_SendBytes
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_SendBytes
</UL>

<P><STRONG><a name="[1ec]"></a>DRV_IICWriteByte</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, drv_iic.o(i.DRV_IICWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BM8563_WriteTime
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BM8563_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_IICWriteByte
</UL>

<P><STRONG><a name="[215]"></a>DRV_IICWriteEeprom</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, drv_iic.o(i.DRV_IICWriteEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_IICSendBytes
</UL>

<P><STRONG><a name="[2bc]"></a>DRV_InterDelayus</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, drv_interface.o(i.DRV_InterDelayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV_InterDelayus
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayus
</UL>

<P><STRONG><a name="[148]"></a>DRV_InterGenerateRandVec</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, drv_interface.o(i.DRV_InterGenerateRandVec))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DRV_InterGenerateRandVec &rArr; nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeupInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FileInit
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_GenerateRandVec
</UL>

<P><STRONG><a name="[1b4]"></a>DRV_InterGenerateStartOta</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, drv_interface.o(i.DRV_InterGenerateStartOta))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[2bd]"></a>DRV_InterGetMacAddr</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, drv_interface.o(i.DRV_InterGetMacAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_GetMacAdd
</UL>

<P><STRONG><a name="[114]"></a>DRV_InterPrint</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, drv_interface.o(i.DRV_InterPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuProcess
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupPin_ISR_Disable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCfgVersionUpdate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_ReadTime
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeupInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetOpenModel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWaitSteady
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckTryProtectHandler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatErrorHandler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckAlarmButtonHandler
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_TimerInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LifeTickTimerCtrl
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim10Ms
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLifeTickTimerInit
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WriteTime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiUploadSwSts
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveTempPwdsIntoEeprom
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveSosPwdIntoEeprom
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveOnePwdMegIntoEeprom
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryPwdByStringFromEeprom
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ExchangePwdMegIntoEeprom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_DelPwdIdFromEeprom
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_CreateTempPwds
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryTmpPwdFromEeprom
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QuerySosPwdFromEeprom
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_CheckTimeliness
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_challenge_auth_code
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_PrintHex
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinSenseHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupISRhandler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_module_update_data_rec
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_WakeUp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Sleep
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_delete
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_clear_common
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_clear
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_check_access
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_get_nullnum
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_add
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_ok
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_SleepInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UploadDataFill
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PowerOn
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PowerOff
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_DeInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ServerScan
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_reset_queue_data
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_clear_queue
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartWakeUp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_tx
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx_handler
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WeatherUpdateMenu
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SystemManageMenu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayWarmMenu
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetVolGradeMenu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysParaMenu
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetStayCheckMenu
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetPwdMenu
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetNearSenseMenu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorTorsionMenu
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorDirMenu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetFingerMenu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDoubleCheckMenu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDeployMenu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetAutoLockMenu
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoOtaModelMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheckStop
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheck
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ErrorCheckMenu
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_EepromErrorMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckStayDetectAction
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellVideoMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BatVolLowErrMenu
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SetMode
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceCloseDoorThread
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_CloseDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_AutoLockCheck
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_my_printf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptEnable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptDisable
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_hash_digest
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dump_chip_conf_info
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_cipher
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sym_cipher
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sign
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dump_id2_conf_info
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_log_hex_dump
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_update
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_init
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_finish
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_update
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_get_ctx_size
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_final
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_digest
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_session
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
</UL>

<P><STRONG><a name="[227]"></a>DRV_InterRandVecInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_interface.o(i.DRV_InterRandVecInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DRV_InterRandVecInit &rArr; nrf_drv_rng_init &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[229]"></a>DRV_LifeTickTimerCtrl</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, drv_timer.o(i.DRV_LifeTickTimerCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_LifeTickTimerCtrl &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLifeTickTimerCtrl
</UL>

<P><STRONG><a name="[22c]"></a>DRV_LifeTickTimerInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_timer.o(i.DRV_LifeTickTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DRV_LifeTickTimerInit &rArr; app_timer_init &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLifeTickTimerInit
</UL>

<P><STRONG><a name="[22f]"></a>DRV_Motor218_AutoLockCheck</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_AutoLockCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_Motor218_AutoLockCheck &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetSensorState
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_AutoLockCheck
</UL>

<P><STRONG><a name="[231]"></a>DRV_Motor218_BurnTestCloseDoorThread</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, drv_motor_218.o(i.DRV_Motor218_BurnTestCloseDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = DRV_Motor218_BurnTestCloseDoorThread &rArr; DRV_Motor218_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptEnable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptDisable
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OutputCtrl
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnTorqueSts
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirSts
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirFromFlash
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetAmpAdcVal
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_BurnTestCloseDoorThread
</UL>

<P><STRONG><a name="[239]"></a>DRV_Motor218_CloseDoorThread</STRONG> (Thumb, 516 bytes, Stack size 16 bytes, drv_motor_218.o(i.DRV_Motor218_CloseDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = DRV_Motor218_CloseDoorThread &rArr; DRV_Motor218_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptEnable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptDisable
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OutputCtrl
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirSts
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirFromFlash
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetSensorState
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_CloseDoorThread
</UL>

<P><STRONG><a name="[23a]"></a>DRV_Motor218_DefendActionCheck</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_DefendActionCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV_Motor218_DefendActionCheck &rArr; DRV_Motor218_GetSensorState
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetSensorState
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_DefendActionCheck
</UL>

<P><STRONG><a name="[289]"></a>DRV_Motor218_FalseLockWarmCheck</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_motor_218.o(i.DRV_Motor218_FalseLockWarmCheck))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_FalseLockWarmCheck
</UL>

<P><STRONG><a name="[23b]"></a>DRV_Motor218_FileInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DRV_Motor218_FileInit &rArr; DRV_Motor218_PinInterruptEnable &rArr; DRV_GpioInterruptEnable &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptEnable
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OutputCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_FileInit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_WakeupInit
</UL>

<P><STRONG><a name="[23c]"></a>DRV_Motor218_ForceCloseDoorThread</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, drv_motor_218.o(i.DRV_Motor218_ForceCloseDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = DRV_Motor218_ForceCloseDoorThread &rArr; DRV_Motor218_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptEnable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptDisable
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OutputCtrl
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirSts
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirFromFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ForceCloseDoorThread
</UL>

<P><STRONG><a name="[23d]"></a>DRV_Motor218_ForceOpenDoorThread</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, drv_motor_218.o(i.DRV_Motor218_ForceOpenDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = DRV_Motor218_ForceOpenDoorThread &rArr; DRV_Motor218_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptEnable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptDisable
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OutputCtrl
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnTorqueSts
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirSts
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirFromFlash
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetAmpAdcVal
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ForceOpenDoorThread
</UL>

<P><STRONG><a name="[23e]"></a>DRV_Motor218_ForgetLockWarmCheck</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_ForgetLockWarmCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV_Motor218_ForgetLockWarmCheck &rArr; DRV_Motor218_GetSensorState
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetSensorState
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ForgetLockWarmCheck
</UL>

<P><STRONG><a name="[28b]"></a>DRV_Motor218_GetFalseLockWarmState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_motor_218.o(i.DRV_Motor218_GetFalseLockWarmState))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_GetFalseLockWarmState
</UL>

<P><STRONG><a name="[28c]"></a>DRV_Motor218_GetForgetLockWarmState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, drv_motor_218.o(i.DRV_Motor218_GetForgetLockWarmState))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_GetForgetLockWarmState
</UL>

<P><STRONG><a name="[28d]"></a>DRV_Motor218_GetHandleTryForbitWarmState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_motor_218.o(i.DRV_Motor218_GetHandleTryForbitWarmState))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_GetHandleTryForbitWarmState
</UL>

<P><STRONG><a name="[240]"></a>DRV_Motor218_HandleTryForbitWarmCheck</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_HandleTryForbitWarmCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV_Motor218_HandleTryForbitWarmCheck &rArr; DRV_Motor218_GetSensorState
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetSensorState
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_HandleTryForbitWarmCheck
</UL>

<P><STRONG><a name="[241]"></a>DRV_Motor218_OpenDoorThread</STRONG> (Thumb, 1516 bytes, Stack size 16 bytes, drv_motor_218.o(i.DRV_Motor218_OpenDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = DRV_Motor218_OpenDoorThread &rArr; DRV_Motor218_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReadSeting
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptEnable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinInterruptDisable
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OutputCtrl
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnTorqueSts
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirSts
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirFromFlash
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetSensorState
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetAmpAdcVal
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_OpenDoorThread
</UL>

<P><STRONG><a name="[243]"></a>DRV_Motor218_PinSenseHandler</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_PinSenseHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_Motor218_PinSenseHandler &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioRead
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetSensorState
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupISRhandler
</UL>

<P><STRONG><a name="[28e]"></a>DRV_Motor218_ReleaseTryProtectCheck</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_motor_218.o(i.DRV_Motor218_ReleaseTryProtectCheck))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ReleaseTryProtectCheck
</UL>

<P><STRONG><a name="[290]"></a>DRV_Motor218_SleepInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, drv_motor_218.o(i.DRV_Motor218_SleepInit))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_SleepInit
</UL>

<P><STRONG><a name="[291]"></a>DRV_Motor218_Tim1000Ms</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, drv_motor_218.o(i.DRV_Motor218_Tim1000Ms))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_Tim1000Ms
</UL>

<P><STRONG><a name="[294]"></a>DRV_Motor218_Tim10Ms</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, drv_motor_218.o(i.DRV_Motor218_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_Tim10Ms
</UL>

<P><STRONG><a name="[244]"></a>DRV_Motor218_WakeupInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_WakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DRV_Motor218_WakeupInit &rArr; DRV_Motor218_FileInit &rArr; DRV_Motor218_PinInterruptEnable &rArr; DRV_GpioInterruptEnable &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_FileInit
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_WakeupInit
</UL>

<P><STRONG><a name="[245]"></a>DRV_Motor_CloseDoorThread</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, drv_motor.o(i.DRV_Motor_CloseDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = DRV_Motor_CloseDoorThread &rArr; DRV_Motor_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OutputCtrl
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetTurnTorqueSts
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetTurnDirSts
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetTurnDirFromFlash
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetAmpAdcVal
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ForceCloseDoorThread
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_CloseDoorThread
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_BurnTestCloseDoorThread
</UL>

<P><STRONG><a name="[24c]"></a>DRV_Motor_OpenDoorThread</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, drv_motor.o(i.DRV_Motor_OpenDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = DRV_Motor_OpenDoorThread &rArr; DRV_Motor_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OutputCtrl
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetTurnTorqueSts
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetTurnDirSts
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetTurnDirFromFlash
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetAmpAdcVal
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_OpenDoorThread
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ForceOpenDoorThread
</UL>

<P><STRONG><a name="[293]"></a>DRV_Motor_Tim10Ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_motor.o(i.DRV_Motor_Tim10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_Tim10Ms
</UL>

<P><STRONG><a name="[24d]"></a>DRV_NCA9555_FileInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, drv_nca9555.o(i.DRV_NCA9555_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DRV_NCA9555_FileInit &rArr; DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullup
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_FileInit
</UL>

<P><STRONG><a name="[1d6]"></a>DRV_NCA9555_PinDirInit</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, drv_nca9555.o(i.DRV_NCA9555_PinDirInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = DRV_NCA9555_PinDirInit &rArr; DRV_NCA9555_PortDirectConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PortDirectConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinInit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_PinInit
</UL>

<P><STRONG><a name="[250]"></a>DRV_NCA9555_PinGet</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, drv_nca9555.o(i.DRV_NCA9555_PinGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_GetBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
</UL>

<P><STRONG><a name="[1d7]"></a>DRV_NCA9555_PinPoloInit</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, drv_nca9555.o(i.DRV_NCA9555_PinPoloInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PortPoloConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinInit
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_PinInit
</UL>

<P><STRONG><a name="[1d8]"></a>DRV_NCA9555_PinSet</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, drv_nca9555.o(i.DRV_NCA9555_PinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinSet
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_UartSelect
</UL>

<P><STRONG><a name="[253]"></a>DRV_NCA9555_SleepInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_nca9555.o(i.DRV_NCA9555_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DRV_NCA9555_SleepInit &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_SleepInit
</UL>

<P><STRONG><a name="[254]"></a>DRV_NCA9555_WakeupInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_nca9555.o(i.DRV_NCA9555_WakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DRV_NCA9555_WakeupInit &rArr; DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullup
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_WakeupInit
</UL>

<P><STRONG><a name="[16d]"></a>DRV_Radar_SetMode</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, drv_radar.o(i.DRV_Radar_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DRV_Radar_SetMode &rArr; DRV_Radar_SetDistance &rArr; DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_TurnOn
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_TtiggerHighTime
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SoftReset
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SetDistance
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SenseRangeAdj
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_LightOffTime
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HumanSensorSet
</UL>

<P><STRONG><a name="[25c]"></a>DRV_SysMgmt_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, drv_clk.o(i.DRV_SysMgmt_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DRV_SysMgmt_Init &rArr; nrf_pwr_mgmt_init &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemManagerModelInit
</UL>

<P><STRONG><a name="[153]"></a>DRV_SysMgmt_Run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_clk.o(i.DRV_SysMgmt_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DRV_SysMgmt_Run &rArr; nrf_pwr_mgmt_run &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
</UL>

<P><STRONG><a name="[25f]"></a>DRV_TimerInit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drv_timer.o(i.DRV_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DRV_TimerInit &rArr; app_simple_timer_start &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_stop
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_start
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimerIint
</UL>

<P><STRONG><a name="[263]"></a>DRV_Uart_ConfigInit</STRONG> (Thumb, 172 bytes, Stack size 80 bytes, drv_uart.o(i.DRV_Uart_ConfigInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = DRV_Uart_ConfigInit &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
</UL>

<P><STRONG><a name="[265]"></a>DRV_Uart_DeInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_uart.o(i.DRV_Uart_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DRV_Uart_DeInit &rArr; app_uart_close &rArr; nrfx_uarte_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_DeInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
</UL>

<P><STRONG><a name="[268]"></a>DRV_Uart_SleepInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_uart.o(i.DRV_Uart_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DRV_Uart_SleepInit &rArr; DRV_GpioOut0 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_SleepInit
</UL>

<P><STRONG><a name="[269]"></a>DRV_Uart_TxMessage</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, drv_uart.o(i.DRV_Uart_TxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_TxMessage
</UL>

<P><STRONG><a name="[ed]"></a>Encrypto_my_aes</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, encrypto.o(i.Encrypto_my_aes))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Encrypto_my_aes &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_ecb
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_ecb
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyCheckRegId
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleUserDataDecode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleRespondData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
</UL>

<P><STRONG><a name="[1c2]"></a>Encrypto_my_base64</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, encrypto.o(i.Encrypto_my_base64))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = Encrypto_my_base64 &rArr; my_base64_decode &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_base64_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
</UL>

<P><STRONG><a name="[1c7]"></a>Encrypto_my_sha256</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, encrypto.o(i.Encrypto_my_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Encrypto_my_sha256 &rArr; ali_hash_digest &rArr; ali_sha256_digest &rArr; ali_sha256_final &rArr; ls_hal_sha256_finish &rArr; impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_hash_digest
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
</UL>

<P><STRONG><a name="[35f]"></a>FINGER_GetAckCode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, finger.o(i.FINGER_GetAckCode))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_search
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_delete
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_clear_common
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_clear
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_add
</UL>

<P><STRONG><a name="[d9]"></a>FINGER_GetFlowStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finger.o(i.FINGER_GetFlowStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Scan
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
</UL>

<P><STRONG><a name="[cc]"></a>FINGER_GetPowerFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finger.o(i.FINGER_GetPowerFlag))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetPowerFlag
</UL>

<P><STRONG><a name="[db]"></a>FINGER_GetPowerStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, finger.o(i.FINGER_GetPowerStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Scan
</UL>

<P><STRONG><a name="[ce]"></a>FINGER_GetProtocalVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finger.o(i.FINGER_GetProtocalVersion))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetProtocalVersion
</UL>

<P><STRONG><a name="[365]"></a>FINGER_GetSearchID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finger.o(i.FINGER_GetSearchID))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_check_access
</UL>

<P><STRONG><a name="[364]"></a>FINGER_GetSearchScore</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, finger.o(i.FINGER_GetSearchScore))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_check_access
</UL>

<P><STRONG><a name="[da]"></a>FINGER_GetTxRxFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, finger.o(i.FINGER_GetTxRxFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Scan
</UL>

<P><STRONG><a name="[d1]"></a>FINGER_Init</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, finger.o(i.FINGER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinSet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Scan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Operate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_UartSelect
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_status_return_zero
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_WakeUp
</UL>

<P><STRONG><a name="[df]"></a>FINGER_Operate</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, finger.o(i.FINGER_Operate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FINGER_Operate &rArr; finger_pack_start
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_pack_start
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_status_return_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Scan
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
</UL>

<P><STRONG><a name="[271]"></a>FINGER_Poweroff</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, finger.o(i.FINGER_Poweroff))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = FINGER_Poweroff &rArr; DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinSet
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_GetCurDeviceType
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_DeInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_UartSelect
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_pack_stop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Sleep
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
</UL>

<P><STRONG><a name="[d8]"></a>FINGER_Scan</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, finger.o(i.FINGER_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_tx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Scan
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
</UL>

<P><STRONG><a name="[d3]"></a>FINGER_Sleep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, finger.o(i.FINGER_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = FINGER_Sleep &rArr; FINGER_Poweroff &rArr; DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Poweroff
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
</UL>

<P><STRONG><a name="[14e]"></a>FINGER_SleepEx</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, finger.o(i.FINGER_SleepEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = FINGER_SleepEx &rArr; finger_sleep_ex &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
</UL>

<P><STRONG><a name="[d4]"></a>FINGER_WakeUp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, finger.o(i.FINGER_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
</UL>

<P><STRONG><a name="[113]"></a>FINGER_WorkCountDown</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, finger.o(i.FINGER_WorkCountDown))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FINGER_Tim10Ms
</UL>

<P><STRONG><a name="[1f]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 528 bytes, Stack size 72 bytes, nrfx_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[281]"></a>HAL_ADC_BatSupplyPowerSwitch</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_adc.o(i.HAL_ADC_BatSupplyPowerSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_BatSupplyPowerSwitch &rArr; HAL_ADC_BatChargeSwitchCtrl &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetCellBatVolState
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatChargeSwitchCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatErrorHandler
</UL>

<P><STRONG><a name="[284]"></a>HAL_ADC_EnableCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_adc.o(i.HAL_ADC_EnableCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_WakeupInit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_SleepInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_FileInit
</UL>

<P><STRONG><a name="[283]"></a>HAL_ADC_FileInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hal_adc.o(i.HAL_ADC_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_FileInit &rArr; DRV_ADC_FileInit &rArr; DRV_ADC_ConfigInit &rArr; nrfx_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UpBatValLockCtrl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UnderBatValLockCtrl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_FileInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_EnableCtrl
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatVolCaptPinEnCtrl
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatChargeSwitchCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[285]"></a>HAL_ADC_GetAdcVal</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hal_adc.o(i.HAL_ADC_GetAdcVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_GetAdcVal
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_GetAdcVal
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValidVal
</UL>

<P><STRONG><a name="[123]"></a>HAL_ADC_GetCellBatVolState</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, hal_adc.o(i.HAL_ADC_GetCellBatVolState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_GetCellBatVolState &rArr; HAL_ADC_GetValidVal &rArr; HAL_ADC_GetAdcVal
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValidVal
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetVolLowGradeErr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetSysVolLowWarmState
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatSupplyPowerSwitch
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiUploadSwSts
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckBellVideoAction
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BatVolLowErrMenu
</UL>

<P><STRONG><a name="[146]"></a>HAL_ADC_GetSysVolLowWarmState</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_adc.o(i.HAL_ADC_GetSysVolLowWarmState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_GetSysVolLowWarmState &rArr; HAL_ADC_GetCellBatVolState &rArr; HAL_ADC_GetValidVal &rArr; HAL_ADC_GetAdcVal
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetCellBatVolState
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWorkLedStateDisplay
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_ADC_GetValidVal</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, hal_adc.o(i.HAL_ADC_GetValidVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_GetValidVal &rArr; HAL_ADC_GetAdcVal
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_GetVoltage
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetAdcVal
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetVolLowGradeErr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetCellBatVolState
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatErrorHandler
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[14f]"></a>HAL_ADC_GetVolLowGradeErr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, hal_adc.o(i.HAL_ADC_GetVolLowGradeErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_ADC_GetVolLowGradeErr &rArr; HAL_ADC_GetCellBatVolState &rArr; HAL_ADC_GetValidVal &rArr; HAL_ADC_GetAdcVal
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValidVal
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetCellBatVolState
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatErrorHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
</UL>

<P><STRONG><a name="[19d]"></a>HAL_ADC_SampleProcess</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_adc.o(i.HAL_ADC_SampleProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_SampleProcess &rArr; HAL_ADC_SampleTrigger &rArr; DRV_ADC_SampleTrigger &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_SampleTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread10Ms
</UL>

<P><STRONG><a name="[286]"></a>HAL_ADC_SampleTrigger</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_adc.o(i.HAL_ADC_SampleTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_SampleTrigger &rArr; DRV_ADC_SampleTrigger &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_SampleTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_SampleProcess
</UL>

<P><STRONG><a name="[287]"></a>HAL_ADC_SleepInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_adc.o(i.HAL_ADC_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_SleepInit &rArr; DRV_ADC_SleepInit &rArr; DRV_ADC_AdcSourceRelease &rArr; nrfx_saadc_uninit &rArr; nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UpBatValLockCtrl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UnderBatValLockCtrl
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_SleepInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_EnableCtrl
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatVolCaptPinEnCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[141]"></a>HAL_ADC_UnderBatValLockCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_adc.o(i.HAL_ADC_UnderBatValLockCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_WakeupInit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_SleepInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_FileInit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatErrorHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
</UL>

<P><STRONG><a name="[140]"></a>HAL_ADC_UpBatValLockCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_adc.o(i.HAL_ADC_UpBatValLockCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_WakeupInit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_SleepInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_FileInit
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatErrorHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
</UL>

<P><STRONG><a name="[288]"></a>HAL_ADC_WakeupInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_adc.o(i.HAL_ADC_WakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_WakeupInit &rArr; DRV_ADC_FileInit &rArr; DRV_ADC_ConfigInit &rArr; nrfx_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UpBatValLockCtrl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UnderBatValLockCtrl
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_FileInit
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_EnableCtrl
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatVolCaptPinEnCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
</UL>

<P><STRONG><a name="[105]"></a>HAL_EEPROM_ReadBytes</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hal_eeprom.o(i.HAL_EEPROM_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReadFlash
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitFlash
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyCheckRegId
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyReadId
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryPwdByStringFromEeprom
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryByIdFromEeprom
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SearchEmptyPwdEepromAddr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryTmpPwdFromEeprom
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QuerySosPwdFromEeprom
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReadSeting
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReadFixSeting
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_check_access
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write_null
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_read
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_get_registid
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_get_nullnum
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeySearchEmptyReg
</UL>

<P><STRONG><a name="[b9]"></a>HAL_EEPROM_WriteBytes</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hal_eeprom.o(i.HAL_EEPROM_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitFlash
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCfgVersionUpdate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyDeleteClear
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllTmpPwdsFromEeprom
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllSosPwdsFromEeprom
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllPwdMegFromEeprom
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleDelPhone
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyWriteId
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyDeleteId
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveTempPwdsIntoEeprom
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveSosPwdIntoEeprom
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveOnePwdMegIntoEeprom
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ExchangePwdMegIntoEeprom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_DelPwdIdFromEeprom
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryTmpPwdFromEeprom
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteFixSeting
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogClear
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write_null
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_reset_common
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_reset
</UL>

<P><STRONG><a name="[107]"></a>HAL_EXPORT_FileInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hal_export.o(i.HAL_EXPORT_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = HAL_EXPORT_FileInit &rArr; HAL_EXPORT_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_UartSelect
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_FileInit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_FileInit
</UL>

<P><STRONG><a name="[10a]"></a>HAL_EXPORT_PinGet</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, hal_export.o(i.HAL_EXPORT_PinGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinGet
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_ScanPortThread
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetAlrmWarmState
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeupISRhandler
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_SleepInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckStayDetectAction
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[108]"></a>HAL_EXPORT_PinInit</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, hal_export.o(i.HAL_EXPORT_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = HAL_EXPORT_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinPoloInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinDirInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_FileInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_FileInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_FileInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_FileInit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartWakeUp
</UL>

<P><STRONG><a name="[17f]"></a>HAL_EXPORT_PinSet</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, hal_export.o(i.HAL_EXPORT_PinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartRelease
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartWakeUp
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PowerCtrl
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Poweroff
</UL>

<P><STRONG><a name="[10d]"></a>HAL_EXPORT_SleepInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, hal_export.o(i.HAL_EXPORT_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = HAL_EXPORT_SleepInit &rArr; DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioRead
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_UartSelect
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_SleepInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_SleepInit
</UL>

<P><STRONG><a name="[10f]"></a>HAL_EXPORT_WakeupInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_export.o(i.HAL_EXPORT_WakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_EXPORT_WakeupInit &rArr; DRV_NCA9555_WakeupInit &rArr; DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_WakeupInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_WakeupInit
</UL>

<P><STRONG><a name="[129]"></a>HAL_Motor_AutoLockCheck</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_AutoLockCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Motor_AutoLockCheck &rArr; DRV_Motor218_AutoLockCheck &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_AutoLockCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[11a]"></a>HAL_Motor_BurnTestCloseDoorThread</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_BurnTestCloseDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = HAL_Motor_BurnTestCloseDoorThread &rArr; DRV_Motor_CloseDoorThread &rArr; DRV_Motor_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_CloseDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
</UL>

<P><STRONG><a name="[143]"></a>HAL_Motor_CloseDoorThread</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_CloseDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = HAL_Motor_CloseDoorThread &rArr; DRV_Motor_CloseDoorThread &rArr; DRV_Motor_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_CloseDoorThread
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_CloseDoorThread
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
</UL>

<P><STRONG><a name="[12f]"></a>HAL_Motor_DefendActionCheck</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hal_motor.o(i.HAL_Motor_DefendActionCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Motor_DefendActionCheck &rArr; DRV_Motor218_DefendActionCheck &rArr; DRV_Motor218_GetSensorState
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_DefendActionCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[12c]"></a>HAL_Motor_FalseLockWarmCheck</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_FalseLockWarmCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Motor_FalseLockWarmCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_FalseLockWarmCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[28a]"></a>HAL_Motor_FileInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_Motor_FileInit &rArr; DRV_Motor218_FileInit &rArr; DRV_Motor218_PinInterruptEnable &rArr; DRV_GpioInterruptEnable &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_FileInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[142]"></a>HAL_Motor_ForceCloseDoorThread</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_ForceCloseDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = HAL_Motor_ForceCloseDoorThread &rArr; DRV_Motor_CloseDoorThread &rArr; DRV_Motor_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_CloseDoorThread
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceCloseDoorThread
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
</UL>

<P><STRONG><a name="[119]"></a>HAL_Motor_ForceOpenDoorThread</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_ForceOpenDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = HAL_Motor_ForceOpenDoorThread &rArr; DRV_Motor_OpenDoorThread &rArr; DRV_Motor_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
</UL>

<P><STRONG><a name="[12e]"></a>HAL_Motor_ForgetLockWarmCheck</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_ForgetLockWarmCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Motor_ForgetLockWarmCheck &rArr; DRV_Motor218_ForgetLockWarmCheck &rArr; DRV_Motor218_GetSensorState
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForgetLockWarmCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[167]"></a>HAL_Motor_GetFalseLockWarmState</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_GetFalseLockWarmState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Motor_GetFalseLockWarmState
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetFalseLockWarmState
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
</UL>

<P><STRONG><a name="[166]"></a>HAL_Motor_GetForgetLockWarmState</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_GetForgetLockWarmState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Motor_GetForgetLockWarmState
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetForgetLockWarmState
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
</UL>

<P><STRONG><a name="[168]"></a>HAL_Motor_GetHandleTryForbitWarmState</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_GetHandleTryForbitWarmState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Motor_GetHandleTryForbitWarmState
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetHandleTryForbitWarmState
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
</UL>

<P><STRONG><a name="[12d]"></a>HAL_Motor_HandleTryForbitWarmCheck</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_HandleTryForbitWarmCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Motor_HandleTryForbitWarmCheck &rArr; DRV_Motor218_HandleTryForbitWarmCheck &rArr; DRV_Motor218_GetSensorState
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_HandleTryForbitWarmCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[15f]"></a>HAL_Motor_OpenDoorThread</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_OpenDoorThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = HAL_Motor_OpenDoorThread &rArr; DRV_Motor_OpenDoorThread &rArr; DRV_Motor_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OpenDoorThread
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
</UL>

<P><STRONG><a name="[14c]"></a>HAL_Motor_ReleaseTryProtectCheck</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_ReleaseTryProtectCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Motor_ReleaseTryProtectCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ReleaseTryProtectCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
</UL>

<P><STRONG><a name="[28f]"></a>HAL_Motor_SleepInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Motor_SleepInit
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_SleepInit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[165]"></a>HAL_Motor_Tim1000Ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_Tim1000Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Motor_Tim1000Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_Tim1000Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[292]"></a>HAL_Motor_Tim10Ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_Tim10Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Motor_Tim10Ms
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_Tim10Ms
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_Tim10Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[295]"></a>HAL_Motor_WakeupInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_motor.o(i.HAL_Motor_WakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_Motor_WakeupInit &rArr; DRV_Motor218_WakeupInit &rArr; DRV_Motor218_FileInit &rArr; DRV_Motor218_PinInterruptEnable &rArr; DRV_GpioInterruptEnable &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_WakeupInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
</UL>

<P><STRONG><a name="[296]"></a>HAL_RTC_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_WriteTime &rArr; DRV_BM8563_WriteTime &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WriteTime
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BM8563_ShutDowFlag
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BM8563_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_RTC_ReadTime</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, hal_rtc.o(i.HAL_RTC_ReadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_RTC_ReadTime &rArr; HAL_RTC_WriteTime &rArr; DRV_BM8563_WriteTime &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WriteTime
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Bcd2Bin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TmToTime
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BM8563_ReadTime
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BM8563_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[2fa]"></a>HAL_RTC_Systick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_rtc.o(i.HAL_RTC_Systick))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLifeTickTimerHandler
</UL>

<P><STRONG><a name="[297]"></a>HAL_RTC_TimeIsTimesize</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, hal_rtc.o(i.HAL_RTC_TimeIsTimesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_RTC_TimeIsTimesize &rArr; RTC_mktime_is_timesize &rArr; HAL_RTC_TmToTime &rArr; RTC_mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Bcd2Bin
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_mktime_is_timesize
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_check_access
</UL>

<P><STRONG><a name="[182]"></a>HAL_RTC_TimeToTm</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, hal_rtc.o(i.HAL_RTC_TimeToTm))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_TimeToTm &rArr; rtc_month_days
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_month_days
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_CheckTimeliness
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeUpdate
</UL>

<P><STRONG><a name="[134]"></a>HAL_RTC_TmToTime</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, hal_rtc.o(i.HAL_RTC_TmToTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RTC_TmToTime &rArr; RTC_mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Bcd2Bin
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_ReadTime
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WriteTime
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_CheckTimeliness
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_mktime_is_timesize
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_RTC_WriteTime</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, hal_rtc.o(i.HAL_RTC_WriteTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_RTC_WriteTime &rArr; DRV_BM8563_WriteTime &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Bcd2Bin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TmToTime
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BM8563_WriteTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_ReadTime
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_Touch_FileInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_touch.o(i.HAL_Touch_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HAL_Touch_FileInit &rArr; DRV_GT316L_FileInit &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_FileInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_WakeupInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FileInit
</UL>

<P><STRONG><a name="[177]"></a>HAL_Touch_GetIICBusState</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_touch.o(i.HAL_Touch_GetIICBusState))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_Touch_GetIICBusState &rArr; DRV_GT316L_GetIICBusState &rArr; DRV_GT316L_ReadBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_GetIICBusState
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_KeyCapture
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_Touch_GetKeyValue</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hal_touch.o(i.HAL_Touch_GetKeyValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HAL_Touch_GetKeyValue &rArr; DRV_GT316L_GetKeyValue &rArr; DRV_GT316L_ReadBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_GetKeyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_MainProcess
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
</UL>

<P><STRONG><a name="[17d]"></a>HAL_Touch_PwmOutputCtrl</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, hal_touch.o(i.HAL_Touch_PwmOutputCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_Touch_PwmOutputCtrl &rArr; DRV_GT316L_PwmOutputCtrl &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_PwmOutputCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_BreathThread
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_Touch_SleepInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_touch.o(i.HAL_Touch_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = HAL_Touch_SleepInit &rArr; DRV_GT316L_SleepInit &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_SleepInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_SleepInit
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_Uart_ConfigInit</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, hal_uart.o(i.HAL_Uart_ConfigInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = HAL_Uart_ConfigInit &rArr; DRV_Uart_ConfigInit &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_GetCurDeviceType
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_DeInit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_ConfigInit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_SetCurDeviceType
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_GetComCurNo
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PowerOn
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_PirWakeUpTest
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartWakeUp
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_Uart_DeInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hal_uart.o(i.HAL_Uart_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_Uart_DeInit &rArr; DRV_Uart_DeInit &rArr; app_uart_close &rArr; nrfx_uarte_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_flush
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_DeInit
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_SetCurDeviceType
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_GetComCurNo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PowerOff
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartRelease
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Poweroff
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_Uart_GetCurDeviceType</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, hal_uart.o(i.HAL_Uart_GetCurDeviceType))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_PowerOff
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ServerScan
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ReadFifoData
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx_handler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Poweroff
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_Uart_PopByteFromQueue</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hal_uart.o(i.HAL_Uart_PopByteFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Uart_PopByteFromQueue &rArr; app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ReadFifoData
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx_handler
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_Uart_SleepInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hal_uart.o(i.HAL_Uart_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_Uart_SleepInit &rArr; DRV_Uart_SleepInit &rArr; DRV_GpioOut0 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_SleepInit
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_Uart_TxMessage</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hal_uart.o(i.HAL_Uart_TxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_TxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Wifi_TxMessage
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommand
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_tx
</UL>

<P><STRONG><a name="[125]"></a>HAL_Voice_BellCtrl</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_BellCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_Voice_BellCtrl &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellThread
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WakeupInit
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_SleepInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_FileInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[19c]"></a>HAL_Voice_BellThread</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_BellThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_Voice_BellThread &rArr; HAL_Voice_BellCtrl &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Thread100Ms
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_Voice_FileInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_FileInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = HAL_Voice_FileInit &rArr; HAL_EXPORT_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WorkModeCtrl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellCtrl
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_FileInit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PowerCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[fc]"></a>HAL_Voice_GetBusyState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_voice.o(i.HAL_Voice_GetBusyState))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetVolGradeMenu
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetStayCheckMenu
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetNearSenseMenu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorTorsionMenu
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorDirMenu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetFingerMenu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDoubleCheckMenu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDeployMenu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetAutoLockMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BatVolLowErrMenu
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[19f]"></a>HAL_Voice_PlayVoiceThread</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, hal_voice.o(i.HAL_Voice_PlayVoiceThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = HAL_Voice_PlayVoiceThread &rArr; HAL_Voice_PlayVoiceNum &rArr; DRV_AM5BA340_PlayVoice &rArr; DRV_AM5BA340_SendBytes &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PopQueue
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayVoiceNum
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetQueueState
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_ThreadRealTime
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
</UL>

<P><STRONG><a name="[fa]"></a>HAL_Voice_PlayingVoice</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_voice.o(i.HAL_Voice_PlayingVoice))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = HAL_Voice_PlayingVoice &rArr; HAL_Voice_PlayVoiceThread &rArr; HAL_Voice_PlayVoiceNum &rArr; DRV_AM5BA340_PlayVoice &rArr; DRV_AM5BA340_SendBytes &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayVoiceThread
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PushQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_MainProcess
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_report
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_PirWakeUpTest
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SystemManageMenu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayWarmMenu
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetVolGradeMenu
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysParaMenu
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetStayCheckMenu
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetNearSenseMenu
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorTorsionMenu
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorDirMenu
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetFingerMenu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDoubleCheckMenu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDeployMenu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetAutoLockMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ErrorCheckMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellVideoMenu
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BatVolLowErrMenu
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AginTestMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[2a2]"></a>HAL_Voice_PowerCtrl</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_PowerCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = HAL_Voice_PowerCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WakeupInit
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_SleepInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_FileInit
</UL>

<P><STRONG><a name="[2a7]"></a>HAL_Voice_SleepInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_SleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = HAL_Voice_SleepInit &rArr; HAL_Voice_PowerCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WorkModeCtrl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellCtrl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_SleepInit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PowerCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[303]"></a>HAL_Voice_Time10Ms</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hal_voice.o(i.HAL_Voice_Time10Ms))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_Voice_VolumeSet</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_VolumeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = HAL_Voice_VolumeSet &rArr; DRV_AM5BA340_VolumeSet &rArr; DRV_AM5BA340_PlayVoice &rArr; DRV_AM5BA340_SendBytes &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_VolumeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuProcess
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayWarmMenu
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetVolGradeMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BatVolLowErrMenu
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[2a8]"></a>HAL_Voice_WakeupInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_WakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = HAL_Voice_WakeupInit &rArr; HAL_Voice_PowerCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellCtrl
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_FileInit
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PowerCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
</UL>

<P><STRONG><a name="[11c]"></a>HAL_Voice_WorkModeCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_voice.o(i.HAL_Voice_WorkModeCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_SleepInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_FileInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CloseDoorMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[158]"></a>HAL_Voice_WorkModeGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_voice.o(i.HAL_Voice_WorkModeGet))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
</UL>

<P><STRONG><a name="[2b2]"></a>Id2Tim_CheckTimeOut_ms</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, se_timer.o(i.Id2Tim_CheckTimeOut_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Id2Tim_CheckTimeOut_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2Tim_StopSeTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_transceive
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_get_atr
</UL>

<P><STRONG><a name="[2b4]"></a>Id2Tim_InitTimeOut_ms</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, se_timer.o(i.Id2Tim_InitTimeOut_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Id2Tim_InitTimeOut_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2Tim_StartSeTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_transceive
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_get_atr
</UL>

<P><STRONG><a name="[30d]"></a>Id2Tim_SeTimer_s</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, se_timer.o(i.Id2Tim_SeTimer_s))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
</UL>

<P><STRONG><a name="[2b5]"></a>Id2Tim_StartSeTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, se_timer.o(i.Id2Tim_StartSeTimer))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2Tim_InitTimeOut_ms
</UL>

<P><STRONG><a name="[2b3]"></a>Id2Tim_StopSeTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, se_timer.o(i.Id2Tim_StopSeTimer))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2Tim_CheckTimeOut_ms
</UL>

<P><STRONG><a name="[2b6]"></a>Id2_SeDelayms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, se_timer.o(i.Id2_SeDelayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Id2_SeDelayms &rArr; PUBLIC_Delayms &rArr; DRV_InterDelayus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_transceive
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_send_frame
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_recv_frame
</UL>

<P><STRONG><a name="[2b7]"></a>Id2_SeDelayus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, se_timer.o(i.Id2_SeDelayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Id2_SeDelayus &rArr; PUBLIC_Delayus &rArr; DRV_InterDelayus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_stop
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_start
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_send_char
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_send_addr
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_recv_char
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_write_byte
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_wait_ack
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_send_noack
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_send_ack
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_restart
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_read_byte
</UL>

<P><STRONG><a name="[18a]"></a>Math_Bcd2Bin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, public.o(i.Math_Bcd2Bin))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_ReadTime
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WriteTime
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TmToTime
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_CreateTempPwds
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeIsTimesize
</UL>

<P><STRONG><a name="[2c3]"></a>Math_Bin2Bcd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, public.o(i.Math_Bin2Bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Math_Bin2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeUpdate
</UL>

<P><STRONG><a name="[2b8]"></a>Math_Bytes2String</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, public.o(i.Math_Bytes2String))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Math_Bytes2String &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
</UL>

<P><STRONG><a name="[19]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, nrfx_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>PUBLIC_ChangeDecToString</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, public.o(i.PUBLIC_ChangeDecToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PUBLIC_ChangeDecToString
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleDeviceRegThread
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
</UL>

<P><STRONG><a name="[e4]"></a>PUBLIC_Delayms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, public.o(i.PUBLIC_Delayms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PUBLIC_Delayms &rArr; DRV_InterDelayus
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterDelayus
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_ReadTime
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HFClock_Request
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTim10MsTick_Handler
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ID2Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_report
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_SleepInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_sleep_ex
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Poweroff
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_WriteBytes
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_SendBytes
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayms
</UL>

<P><STRONG><a name="[1e8]"></a>PUBLIC_Delayus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, public.o(i.PUBLIC_Delayus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PUBLIC_Delayus &rArr; DRV_InterDelayus
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterDelayus
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_SendBytes
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
</UL>

<P><STRONG><a name="[1b6]"></a>PUBLIC_GenerateRandVec</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, public.o(i.PUBLIC_GenerateRandVec))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PUBLIC_GenerateRandVec &rArr; DRV_InterGenerateRandVec &rArr; nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterGenerateRandVec
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_tx
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_get_random
</UL>

<P><STRONG><a name="[1ab]"></a>PUBLIC_GetMacAdd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, public.o(i.PUBLIC_GetMacAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PUBLIC_GetMacAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterGetMacAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemAppBleInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[eb]"></a>PUBLIC_PrintHex</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, public.o(i.PUBLIC_PrintHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PUBLIC_PrintHex &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_tx_event_handle
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyCheckRegId
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleRespondData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommand
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ReadFifoData
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[2be]"></a>PlatformLoopExecute</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, platformfunc.o(i.PlatformLoopExecute))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = PlatformLoopExecute &rArr; App_Scheduler_Process &rArr; App_Scheduler_ThreadRealTime &rArr; App_GUI_MenuProcess &rArr; SystemSelfCheck &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bf]"></a>PlatformSystemInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, platformfunc.o(i.PlatformSystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = PlatformSystemInit &rArr; SystemConfigInit &rArr; APP_FINGER_Init &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>RNG_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfx_rng.o(i.RNG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RNG_IRQHandler &rArr; nrf_rng_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rng_event_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>RTC_TimeUpdate</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, hal_rtc.o(i.RTC_TimeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_TimeUpdate &rArr; HAL_RTC_TimeToTm &rArr; rtc_month_days
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeToTm
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Bin2Bcd
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_CreateTempPwds
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
</UL>

<P><STRONG><a name="[2c4]"></a>RTC_daytime_is_timesize</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, hal_rtc.o(i.RTC_daytime_is_timesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_daytime_is_timesize
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_mktime_is_timesize
</UL>

<P><STRONG><a name="[298]"></a>RTC_mktime_is_timesize</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, hal_rtc.o(i.RTC_mktime_is_timesize))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_mktime_is_timesize &rArr; HAL_RTC_TmToTime &rArr; RTC_mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TmToTime
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_daytime_is_timesize
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeIsTimesize
</UL>

<P><STRONG><a name="[20]"></a>SAADC_IRQHandler</STRONG> (Thumb, 456 bytes, Stack size 32 bytes, nrfx_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c9]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[2cc]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[2d1]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, segger_rtt_printf.o(i.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2d2]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 522 bytes, Stack size 136 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[2d]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e1]"></a>SmartKeyDeleteClear</STRONG> (Thumb, 44 bytes, Stack size 80 bytes, app_smartkey.o(i.SmartKeyDeleteClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SmartKeyDeleteClear &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
</UL>

<P><STRONG><a name="[1b8]"></a>SmartKeyDeleteId</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, app_smartkey.o(i.SmartKeyDeleteId))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = SmartKeyDeleteId &rArr; SmartkeyCheckRegId &rArr; Encrypto_my_aes &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyCheckRegId
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyPageidAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[1ba]"></a>SmartKeyReadId</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, app_smartkey.o(i.SmartKeyReadId))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SmartKeyReadId &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyPageidAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[1b7]"></a>SmartKeyWriteId</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, app_smartkey.o(i.SmartKeyWriteId))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = SmartKeyWriteId &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeySearchEmptyReg
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyPageidAddr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[1b9]"></a>SmartkeyCheckRegId</STRONG> (Thumb, 312 bytes, Stack size 72 bytes, app_smartkey.o(i.SmartkeyCheckRegId))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SmartkeyCheckRegId &rArr; Encrypto_my_aes &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_PrintHex
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_aes
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyPageidAddr
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyDeleteId
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[14d]"></a>SystemAppBleInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, app_ble.o(i.SystemAppBleInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SystemAppBleInit &rArr; APP_BleInit &rArr; DRV_BleInit &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_GetMacAdd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
</UL>

<P><STRONG><a name="[2e4]"></a>SystemCfgVersionUpdate</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, system.o(i.SystemCfgVersionUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = SystemCfgVersionUpdate &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetProtocalVersion
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetPowerFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
</UL>

<P><STRONG><a name="[2c0]"></a>SystemConfigInit</STRONG> (Thumb, 342 bytes, Stack size 8 bytes, systeminit.o(i.SystemConfigInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = SystemConfigInit &rArr; APP_FINGER_Init &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemAppBleInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_FileInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_ReadTime
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_FileInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_FileInit
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterRandVecInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioDefault
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FileInit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_FileInit
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_FileInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HumanSensorFileInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSystemWorkSts
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FileInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_FileInit
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_WakeUp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWorkBusClkInit
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSdkRTTLogInit
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemManagerModelInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemParaFromFlash
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimerIint
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLifeTickTimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformSystemInit
</UL>

<P><STRONG><a name="[2f7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1bd]"></a>SystemEventLogClear</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, system.o(i.SystemEventLogClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = SystemEventLogClear &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteFixSeting
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[103]"></a>SystemEventLogSave</STRONG> (Thumb, 696 bytes, Stack size 40 bytes, system.o(i.SystemEventLogSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = SystemEventLogSave &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeUpdate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteFixSeting
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckButtonStateHandler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleFingerCasePro
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoAppModelMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DelFingerMenu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddGuestFingerMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[3f]"></a>SystemInit</STRONG> (Thumb, 574 bytes, Stack size 8 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_57
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_37
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_32
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_31
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_182
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_16
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_136
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_12
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_108
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[2f8]"></a>SystemInitFlash</STRONG> (Thumb, 400 bytes, Stack size 288 bytes, system.o(i.SystemInitFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = SystemInitFlash &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
</UL>

<P><STRONG><a name="[2f9]"></a>SystemLifeTickTimerCtrl</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, systemtim.o(i.SystemLifeTickTimerCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SystemLifeTickTimerCtrl &rArr; DRV_LifeTickTimerCtrl &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LifeTickTimerCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[2e6]"></a>SystemLifeTickTimerInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, systemtim.o(i.SystemLifeTickTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemLifeTickTimerInit &rArr; DRV_LifeTickTimerInit &rArr; app_timer_init &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LifeTickTimerInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[f8]"></a>SystemParaBackFactoryIntoFlash</STRONG> (Thumb, 370 bytes, Stack size 136 bytes, systeminit.o(i.SystemParaBackFactoryIntoFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = SystemParaBackFactoryIntoFlash &rArr; SystemInitFlash &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitFlash
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCfgVersionUpdate
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyDeleteClear
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_GetServerState
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ClearCameraData
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllTmpPwdsFromEeprom
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllSosPwdsFromEeprom
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllPwdMegFromEeprom
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetFlowResult
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleDelPhone
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BackFactoryMenu
</UL>

<P><STRONG><a name="[1be]"></a>SystemReadFixSeting</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, system.o(i.SystemReadFixSeting))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = SystemReadFixSeting &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
</UL>

<P><STRONG><a name="[27f]"></a>SystemReadFlash</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, system.o(i.SystemReadFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = SystemReadFlash &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemParaFromFlash
</UL>

<P><STRONG><a name="[242]"></a>SystemReadSeting</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, system.o(i.SystemReadSeting))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = SystemReadSeting &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
</UL>

<P><STRONG><a name="[15b]"></a>SystemSelfCheck</STRONG> (Thumb, 370 bytes, Stack size 128 bytes, systeminit.o(i.SystemSelfCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = SystemSelfCheck &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_GetKeyValue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysWakeupType
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetDoubleCheckSwSts
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWorkLedStateDisplay
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWaitSteady
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckTryProtectHandler
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckProNormalHandler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckProBreakHandler
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckEepromErrHandler
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckButtonStateHandler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatVolWarmHandler
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckBatErrorHandler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckAlarmButtonHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuProcess
</UL>

<P><STRONG><a name="[2fc]"></a>SystemSleepBusClkInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, systeminit.o(i.SystemSleepBusClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemSleepBusClkInit &rArr; DRV_HFClock_Release &rArr; nrf_drv_clock_hfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HFClock_Release
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[151]"></a>SystemSleepInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, systeminit.o(i.SystemSleepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SystemSleepInit &rArr; APP_FINGER_Sleep &rArr; app_finger_reset_flag &rArr; FINGER_Sleep &rArr; FINGER_Poweroff &rArr; DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupPin_ISR_Enable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCfgVersionUpdate
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_SleepInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_SleepInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_SleepInit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_SleepInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_SleepInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_SleepInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_SleepInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SleepInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_SleepInit
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Wifi_Sleep
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Sleep
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ID2HWSleep
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepBusClkInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimerIint
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLifeTickTimerCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
</UL>

<P><STRONG><a name="[2e8]"></a>SystemTimerIint</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, systemtim.o(i.SystemTimerIint))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemTimerIint &rArr; DRV_TimerInit &rArr; app_simple_timer_start &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[121]"></a>SystemWakeupInit</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, systeminit.o(i.SystemWakeupInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SystemWakeupInit &rArr; GetSystemParaFromFlash &rArr; SystemReadFlash &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupPin_ISR_Disable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_GetMacAdd
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WakeupInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_ReadTime
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_WakeupInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_WakeupInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_WakeupInit
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_WakeupInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_WakeupInit
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HumanSensorWakeupInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeupInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSystemWorkSts
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_WakeupInit
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_WakeUp
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWorkBusClkInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSystemParaFromFlash
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemTimerIint
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLifeTickTimerCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[30e]"></a>SystemWakeupPin_ISR_Disable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, isr.o(i.SystemWakeupPin_ISR_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemWakeupPin_ISR_Disable &rArr; DRV_GpioInterruptDisable &rArr; nrfx_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
</UL>

<P><STRONG><a name="[2ff]"></a>SystemWakeupPin_ISR_Enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, isr.o(i.SystemWakeupPin_ISR_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SystemWakeupPin_ISR_Enable &rArr; DRV_GpioInterruptEnable &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
</UL>

<P><STRONG><a name="[2e7]"></a>SystemWorkBusClkInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, systeminit.o(i.SystemWorkBusClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SystemWorkBusClkInit &rArr; DRV_HFClock_Request &rArr; nrf_drv_clock_hfclk_request &rArr; hfclk_start &rArr; nrfx_clock_hfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HFClock_Request
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[163]"></a>SystemWriteFixSeting</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, system.o(i.SystemWriteFixSeting))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogClear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorTorsionMenu
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetMotorDirMenu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetAutoLockMenu
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_GetTurnDirFromFlash
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_GetTurnDirFromFlash
</UL>

<P><STRONG><a name="[101]"></a>SystemWriteSeting</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, system.o(i.SystemWriteSeting))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReadFlash
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllPwdMegFromEeprom
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckTryProtectHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyWriteId
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyDeleteId
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEParse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveOnePwdMegIntoEeprom
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_DelPwdIdFromEeprom
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write_null
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_reset_common
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_reset
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_tx
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetVolGradeMenu
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetStayCheckMenu
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetRegisterSts
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetNearSenseMenu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDoubleCheckMenu
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetDeployMenu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetAutoLockMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheck
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
</UL>

<P><STRONG><a name="[22]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER1_IRQHandler &rArr; irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrfx_prs.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTE0_UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>WIFI_PowerOff</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_wifi.o(i.WIFI_PowerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = WIFI_PowerOff &rArr; HAL_Uart_DeInit &rArr; DRV_Uart_DeInit &rArr; app_uart_close &rArr; nrfx_uarte_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_GetCurDeviceType
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_ConfigThread
</UL>

<P><STRONG><a name="[1af]"></a>WIFI_PowerOn</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, app_wifi.o(i.WIFI_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = WIFI_PowerOn &rArr; HAL_Uart_ConfigInit &rArr; DRV_Uart_ConfigInit &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_ConfigThread
</UL>

<P><STRONG><a name="[1ae]"></a>WIFI_UploadDataFill</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, app_wifi.o(i.WIFI_UploadDataFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WIFI_UploadDataFill &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UploadDataGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
</UL>

<P><STRONG><a name="[311]"></a>WIFI_UploadDataGetLength</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_wifi.o(i.WIFI_UploadDataGetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WIFI_UploadDataGetLength
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UploadDataClear
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UploadDataFill
</UL>

<P><STRONG><a name="[44]"></a>WakeupISRhandler</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, isr.o(i.WakeupISRhandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = WakeupISRhandler &rArr; App_Export_GetAlrmWarmState &rArr; HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysWakeupType
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetAlrmWarmState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinSenseHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayDetectSts
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysSleepSts
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysSleepSts
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetNearSenseUnworkCurTim
</UL>
<BR>[Address Reference Count : 2]<UL><LI> isr.o(i.SystemWakeupPin_ISR_Enable)
<LI> drv_motor_218.o(i.DRV_Motor218_PinInterruptEnable)
</UL>
<P><STRONG><a name="[314]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4af]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[4b0]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[4b1]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[226]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>

<P><STRONG><a name="[316]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b2]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4b3]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[4b4]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[406]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_snprintf
</UL>

<P><STRONG><a name="[4b5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4b6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4b7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[32b]"></a>a7_i2c_read_byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, se_driver.o(i.a7_i2c_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = a7_i2c_read_byte &rArr; DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioRead
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOutPP
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullup
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_recv_char
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_recv_frame
</UL>

<P><STRONG><a name="[32c]"></a>a7_i2c_restart</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, se_driver.o(i.a7_i2c_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = a7_i2c_restart &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_init
</UL>

<P><STRONG><a name="[32d]"></a>a7_i2c_send_ack</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, se_driver.o(i.a7_i2c_send_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = a7_i2c_send_ack &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_recv_char
</UL>

<P><STRONG><a name="[32e]"></a>a7_i2c_send_noack</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, se_driver.o(i.a7_i2c_send_noack))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = a7_i2c_send_noack &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_recv_frame
</UL>

<P><STRONG><a name="[32f]"></a>a7_i2c_wait_ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, se_driver.o(i.a7_i2c_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = a7_i2c_wait_ack &rArr; DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioRead
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOutPP
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullup
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_send_char
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_send_addr
</UL>

<P><STRONG><a name="[330]"></a>a7_i2c_write_byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, se_driver.o(i.a7_i2c_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = a7_i2c_write_byte &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_send_char
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_send_addr
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_init
</UL>

<P><STRONG><a name="[337]"></a>aes_add_round_key</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, rijndael.o(i.aes_add_round_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[335]"></a>aes_decrypt</STRONG> (Thumb, 188 bytes, Stack size 288 bytes, rijndael.o(i.aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = aes_decrypt &rArr; inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_add_round_key
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sub_bytes
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_shift_rows
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_columns
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key_expansion
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_ecb
</UL>

<P><STRONG><a name="[26c]"></a>aes_decrypt_ecb</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rijndael.o(i.aes_decrypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = aes_decrypt_ecb &rArr; aes_decrypt &rArr; inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_aes
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx
</UL>

<P><STRONG><a name="[33b]"></a>aes_encrypt</STRONG> (Thumb, 190 bytes, Stack size 288 bytes, rijndael.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_bytes
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_shift_rows
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mix_columns
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_add_round_key
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key_expansion
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_ecb
</UL>

<P><STRONG><a name="[26b]"></a>aes_encrypt_ecb</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rijndael.o(i.aes_encrypt_ecb))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_aes
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_tx
</UL>

<P><STRONG><a name="[33e]"></a>aes_mix_columns</STRONG> (Thumb, 124 bytes, Stack size 44 bytes, rijndael.o(i.aes_mix_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[342]"></a>aes_mul</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rijndael.o(i.aes_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_xtimes
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mix_columns
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_mix_columns
</UL>

<P><STRONG><a name="[33f]"></a>aes_rot_dword</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rijndael.o(i.aes_rot_dword))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key_expansion
</UL>

<P><STRONG><a name="[33d]"></a>aes_shift_rows</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, rijndael.o(i.aes_shift_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aes_shift_rows
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[33c]"></a>aes_sub_bytes</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, rijndael.o(i.aes_sub_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = aes_sub_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_sbox
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[340]"></a>aes_sub_dword</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, rijndael.o(i.aes_sub_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = aes_sub_dword
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_sbox
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key_expansion
</UL>

<P><STRONG><a name="[344]"></a>aes_sub_sbox</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rijndael.o(i.aes_sub_sbox))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_dword
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_bytes
</UL>

<P><STRONG><a name="[341]"></a>aes_swap_dword</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rijndael.o(i.aes_swap_dword))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_key_expansion
</UL>

<P><STRONG><a name="[345]"></a>aes_xtime</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rijndael.o(i.aes_xtime))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_xtimes
</UL>

<P><STRONG><a name="[343]"></a>aes_xtimes</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, rijndael.o(i.aes_xtimes))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mul
</UL>

<P><STRONG><a name="[26e]"></a>ali_hash_digest</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, api_hash.o(i.ali_hash_digest))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ali_hash_digest &rArr; ali_sha256_digest &rArr; ali_sha256_final &rArr; ls_hal_sha256_finish &rArr; impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_digest
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_sha256
</UL>

<P><STRONG><a name="[346]"></a>ali_sha256_digest</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, api_hash.o(i.ali_sha256_digest))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ali_sha256_digest &rArr; ali_sha256_final &rArr; ls_hal_sha256_finish &rArr; impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_malloc
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_update
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_get_ctx_size
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_final
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_hash_digest
</UL>

<P><STRONG><a name="[34a]"></a>ali_sha256_final</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, api_hash.o(i.ali_sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ali_sha256_final &rArr; ls_hal_sha256_finish &rArr; impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_finish
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trans_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_digest
</UL>

<P><STRONG><a name="[347]"></a>ali_sha256_get_ctx_size</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api_hash.o(i.ali_sha256_get_ctx_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ali_sha256_get_ctx_size &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_digest
</UL>

<P><STRONG><a name="[348]"></a>ali_sha256_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, api_hash.o(i.ali_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ali_sha256_init &rArr; ls_hal_sha256_init &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_get_size
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trans_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_digest
</UL>

<P><STRONG><a name="[349]"></a>ali_sha256_update</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, api_hash.o(i.ali_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ali_sha256_update &rArr; ls_hal_sha256_update &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_update
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_trans_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_digest
</UL>

<P><STRONG><a name="[57]"></a>app_error_fault_handler</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[1dc]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SysMgmt_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterRandVecInit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_TimerInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LifeTickTimerInit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LifeTickTimerCtrl
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_tx_event_handle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInterruptEnable
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterGenerateRandVec
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_ConfigInit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_SampleTrigger
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_qwr_error_handler
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_ConfigInit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_CaptureIRQ
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_start
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi_interrupt_priority_workaround
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
</UL>

<P><STRONG><a name="[29e]"></a>app_fifo_flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_flush))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_DeInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1c0]"></a>app_fifo_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_GetFifoData
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_PopByteFromQueue
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[1f9]"></a>app_fifo_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_module_update_figo_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_FifoInit
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[29f]"></a>app_fifo_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_module_update_data_rec
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_PushByteIntoQueue1
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_PushByteIntoQueue0
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[260]"></a>app_simple_timer_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_simple_timer.o(i.app_simple_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_simple_timer_init &rArr; nrfx_timer_init &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_TimerInit
</UL>

<P><STRONG><a name="[261]"></a>app_simple_timer_start</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, app_simple_timer.o(i.app_simple_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = app_simple_timer_start &rArr; nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_stop
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_resume
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_TimerInit
</UL>

<P><STRONG><a name="[262]"></a>app_simple_timer_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_simple_timer.o(i.app_simple_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_simple_timer_stop &rArr; nrfx_timer_pause
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_TimerInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_start
</UL>

<P><STRONG><a name="[22e]"></a>app_timer_create</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LifeTickTimerInit
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[22d]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LifeTickTimerInit
</UL>

<P><STRONG><a name="[22a]"></a>app_timer_start</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LifeTickTimerCtrl
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[22b]"></a>app_timer_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LifeTickTimerCtrl
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[266]"></a>app_uart_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = app_uart_close &rArr; nrfx_uarte_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_DeInit
</UL>

<P><STRONG><a name="[267]"></a>app_uart_get</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, app_uart_fifo.o(i.app_uart_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_uart_get &rArr; nrf_drv_uart_rx &rArr; nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_EventHandle
</UL>

<P><STRONG><a name="[264]"></a>app_uart_init</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_ConfigInit
</UL>

<P><STRONG><a name="[26a]"></a>app_uart_put</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Uart_TxMessage
</UL>

<P><STRONG><a name="[2cb]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[2cd]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[38c]"></a>blcm_link_ctx_get</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ble_link_ctx_manager.o(i.blcm_link_ctx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>

<P><STRONG><a name="[38e]"></a>ble_advdata_encode</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[397]"></a>ble_advdata_parse</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_advdata_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>

<P><STRONG><a name="[398]"></a>ble_advdata_search</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, ble_advdata.o(i.ble_advdata_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ble_advdata_search
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>

<P><STRONG><a name="[334]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_conn_cfg_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[333]"></a>ble_advertising_init</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_is_valid
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[95]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ble_advertising_on_ble_evt &rArr; on_terminated &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[9e]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[1f8]"></a>ble_advertising_start</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed_high_duty
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_is_valid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
</UL>

<P><STRONG><a name="[3a3]"></a>ble_conn_params_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[38d]"></a>ble_conn_state_conn_idx</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>

<P><STRONG><a name="[3a4]"></a>ble_conn_state_valid</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_idx
</UL>

<P><STRONG><a name="[3b2]"></a>ble_nus_data_send</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, ble_nus.o(i.ble_nus_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_tx_event_handle
</UL>

<P><STRONG><a name="[3b3]"></a>ble_nus_init</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[98]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_nus_on_ble_evt &rArr; on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hvx_tx_complete
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[3b9]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[ee]"></a>ble_tx_event_handle</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, drv_ble.o(i.ble_tx_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_tx_event_handle &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_PrintHex
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_data_send
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppBleRespondData
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_module_update_data_rec
</UL>

<P><STRONG><a name="[351]"></a>chip_log_hex_dump</STRONG> (Thumb, 168 bytes, Stack size 104 bytes, chip_log.o(i.chip_log_hex_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_snprintf
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
</UL>

<P><STRONG><a name="[3c7]"></a>conn_handle_list_get</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, ble_conn_state.o(i.conn_handle_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_get
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[3d0]"></a>finger_my_printf</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, finger.o(i.finger_my_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = finger_my_printf &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_tx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx
</UL>

<P><STRONG><a name="[26f]"></a>finger_status_return_zero</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, finger.o(i.finger_status_return_zero))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Operate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_pack_stop
</UL>

<P><STRONG><a name="[b]"></a>fm_i2c_close_device</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, se_driver.o(i.fm_i2c_close_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fm_i2c_close_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>fm_i2c_dev_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, se_driver.o(i.fm_i2c_dev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fm_i2c_dev_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>fm_i2c_drv_reg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, se_driver.o(i.fm_i2c_drv_reg))
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>fm_i2c_drv_unreg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, se_driver.o(i.fm_i2c_drv_unreg))
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>fm_i2c_get_atr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, se_driver.o(i.fm_i2c_get_atr))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = fm_i2c_get_atr &rArr; fm_i2c_recv_frame &rArr; a7_i2c_read_byte &rArr; DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2Tim_InitTimeOut_ms
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2Tim_CheckTimeOut_ms
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_send_frame
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_recv_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>fm_i2c_open_device</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, se_driver.o(i.fm_i2c_open_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fm_i2c_open_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[3d5]"></a>fm_i2c_recv_frame</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, se_driver.o(i.fm_i2c_recv_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = fm_i2c_recv_frame &rArr; a7_i2c_read_byte &rArr; DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayms
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_send_noack
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_transceive
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_get_atr
</UL>

<P><STRONG><a name="[3d4]"></a>fm_i2c_send_frame</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, se_driver.o(i.fm_i2c_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fm_i2c_send_frame &rArr; Id2_SeDelayms &rArr; PUBLIC_Delayms &rArr; DRV_InterDelayus
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayms
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_transceive
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_get_atr
</UL>

<P><STRONG><a name="[d]"></a>fm_i2c_transceive</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, se_driver.o(i.fm_i2c_transceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = fm_i2c_transceive &rArr; fm_i2c_recv_frame &rArr; a7_i2c_read_byte &rArr; DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayms
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2Tim_InitTimeOut_ms
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2Tim_CheckTimeOut_ms
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_send_frame
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_i2c_recv_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[47d]"></a>fm_se_register</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, se_driver.o(i.fm_se_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fm_se_register
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_open_session
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = fputc &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[404]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_free
</UL>

<P><STRONG><a name="[3e0]"></a>hex_to_string</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, id2_util.o(i.hex_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hex_to_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
</UL>

<P><STRONG><a name="[1c3]"></a>id2_client_decrypt</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, id2_client.o(i.id2_client_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512<LI>Call Chain = id2_client_decrypt &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_id2_client_inited
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sym_cipher
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_malloc
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_free
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
</UL>

<P><STRONG><a name="[1c5]"></a>id2_client_get_challenge_auth_code</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, id2_client.o(i.id2_client_get_challenge_auth_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808<LI>Call Chain = id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_id2_client_inited
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
</UL>

<P><STRONG><a name="[1c4]"></a>id2_client_get_id</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, id2_client.o(i.id2_client_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = id2_client_get_id &rArr; km_get_id2 &rArr; irot_hal_get_id2 &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_get_id2
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_string
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_id2_client_inited
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleID2CasePro
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[e6]"></a>id2_client_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, id2_client.o(i.id2_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = id2_client_init &rArr; km_init &rArr; irot_hal_init &rArr; open_session &rArr; se_open_session &rArr; fm_se_register
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_init
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dump_id2_conf_info
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ID2Init
</UL>

<P><STRONG><a name="[325]"></a>id2_log_hex_dump</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, id2_util.o(i.id2_log_hex_dump))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sym_cipher
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sign
</UL>

<P><STRONG><a name="[321]"></a>id2_plat_base64_encode</STRONG> (Thumb, 248 bytes, Stack size 36 bytes, id2_plat.o(i.id2_plat_base64_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = id2_plat_base64_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[31d]"></a>id2_plat_get_random</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, id2_plat.o(i.id2_plat_get_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = id2_plat_get_random &rArr; PUBLIC_GenerateRandVec &rArr; DRV_InterGenerateRandVec &rArr; nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_GenerateRandVec
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[324]"></a>id2_plat_hash_sum</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, id2_plat.o(i.id2_plat_hash_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = id2_plat_hash_sum &rArr; irot_hal_hash_sum &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_hash_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_hash
</UL>

<P><STRONG><a name="[3e3]"></a>impl_sha256_finish</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, sha256.o(i.impl_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_finish
</UL>

<P><STRONG><a name="[3e5]"></a>impl_sha256_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sha256.o(i.impl_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = impl_sha256_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_init
</UL>

<P><STRONG><a name="[3e6]"></a>impl_sha256_process</STRONG> (Thumb, 3532 bytes, Stack size 312 bytes, sha256.o(i.impl_sha256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = impl_sha256_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_update
</UL>

<P><STRONG><a name="[403]"></a>impl_sha256_starts</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, sha256.o(i.impl_sha256_starts))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_init
</UL>

<P><STRONG><a name="[3e4]"></a>impl_sha256_update</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sha256.o(i.impl_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_process
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_finish
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_hal_sha256_update
</UL>

<P><STRONG><a name="[3f5]"></a>inv_sub_sbox</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rijndael.o(i.inv_sub_sbox))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sub_bytes
</UL>

<P><STRONG><a name="[3f6]"></a>irot_hal_get_id2</STRONG> (Thumb, 170 bytes, Stack size 552 bytes, std_se_adapter.o(i.irot_hal_get_id2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = irot_hal_get_id2 &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_application
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_session
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_get_id2
</UL>

<P><STRONG><a name="[3e2]"></a>irot_hal_hash_sum</STRONG> (Thumb, 288 bytes, Stack size 584 bytes, std_se_adapter.o(i.irot_hal_hash_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = irot_hal_hash_sum &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
</UL>

<P><STRONG><a name="[3f9]"></a>irot_hal_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, std_se_adapter.o(i.irot_hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = irot_hal_init &rArr; open_session &rArr; se_open_session &rArr; fm_se_register
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_session
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_init
</UL>

<P><STRONG><a name="[3fa]"></a>irot_hal_sym_crypto</STRONG> (Thumb, 296 bytes, Stack size 576 bytes, std_se_adapter.o(i.irot_hal_sym_crypto))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_application
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_cipher
</UL>

<P><STRONG><a name="[3de]"></a>is_id2_client_inited</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, id2_client.o(i.is_id2_client_inited))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_challenge_auth_code
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
</UL>

<P><STRONG><a name="[327]"></a>km_cipher</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, km_to_irot.o(i.km_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = km_cipher &rArr; irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_sym_crypto
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_km_key_name
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sym_cipher
</UL>

<P><STRONG><a name="[3df]"></a>km_get_id2</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, km_to_irot.o(i.km_get_id2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = km_get_id2 &rArr; irot_hal_get_id2 &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_get_id2
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
</UL>

<P><STRONG><a name="[3e1]"></a>km_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, km_to_irot.o(i.km_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = km_init &rArr; irot_hal_init &rArr; open_session &rArr; se_open_session &rArr; fm_se_register
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dump_chip_conf_info
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_init
</UL>

<P><STRONG><a name="[34b]"></a>ls_hal_sha256_finish</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ls_hal_hash.o(i.ls_hal_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ls_hal_sha256_finish &rArr; impl_sha256_finish &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_final
</UL>

<P><STRONG><a name="[34d]"></a>ls_hal_sha256_get_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ls_hal_hash.o(i.ls_hal_sha256_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_get_ctx_size
</UL>

<P><STRONG><a name="[34e]"></a>ls_hal_sha256_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ls_hal_hash.o(i.ls_hal_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ls_hal_sha256_init &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_starts
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_init
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_init
</UL>

<P><STRONG><a name="[34f]"></a>ls_hal_sha256_update</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ls_hal_hash.o(i.ls_hal_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ls_hal_sha256_update &rArr; impl_sha256_update &rArr; impl_sha256_process
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impl_sha256_update
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_update
</UL>

<P><STRONG><a name="[322]"></a>ls_osa_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_osa.o(i.ls_osa_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ls_osa_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_digest
</UL>

<P><STRONG><a name="[31f]"></a>ls_osa_malloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ls_osa.o(i.ls_osa_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ls_osa_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_digest
</UL>

<P><STRONG><a name="[31e]"></a>ls_osa_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, ls_osa.o(i.ls_osa_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_log_hex_dump
</UL>

<P><STRONG><a name="[3e]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = main &rArr; PlatformLoopExecute &rArr; App_Scheduler_Process &rArr; App_Scheduler_ThreadRealTime &rArr; App_GUI_MenuProcess &rArr; SystemSelfCheck &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformSystemInit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformLoopExecute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[405]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_malloc
</UL>

<P><STRONG><a name="[26d]"></a>my_base64_decode</STRONG> (Thumb, 224 bytes, Stack size 528 bytes, base64.o(i.my_base64_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = my_base64_decode &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encrypto_my_base64
</UL>

<P><STRONG><a name="[407]"></a>nrf_atfifo_clear</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_space_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uninit
</UL>

<P><STRONG><a name="[3e8]"></a>nrf_atfifo_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_atfifo.o(i.nrf_atfifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atfifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[3cb]"></a>nrf_atfifo_item_alloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[40a]"></a>nrf_atfifo_item_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
</UL>

<P><STRONG><a name="[40b]"></a>nrf_atfifo_item_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_rspace_req
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load_next
</UL>

<P><STRONG><a name="[3cc]"></a>nrf_atfifo_item_put</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_atfifo.o(i.nrf_atfifo_item_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_atfifo_item_put
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atfifo_c_51f461e1__nrf_atfifo_wspace_close
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[3af]"></a>nrf_atflags_clear</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3a5]"></a>nrf_atflags_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_atflags.o(i.nrf_atflags_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atflags_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_valid
</UL>

<P><STRONG><a name="[3ad]"></a>nrf_atflags_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_atflags.o(i.nrf_atflags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_or
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3e7]"></a>nrf_atomic_flag_set_fetch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_atomic.o(i.nrf_atomic_flag_set_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_fetch_or
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[40d]"></a>nrf_atomic_u32_and</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[40f]"></a>nrf_atomic_u32_fetch_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_fetch_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>

<P><STRONG><a name="[40e]"></a>nrf_atomic_u32_or</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, nrf_atomic.o(i.nrf_atomic_u32_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_atomic_c_85ca2469__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
</UL>

<P><STRONG><a name="[3d8]"></a>nrf_ble_gatt_att_mtu_periph_set</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_att_mtu_periph_set))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[3d7]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[96]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_exchange_mtu_request_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_rsp_evt
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[3a6]"></a>nrf_ble_qwr_conn_handle_assign</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_conn_handle_assign))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[47f]"></a>nrf_ble_qwr_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_init))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[99]"></a>nrf_ble_qwr_on_ble_evt</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.nrf_ble_qwr_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_ble_qwr_on_ble_evt &rArr; on_rw_authorize_request
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_request
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_release
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_rw_authorize_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[21c]"></a>nrf_drv_clock_hfclk_is_running</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_is_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_clock_hfclk_is_running
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HFClock_Request
</UL>

<P><STRONG><a name="[219]"></a>nrf_drv_clock_hfclk_release</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_hfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_stop
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HFClock_Release
</UL>

<P><STRONG><a name="[21b]"></a>nrf_drv_clock_hfclk_request</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_hfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_hfclk_request &rArr; hfclk_start &rArr; nrfx_clock_hfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HFClock_Request
</UL>

<P><STRONG><a name="[41c]"></a>nrf_drv_clock_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[41f]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[224]"></a>nrf_drv_rng_bytes_available</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_drv_rng.o(i.nrf_drv_rng_bytes_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_rng_bytes_available &rArr; nrf_queue_utilization_get &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterGenerateRandVec
</UL>

<P><STRONG><a name="[228]"></a>nrf_drv_rng_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_rng.o(i.nrf_drv_rng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_rng_init &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_start
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_init
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterRandVecInit
</UL>

<P><STRONG><a name="[225]"></a>nrf_drv_rng_rand</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, nrf_drv_rng.o(i.nrf_drv_rng_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_drv_rng_rand &rArr; nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_start
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterGenerateRandVec
</UL>

<P><STRONG><a name="[378]"></a>nrf_drv_uart_init</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[3d3]"></a>nrf_fstorage_is_busy</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_fstorage.o(i.nrf_fstorage_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[9b]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[a3]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[9d]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[25d]"></a>nrf_pwr_mgmt_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_pwr_mgmt_init &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SysMgmt_Init
</UL>

<P><STRONG><a name="[25e]"></a>nrf_pwr_mgmt_run</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_pwr_mgmt.o(i.nrf_pwr_mgmt_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pwr_mgmt_run &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SysMgmt_Run
</UL>

<P><STRONG><a name="[435]"></a>nrf_queue_is_full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_is_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_queue_is_full
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
</UL>

<P><STRONG><a name="[437]"></a>nrf_queue_push</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, nrf_queue.o(i.nrf_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_queue_push &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_next_idx
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
</UL>

<P><STRONG><a name="[423]"></a>nrf_queue_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_queue.o(i.nrf_queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_queue_read &rArr; queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_read
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
</UL>

<P><STRONG><a name="[420]"></a>nrf_queue_utilization_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_queue.o(i.nrf_queue_utilization_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_queue_utilization_get &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_utilization_get
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
</UL>

<P><STRONG><a name="[43a]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[3bc]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_sdh_ble_default_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[3bd]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sdh_ble_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[43c]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_sdh_disable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[3bb]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi_interrupt_priority_workaround
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[2d7]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[3da]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_run
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_is_running
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_bytes_available
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_stop
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[42e]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[434]"></a>nrf_section_iter_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pwr_mgmt_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
</UL>

<P><STRONG><a name="[43b]"></a>nrf_section_iter_next</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
</UL>

<P><STRONG><a name="[41e]"></a>nrfx_clock_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[3db]"></a>nrfx_clock_hfclk_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_hfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_clock_hfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_start
</UL>

<P><STRONG><a name="[3dd]"></a>nrfx_clock_hfclk_stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_hfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_clock_hfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hfclk_stop
</UL>

<P><STRONG><a name="[41d]"></a>nrfx_clock_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrfx_clock_init))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[3ff]"></a>nrfx_clock_lfclk_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrfx_clock_lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_clock_lfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>

<P><STRONG><a name="[20b]"></a>nrfx_gpiote_in_event_disable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInterruptDisable
</UL>

<P><STRONG><a name="[210]"></a>nrfx_gpiote_in_event_enable</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInterruptEnable
</UL>

<P><STRONG><a name="[20f]"></a>nrfx_gpiote_in_init</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, nrfx_gpiote.o(i.nrfx_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInterruptEnable
</UL>

<P><STRONG><a name="[20e]"></a>nrfx_gpiote_init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, nrfx_gpiote.o(i.nrfx_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInterruptEnable
</UL>

<P><STRONG><a name="[20d]"></a>nrfx_gpiote_is_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrfx_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInterruptEnable
</UL>

<P><STRONG><a name="[451]"></a>nrfx_prs_acquire</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, nrfx_prs.o(i.nrfx_prs_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_prs_acquire &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[453]"></a>nrfx_prs_release</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrfx_prs.o(i.nrfx_prs_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_prs_release
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prs_box_get
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[421]"></a>nrfx_rng_init</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, nrfx_rng.o(i.nrfx_rng_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrfx_rng_init
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[422]"></a>nrfx_rng_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrfx_rng.o(i.nrfx_rng_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_rng_start &rArr; nrf_rng_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rng_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_rand
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rng_init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[454]"></a>nrfx_rng_stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrfx_rng.o(i.nrfx_rng_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_rng_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rng_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_handler
</UL>

<P><STRONG><a name="[456]"></a>nrfx_rng_uninit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrfx_rng.o(i.nrfx_rng_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_rng_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rng_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[1db]"></a>nrfx_saadc_buffer_convert</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_ConfigInit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_CaptureIRQ
</UL>

<P><STRONG><a name="[1df]"></a>nrfx_saadc_channel_init</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_ConfigInit
</UL>

<P><STRONG><a name="[45a]"></a>nrfx_saadc_channel_uninit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_channel_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_limits_set
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
</UL>

<P><STRONG><a name="[1de]"></a>nrfx_saadc_init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, nrfx_saadc.o(i.nrfx_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrfx_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_ConfigInit
</UL>

<P><STRONG><a name="[45b]"></a>nrfx_saadc_limits_set</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, nrfx_saadc.o(i.nrfx_saadc_limits_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_limit_int_get
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_uninit
</UL>

<P><STRONG><a name="[1e2]"></a>nrfx_saadc_sample</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrfx_saadc.o(i.nrfx_saadc_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_saadc_sample
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_SampleTrigger
</UL>

<P><STRONG><a name="[1da]"></a>nrfx_saadc_uninit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_saadc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrfx_saadc_uninit &rArr; nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_uninit
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_AdcSourceRelease
</UL>

<P><STRONG><a name="[368]"></a>nrfx_timer_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrfx_timer_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_timer_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_start
</UL>

<P><STRONG><a name="[45f]"></a>nrfx_timer_compare</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, nrfx_timer.o(i.nrfx_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_enable
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_int_disable
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>

<P><STRONG><a name="[36b]"></a>nrfx_timer_enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrfx_timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_timer_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_start
</UL>

<P><STRONG><a name="[369]"></a>nrfx_timer_extended_compare</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, nrfx_timer.o(i.nrfx_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_timer_extended_compare &rArr; nrfx_timer_compare &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_shorts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_start
</UL>

<P><STRONG><a name="[367]"></a>nrfx_timer_init</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, nrfx_timer.o(i.nrfx_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_timer_init &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_init
</UL>

<P><STRONG><a name="[36c]"></a>nrfx_timer_pause</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrfx_timer_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_timer_pause
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_stop
</UL>

<P><STRONG><a name="[36a]"></a>nrfx_timer_resume</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrfx_timer_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrfx_timer_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_simple_timer_start
</UL>

<P><STRONG><a name="[8a]"></a>nrfx_uart_0_irq_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrfx_uart_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uart_0_irq_handler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uart.o(.constdata)
</UL>
<P><STRONG><a name="[425]"></a>nrfx_uart_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrfx_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[427]"></a>nrfx_uart_rx</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, nrfx_uart.o(i.nrfx_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[429]"></a>nrfx_uart_tx</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrfx_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[37a]"></a>nrfx_uart_tx_in_progress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[376]"></a>nrfx_uart_uninit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrfx_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrfx_uart_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_close
</UL>

<P><STRONG><a name="[8b]"></a>nrfx_uarte_0_irq_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrfx_uarte_0_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrfx_uarte_0_irq_handler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrfx_uarte.o(.constdata)
</UL>
<P><STRONG><a name="[424]"></a>nrfx_uarte_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrfx_uarte_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[426]"></a>nrfx_uarte_rx</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, nrfx_uarte.o(i.nrfx_uarte_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrfx_uarte_rx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_disable
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[428]"></a>nrfx_uarte_tx</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, nrfx_uarte.o(i.nrfx_uarte_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrfx_uarte_tx &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx_in_progress
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_is_in_ram
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_task_trigger
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[379]"></a>nrfx_uarte_tx_in_progress</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_uarte_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
</UL>

<P><STRONG><a name="[375]"></a>nrfx_uarte_uninit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrfx_uarte_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrfx_uarte_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_close
</UL>

<P><STRONG><a name="[474]"></a>se_open_session</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, se_driver.o(i.se_open_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = se_open_session &rArr; fm_se_register
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fm_se_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_session
</UL>

<P><STRONG><a name="[352]"></a>se_transmit</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, se_driver.o(i.se_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = se_transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
</UL>

<P><STRONG><a name="[1]"></a>user_i2c_dev_power_off</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, se_driver.o(i.user_i2c_dev_power_off))
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>user_i2c_dev_power_on</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, se_driver.o(i.user_i2c_dev_power_on))
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>user_i2c_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, se_driver.o(i.user_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = user_i2c_init &rArr; a7_i2c_write_byte &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioRead
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullup
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_write_byte
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_send_noack
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>user_i2c_recv_char</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, se_driver.o(i.user_i2c_recv_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = user_i2c_recv_char &rArr; a7_i2c_read_byte &rArr; DRV_GpioInputPullup &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_send_ack
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_read_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>user_i2c_send_addr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, se_driver.o(i.user_i2c_send_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = user_i2c_send_addr &rArr; a7_i2c_write_byte &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_write_byte
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_wait_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>user_i2c_send_char</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, se_driver.o(i.user_i2c_send_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = user_i2c_send_char &rArr; a7_i2c_write_byte &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_write_byte
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a7_i2c_wait_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>user_i2c_start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, se_driver.o(i.user_i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = user_i2c_start &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>user_i2c_stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, se_driver.o(i.user_i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = user_i2c_stop &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2_SeDelayus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> se_driver.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[48]"></a>SystemLifeTickTimerHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, systemtim.o(i.SystemLifeTickTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = SystemLifeTickTimerHandler &rArr; App_GUI_Tim1000Ms &rArr; HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Systick
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systemtim.o(i.SystemLifeTickTimerInit)
</UL>
<P><STRONG><a name="[49]"></a>SystemTim10MsTick_Handler</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, systemtim.o(i.SystemTim10MsTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemTim10MsTick_Handler &rArr; PUBLIC_Delayms &rArr; DRV_InterDelayus
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Id2Tim_SeTimer_s
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_Time10Ms
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Systick
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_Tim10Ms
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_Tim1000Ms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Wifi_Tim10Ms
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_Tim10Ms
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Tim10Ms
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SCREEN_Tim10Ms
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_Tim10Ms
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_Tim10Ms
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_HumanSensor_Tim10Ms
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim10Ms
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetCurMenuNo
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FINGER_Tim10Ms
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_Tim10Ms
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetPinState
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetAlrmWarmEnSts
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_CAM_Tim10Ms
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_UpdateWorkCntCountDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systemtim.o(i.SystemTimerIint)
</UL>
<P><STRONG><a name="[27e]"></a>GetSystemParaFromFlash</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, systeminit.o(i.GetSystemParaFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = GetSystemParaFromFlash &rArr; SystemReadFlash &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemReadFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[2d8]"></a>SelfCheckAlarmButtonHandler</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, systeminit.o(i.SelfCheckAlarmButtonHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = SelfCheckAlarmButtonHandler &rArr; App_Export_GetAlrmWarmState &rArr; HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetAlrmWarmState
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWorkLedStateDisplay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
</UL>

<P><STRONG><a name="[2da]"></a>SelfCheckBatErrorHandler</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, systeminit.o(i.SelfCheckBatErrorHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SelfCheckBatErrorHandler &rArr; HAL_ADC_BatSupplyPowerSwitch &rArr; HAL_ADC_BatChargeSwitchCtrl &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UpBatValLockCtrl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UnderBatValLockCtrl
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetVolLowGradeErr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValidVal
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatSupplyPowerSwitch
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
</UL>

<P><STRONG><a name="[2db]"></a>SelfCheckBatVolWarmHandler</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, systeminit.o(i.SelfCheckBatVolWarmHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SelfCheckBatVolWarmHandler &rArr; SystemEventLogSave &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_DefendActionCheck
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetSysVolLowWarmState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetCellBatVolState
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetOpenModel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
</UL>

<P><STRONG><a name="[2dc]"></a>SelfCheckButtonStateHandler</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, systeminit.o(i.SelfCheckButtonStateHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SelfCheckButtonStateHandler &rArr; SystemEventLogSave &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetOpenModel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetRegisterSts
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
</UL>

<P><STRONG><a name="[2dd]"></a>SelfCheckEepromErrHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, systeminit.o(i.SelfCheckEepromErrHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SelfCheckEepromErrHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
</UL>

<P><STRONG><a name="[2de]"></a>SelfCheckProBreakHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, systeminit.o(i.SelfCheckProBreakHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = SelfCheckProBreakHandler &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWorkLedStateDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
</UL>

<P><STRONG><a name="[2df]"></a>SelfCheckProNormalHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, systeminit.o(i.SelfCheckProNormalHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = SelfCheckProNormalHandler &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWorkLedStateDisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
</UL>

<P><STRONG><a name="[2e0]"></a>SelfCheckTryProtectHandler</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, systeminit.o(i.SelfCheckTryProtectHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = SelfCheckTryProtectHandler &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
</UL>

<P><STRONG><a name="[2e5]"></a>SystemManagerModelInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, systeminit.o(i.SystemManagerModelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemManagerModelInit &rArr; DRV_SysMgmt_Init &rArr; nrf_pwr_mgmt_init &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SysMgmt_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[2e9]"></a>SystemSdkRTTLogInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, systeminit.o(i.SystemSdkRTTLogInit))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemConfigInit
</UL>

<P><STRONG><a name="[2fb]"></a>SystemWaitSteady</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, systeminit.o(i.SystemWaitSteady))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SystemWaitSteady &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetOpenHandleSts
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCombinKeyState
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCloseHandleSts
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
</UL>

<P><STRONG><a name="[2d9]"></a>SystemWorkLedStateDisplay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, systeminit.o(i.SystemWorkLedStateDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemWorkLedStateDisplay &rArr; HAL_ADC_GetSysVolLowWarmState &rArr; HAL_ADC_GetCellBatVolState &rArr; HAL_ADC_GetValidVal &rArr; HAL_ADC_GetAdcVal
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetSysVolLowWarmState
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSelfCheck
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckProNormalHandler
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckProBreakHandler
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SelfCheckAlarmButtonHandler
</UL>

<P><STRONG><a name="[19a]"></a>App_Scheduler_Thread1000Ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scheduler.o(i.App_Scheduler_Thread1000Ms))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Process
</UL>

<P><STRONG><a name="[198]"></a>App_Scheduler_Thread100Ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.App_Scheduler_Thread100Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = App_Scheduler_Thread100Ms &rArr; App_LED_BreathThread &rArr; HAL_Touch_PwmOutputCtrl &rArr; DRV_GT316L_PwmOutputCtrl &rArr; DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellThread
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_BreathThread
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Process
</UL>

<P><STRONG><a name="[196]"></a>App_Scheduler_Thread10Ms</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, scheduler.o(i.App_Scheduler_Thread10Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = App_Scheduler_Thread10Ms &rArr; App_Export_ScanPortThread &rArr; HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_SampleProcess
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_ScanKeyProcess
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_ScanPortThread
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Process
</UL>

<P><STRONG><a name="[199]"></a>App_Scheduler_Thread500Ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, scheduler.o(i.App_Scheduler_Thread500Ms))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Process
</UL>

<P><STRONG><a name="[197]"></a>App_Scheduler_Thread50Ms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scheduler.o(i.App_Scheduler_Thread50Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_Scheduler_Thread50Ms &rArr; App_Touch_MainProcess &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_MainProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Process
</UL>

<P><STRONG><a name="[19b]"></a>App_Scheduler_ThreadRealTime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scheduler.o(i.App_Scheduler_ThreadRealTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = App_Scheduler_ThreadRealTime &rArr; App_GUI_MenuProcess &rArr; SystemSelfCheck &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayVoiceThread
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_ScanProcess
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuProcess
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Scheduler_Process
</UL>

<P><STRONG><a name="[174]"></a>App_Key_GetDoublePushState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, app_key.o(i.App_Key_GetDoublePushState))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCombinKeyState
</UL>

<P><STRONG><a name="[171]"></a>App_Key_GetMotorTurnDir</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_key.o(i.App_Key_GetMotorTurnDir))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetOpenHandleSts
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCloseHandleSts
</UL>

<P><STRONG><a name="[173]"></a>App_Key_GetPushTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_key.o(i.App_Key_GetPushTime))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCombinKeyState
</UL>

<P><STRONG><a name="[175]"></a>App_Key_KeyCapture</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, app_key.o(i.App_Key_KeyCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = App_Key_KeyCapture &rArr; HAL_Touch_GetIICBusState &rArr; DRV_GT316L_GetIICBusState &rArr; DRV_GT316L_ReadBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Touch_GetIICBusState
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_KeyScan
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_ScanKeyProcess
</UL>

<P><STRONG><a name="[176]"></a>App_Key_KeyScan</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, app_key.o(i.App_Key_KeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_Key_KeyScan
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioRead
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_KeyCapture
</UL>

<P><STRONG><a name="[172]"></a>App_Key_ResetPushTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_key.o(i.App_Key_ResetPushTime))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCombinKeyState
</UL>

<P><STRONG><a name="[184]"></a>App_PWD_ChangePwdPageidToEepromAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_pwd.o(i.App_PWD_ChangePwdPageidToEepromAddr))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllPwdMegFromEeprom
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryPwdByStringFromEeprom
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryByIdFromEeprom
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SearchEmptyPwdEepromAddr
</UL>

<P><STRONG><a name="[181]"></a>App_PWD_CheckTimeliness</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, app_pwd.o(i.App_PWD_CheckTimeliness))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = App_PWD_CheckTimeliness &rArr; HAL_RTC_TmToTime &rArr; RTC_mktime
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TmToTime
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeToTm
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_VerifyUserPwd
</UL>

<P><STRONG><a name="[186]"></a>App_PWD_ChgSosPwdPageidToEepromAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_pwd.o(i.App_PWD_ChgSosPwdPageidToEepromAddr))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllSosPwdsFromEeprom
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveSosPwdIntoEeprom
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QuerySosPwdFromEeprom
</UL>

<P><STRONG><a name="[188]"></a>App_PWD_ChgTempPwdPageidToEepromAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_pwd.o(i.App_PWD_ChgTempPwdPageidToEepromAddr))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ClearAllTmpPwdsFromEeprom
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveTempPwdsIntoEeprom
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_QueryTmpPwdFromEeprom
</UL>

<P><STRONG><a name="[190]"></a>App_PWD_QuerySosPwdFromEeprom</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, app_pwd.o(i.App_PWD_QuerySosPwdFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = App_PWD_QuerySosPwdFromEeprom &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ChgSosPwdPageidToEepromAddr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_VerifySosPwd
</UL>

<P><STRONG><a name="[191]"></a>App_PWD_QueryTmpPwdFromEeprom</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, app_pwd.o(i.App_PWD_QueryTmpPwdFromEeprom))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = App_PWD_QueryTmpPwdFromEeprom &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ChgTempPwdPageidToEepromAddr
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_VerifyTempPwd
</UL>

<P><STRONG><a name="[192]"></a>App_PWD_SearchEmptyPwdEepromAddr</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, app_pwd.o(i.App_PWD_SearchEmptyPwdEepromAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = App_PWD_SearchEmptyPwdEepromAddr &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_ChangePwdPageidToEepromAddr
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveOnePwdMegIntoEeprom
</UL>

<P><STRONG><a name="[f0]"></a>App_BleDelFingerPro</STRONG> (Thumb, 138 bytes, Stack size 144 bytes, app_ble.o(i.App_BleDelFingerPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = App_BleDelFingerPro &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetFlowResult
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
</UL>

<P><STRONG><a name="[f2]"></a>App_BleDeviceRegThread</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, app_ble.o(i.App_BleDeviceRegThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_BleDeviceRegThread &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_ChangeDecToString
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValBuf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_BleProHandleThread
</UL>

<P><STRONG><a name="[1cc]"></a>CAM_ReadFifoData</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, app_cam.o(i.CAM_ReadFifoData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAM_ReadFifoData &rArr; HAL_Uart_PopByteFromQueue &rArr; app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_PrintHex
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_PopByteFromQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_GetCurDeviceType
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ServerScan
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_PirWakeUpTest
</UL>

<P><STRONG><a name="[1cf]"></a>CAM_SendCommand</STRONG> (Thumb, 92 bytes, Stack size 272 bytes, app_cam.o(i.CAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = CAM_SendCommand &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_PrintHex
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_TxMessage
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_inverted_check
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ServerScan
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartWakeUp
</UL>

<P><STRONG><a name="[1d1]"></a>CAM_UartWakeUp</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, app_cam.o(i.CAM_UartWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = CAM_UartWakeUp &rArr; CAM_SendCommand &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinSet
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_UartSelect
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_ServerScan
</UL>

<P><STRONG><a name="[3be]"></a>cam_clear_queue</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_cam.o(i.cam_clear_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cam_clear_queue &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_get_queue_len
</UL>

<P><STRONG><a name="[1c9]"></a>cam_get_queue_len</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, app_cam.o(i.cam_get_queue_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cam_get_queue_len &rArr; cam_clear_queue &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_clear_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_GetQueueClearState
</UL>

<P><STRONG><a name="[1d3]"></a>cam_reset_queue_data</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, app_cam.o(i.cam_reset_queue_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cam_reset_queue_data &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_UartRelease
</UL>

<P><STRONG><a name="[1d0]"></a>xor_inverted_check</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_cam.o(i.xor_inverted_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xor_inverted_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommand
</UL>

<P><STRONG><a name="[1aa]"></a>App_Wifi_TxMessage</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, app_wifi.o(i.App_Wifi_TxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_TxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
</UL>

<P><STRONG><a name="[1a9]"></a>WIFI_GetCheckSumWord</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_wifi.o(i.WIFI_GetCheckSumWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WIFI_GetCheckSumWord
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
</UL>

<P><STRONG><a name="[312]"></a>WIFI_UploadDataClear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_wifi.o(i.WIFI_UploadDataClear))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_UploadDataGetLength
</UL>

<P><STRONG><a name="[1a4]"></a>MemcpyByteTobyte</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, app_touch.o(i.MemcpyByteTobyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemcpyByteTobyte
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValBuf
</UL>

<P><STRONG><a name="[1a3]"></a>MemsetByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_touch.o(i.MemsetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemsetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValBuf
</UL>

<P><STRONG><a name="[356]"></a>app_finger_ack_ok</STRONG> (Thumb, 382 bytes, Stack size 128 bytes, app_finger.o(i.app_finger_ack_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = app_finger_ack_ok &rArr; app_finger_cfg_write &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_report
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_img_reset
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_img_get
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_get_led
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_get_nullnum
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_add
</UL>

<P><STRONG><a name="[dd]"></a>app_finger_ack_scan</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_finger.o(i.app_finger_ack_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = app_finger_ack_scan &rArr; app_finger_add &rArr; app_finger_ack_ok &rArr; app_finger_cfg_write &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_search
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_delete
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_clear_common
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_clear
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Scan
</UL>

<P><STRONG><a name="[35a]"></a>app_finger_add</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, app_finger.o(i.app_finger_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = app_finger_add &rArr; app_finger_ack_ok &rArr; app_finger_cfg_write &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetAckCode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_scan
</UL>

<P><STRONG><a name="[c3]"></a>app_finger_cfg_get_nullnum</STRONG> (Thumb, 130 bytes, Stack size 80 bytes, app_finger.o(i.app_finger_cfg_get_nullnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = app_finger_cfg_get_nullnum &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_CfgGetNullNum
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_inparam_scan
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_ok
</UL>

<P><STRONG><a name="[ca]"></a>app_finger_cfg_get_registid</STRONG> (Thumb, 98 bytes, Stack size 88 bytes, app_finger.o(i.app_finger_cfg_get_registid))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = app_finger_cfg_get_registid &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetFingerID
</UL>

<P><STRONG><a name="[c5]"></a>app_finger_cfg_read</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_finger.o(i.app_finger_cfg_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = app_finger_cfg_read &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_CfgRead
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_check_access
</UL>

<P><STRONG><a name="[360]"></a>app_finger_cfg_reset</STRONG> (Thumb, 104 bytes, Stack size 80 bytes, app_finger.o(i.app_finger_cfg_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = app_finger_cfg_reset &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_clear
</UL>

<P><STRONG><a name="[361]"></a>app_finger_cfg_reset_common</STRONG> (Thumb, 96 bytes, Stack size 80 bytes, app_finger.o(i.app_finger_cfg_reset_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = app_finger_cfg_reset_common &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_clear_common
</UL>

<P><STRONG><a name="[c8]"></a>app_finger_cfg_write</STRONG> (Thumb, 326 bytes, Stack size 96 bytes, app_finger.o(i.app_finger_cfg_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = app_finger_cfg_write &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_CfgWrite
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_ok
</UL>

<P><STRONG><a name="[362]"></a>app_finger_cfg_write_null</STRONG> (Thumb, 162 bytes, Stack size 136 bytes, app_finger.o(i.app_finger_cfg_write_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = app_finger_cfg_write_null &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_WriteBytes
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_delete
</UL>

<P><STRONG><a name="[363]"></a>app_finger_check_access</STRONG> (Thumb, 274 bytes, Stack size 96 bytes, app_finger.o(i.app_finger_check_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = app_finger_check_access &rArr; app_finger_cfg_read &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeIsTimesize
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetSearchScore
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetSearchID
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_search
</UL>

<P><STRONG><a name="[35d]"></a>app_finger_clear</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, app_finger.o(i.app_finger_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = app_finger_clear &rArr; app_finger_cfg_reset &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetAckCode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_scan
</UL>

<P><STRONG><a name="[35e]"></a>app_finger_clear_common</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, app_finger.o(i.app_finger_clear_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = app_finger_clear_common &rArr; app_finger_cfg_reset_common &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetAckCode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_reset_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_scan
</UL>

<P><STRONG><a name="[35c]"></a>app_finger_delete</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, app_finger.o(i.app_finger_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = app_finger_delete &rArr; app_finger_cfg_write_null &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetAckCode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_write_null
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_scan
</UL>

<P><STRONG><a name="[359]"></a>app_finger_get_led</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, app_finger.o(i.app_finger_get_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = app_finger_get_led &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_ok
</UL>

<P><STRONG><a name="[112]"></a>app_finger_img_cnt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_finger.o(i.app_finger_img_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FINGER_Tim10Ms
</UL>

<P><STRONG><a name="[357]"></a>app_finger_img_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_finger.o(i.app_finger_img_get))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_search
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_ok
</UL>

<P><STRONG><a name="[d6]"></a>app_finger_img_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_finger.o(i.app_finger_img_reset))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_search
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_report
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_ok
</UL>

<P><STRONG><a name="[de]"></a>app_finger_inparam_scan</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, app_finger.o(i.app_finger_inparam_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = app_finger_inparam_scan &rArr; app_finger_reset_flag &rArr; FINGER_Sleep &rArr; FINGER_Poweroff &rArr; DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_report
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_cfg_get_nullnum
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Scan
</UL>

<P><STRONG><a name="[358]"></a>app_finger_report</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, app_finger.o(i.app_finger_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = app_finger_report &rArr; HAL_Voice_PlayingVoice &rArr; HAL_Voice_PlayVoiceThread &rArr; HAL_Voice_PlayVoiceNum &rArr; DRV_AM5BA340_PlayVoice &rArr; DRV_AM5BA340_SendBytes &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_work_set_10ms
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_img_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_inparam_scan
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_ok
</UL>

<P><STRONG><a name="[d0]"></a>app_finger_reset_flag</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, app_finger.o(i.app_finger_reset_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = app_finger_reset_flag &rArr; FINGER_Sleep &rArr; FINGER_Poweroff &rArr; DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Sleep
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_report
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Scan
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_search
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_inparam_scan
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_delete
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_clear_common
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_clear
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_add
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_ok
</UL>

<P><STRONG><a name="[35b]"></a>app_finger_search</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, app_finger.o(i.app_finger_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = app_finger_search &rArr; app_finger_check_access &rArr; app_finger_cfg_read &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetAckCode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_reset_flag
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_img_reset
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_img_get
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_check_access
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_ack_scan
</UL>

<P><STRONG><a name="[111]"></a>app_finger_work_cnt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_finger.o(i.app_finger_work_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_FINGER_Tim10Ms
</UL>

<P><STRONG><a name="[dc]"></a>app_finger_work_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_finger.o(i.app_finger_work_get))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Scan
</UL>

<P><STRONG><a name="[366]"></a>app_finger_work_set_10ms</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_finger.o(i.app_finger_work_set_10ms))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_finger_report
</UL>

<P><STRONG><a name="[e7]"></a>ble_module_update_data_rec</STRONG> (Thumb, 530 bytes, Stack size 48 bytes, app_update.o(i.ble_module_update_data_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ble_module_update_data_rec &rArr; ble_tx_event_handle &rArr; ble_nus_data_send &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_tx_event_handle
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_module_update_figo_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Update
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_UpdateDataHandler
</UL>

<P><STRONG><a name="[3b0]"></a>ble_module_update_figo_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_update.o(i.ble_module_update_figo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_module_update_figo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_module_update_data_rec
</UL>

<P><STRONG><a name="[2e2]"></a>SmartkeyPageidAddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_smartkey.o(i.SmartkeyPageidAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyCheckRegId
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyWriteId
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyReadId
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyDeleteId
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeySearchEmptyReg
</UL>

<P><STRONG><a name="[2e3]"></a>SmartkeySearchEmptyReg</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app_smartkey.o(i.SmartkeySearchEmptyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SmartkeySearchEmptyReg &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EEPROM_ReadBytes
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartkeyPageidAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartKeyWriteId
</UL>

<P><STRONG><a name="[60]"></a>App_GUI_AddAdminFaceMenu</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_AddAdminFaceMenu))
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>App_GUI_AddAdminFingerMenu</STRONG> (Thumb, 332 bytes, Stack size 136 bytes, app_gui.o(i.App_GUI_AddAdminFingerMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = App_GUI_AddAdminFingerMenu &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetRegisterSts
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetFlowResult
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetRegisterSts
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>App_GUI_AddGuestFaceMenu</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_AddGuestFaceMenu))
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>App_GUI_AddGuestFingerMenu</STRONG> (Thumb, 260 bytes, Stack size 136 bytes, app_gui.o(i.App_GUI_AddGuestFingerMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = App_GUI_AddGuestFingerMenu &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetFlowResult
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>App_GUI_AginTestMenu</STRONG> (Thumb, 390 bytes, Stack size 128 bytes, app_gui.o(i.App_GUI_AginTestMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = App_GUI_AginTestMenu &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ForceOpenDoorThread
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_BurnTestCloseDoorThread
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>App_GUI_AlarmHandlerMenu</STRONG> (Thumb, 390 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_AlarmHandlerMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_AlarmHandlerMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysWakeupType
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetPinState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetKeyValidState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WorkModeCtrl
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAlarmButtonRecoveryWarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>App_GUI_BackFactoryMenu</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_BackFactoryMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = App_GUI_BackFactoryMenu &rArr; SystemParaBackFactoryIntoFlash &rArr; SystemInitFlash &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParaBackFactoryIntoFlash
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>App_GUI_BatVolLowErrMenu</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_BatVolLowErrMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_GUI_BatVolLowErrMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetCellBatVolState
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>App_GUI_BellLampMenu</STRONG> (Thumb, 694 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_BellLampMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = App_GUI_BellLampMenu &rArr; SystemWakeupInit &rArr; GetSystemParaFromFlash &rArr; SystemReadFlash &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_DefendActionCheck
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCloseHandleSts
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysWakeupType
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetOpenModel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetPinState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GetBleConnect
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetKeyValidState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellCtrl
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_HandleTryForbitWarmCheck
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ForgetLockWarmCheck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_FalseLockWarmCheck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_AutoLockCheck
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetAutoLockSts
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckStayDetectAction
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckBellVideoAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>App_GUI_BellVideoMenu</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_BellVideoMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_GUI_BellVideoMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>App_GUI_BleOpenErrWarmMenu</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_BleOpenErrWarmMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_BleOpenErrWarmMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>App_GUI_ChangePwdMenu</STRONG> (Thumb, 730 bytes, Stack size 72 bytes, app_gui.o(i.App_GUI_ChangePwdMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = App_GUI_ChangePwdMenu &rArr; SystemEventLogSave &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_ChangeDecToString
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValBuf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyIndex
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TmToTime
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_SaveOnePwdMegIntoEeprom
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeUpdate
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetRegisterSts
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>App_GUI_CheckAdminMenu</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, app_gui.o(i.App_GUI_CheckAdminMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = App_GUI_CheckAdminMenu &rArr; App_GUI_FingerCheck &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetOpenHandleSts
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCombinKeyState
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCloseHandleSts
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetOpenModel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetPinState
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_ResetCombinKeyFlow
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetOpenModel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetCloseModel
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheckStop
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>App_GUI_CheckAlarmButtonActionWarm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_CheckAlarmButtonActionWarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = App_GUI_CheckAlarmButtonActionWarm &rArr; App_Export_GetAlrmWarmState &rArr; HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetAlrmWarmState
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
</UL>

<P><STRONG><a name="[11e]"></a>App_GUI_CheckAlarmButtonRecoveryWarm</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_CheckAlarmButtonRecoveryWarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = App_GUI_CheckAlarmButtonRecoveryWarm &rArr; App_Export_GetAlrmWarmState &rArr; HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetAlrmWarmState
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_SetAlrmWarmEn
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[126]"></a>App_GUI_CheckBellVideoAction</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_CheckBellVideoAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = App_GUI_CheckBellVideoAction &rArr; HAL_ADC_GetCellBatVolState &rArr; HAL_ADC_GetValidVal &rArr; HAL_ADC_GetAdcVal
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetCellBatVolState
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_TryProtectMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[63]"></a>App_GUI_CheckFaceErrMenu</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_CheckFaceErrMenu))
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>App_GUI_CheckFingerErrMenu</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_CheckFingerErrMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_CheckFingerErrMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>App_GUI_CheckPwdErrMenu</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_CheckPwdErrMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_CheckPwdErrMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>App_GUI_CheckStayDetectAction</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_CheckStayDetectAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = App_GUI_CheckStayDetectAction &rArr; HAL_EXPORT_PinGet &rArr; DRV_NCA9555_PinGet &rArr; DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[5e]"></a>App_GUI_CloseDoorMenu</STRONG> (Thumb, 422 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_CloseDoorMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_CloseDoorMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UpBatValLockCtrl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UnderBatValLockCtrl
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiUploadSwSts
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_SetAlrmWarmEn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WorkModeCtrl
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ForceCloseDoorThread
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_CloseDoorThread
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetCloseModel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>App_GUI_DelFaceMenu</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_DelFaceMenu))
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>App_GUI_DelFingerMenu</STRONG> (Thumb, 234 bytes, Stack size 128 bytes, app_gui.o(i.App_GUI_DelFingerMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = App_GUI_DelFingerMenu &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetFlowResult
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>App_GUI_DeployWarmMenu</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_DeployWarmMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_DeployWarmMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_DefendActionCheck
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckBellVideoAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>App_GUI_EepromErrorMenu</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_EepromErrorMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_GUI_EepromErrorMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>App_GUI_ErrorCheckMenu</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_ErrorCheckMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = App_GUI_ErrorCheckMenu &rArr; CAM_PirWakeUpTest &rArr; HAL_Uart_ConfigInit &rArr; DRV_Uart_ConfigInit &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrfx_uarte_init &rArr; apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_PirWakeUpTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>App_GUI_FalseLockWarmMenu</STRONG> (Thumb, 386 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_FalseLockWarmMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_FalseLockWarmMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetSysVolLowWarmState
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_AutoLockCheck
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>App_GUI_FingerCheck</STRONG> (Thumb, 434 bytes, Stack size 200 bytes, app_gui.o(i.App_GUI_FingerCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = App_GUI_FingerCheck &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetRegisterSts
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Operate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_GetFlowResult
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_CfgRead
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
</UL>

<P><STRONG><a name="[138]"></a>App_GUI_FingerCheckStop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_FingerCheckStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = App_GUI_FingerCheckStop &rArr; APP_FINGER_Sleep &rArr; app_finger_reset_flag &rArr; FINGER_Sleep &rArr; FINGER_Poweroff &rArr; DRV_74HC0452_UartSelect &rArr; DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAdminMenu
</UL>

<P><STRONG><a name="[73]"></a>App_GUI_ForgetLockWarmMenu</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_ForgetLockWarmMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_ForgetLockWarmMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_AutoLockCheck
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>App_GUI_GetAutoLockSts</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_GetAutoLockSts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_GUI_GetAutoLockSts
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetAutoLockTimPara
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_Tim1000Ms
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WakeButSleepMenu
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GotoSleepModelMenu
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BellLampMenu
</UL>

<P><STRONG><a name="[149]"></a>App_GUI_GetAutoLockTimPara</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_GetAutoLockTimPara))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetOpenModel
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetAutoLockSts
</UL>

<P><STRONG><a name="[11d]"></a>App_GUI_GetWifiWarmingSwSts</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_GetWifiWarmingSwSts))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = App_GUI_GetWifiWarmingSwSts &rArr; HAL_ADC_GetCellBatVolState &rArr; HAL_ADC_GetValidVal &rArr; HAL_ADC_GetAdcVal
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetCellBatVolState
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_WeatherUpdateMenu
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StayWarmMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_OpenDoorMenu
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ForgetLockWarmMenu
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FalseLockWarmMenu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_DeployWarmMenu
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckPwdErrMenu
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckFingerErrMenu
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_BleOpenErrWarmMenu
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AlarmHandlerMenu
</UL>

<P><STRONG><a name="[77]"></a>App_GUI_GotoAppModelMenu</STRONG> (Thumb, 600 bytes, Stack size 16 bytes, app_gui.o(i.App_GUI_GotoAppModelMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 2400<LI>Call Chain = App_GUI_GotoAppModelMenu &rArr; APP_BleServerProcess &rArr; BleID2CasePro &rArr; id2_client_get_challenge_auth_code &rArr; _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCombinKeyState
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetOpenModel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FINGER_Sleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GetBleConnect
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleSetAdminState
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleServerProcess
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_BleGetAdminState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_ResetCombinKeyFlow
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ID2Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>App_GUI_GotoOtaModelMenu</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_GotoOtaModelMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_GUI_GotoOtaModelMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>App_GUI_GotoSleepModelMenu</STRONG> (Thumb, 646 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_GotoSleepModelMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = App_GUI_GotoSleepModelMenu &rArr; FINGER_SleepEx &rArr; finger_sleep_ex &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemAppBleInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_DefendActionCheck
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetVolLowGradeErr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysWakeupType
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetOpenModel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetAlrmWarmState
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Sleep
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GetBleConnect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetKeyValidState
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysSleepSts
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysSleepSts
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_WIFI_TxState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WorkModeCtrl
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ReleaseTryProtectCheck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_AutoLockCheck
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_SleepEx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SysMgmt_Run
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetAutoLockSts
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckStayDetectAction
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAlarmButtonRecoveryWarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>App_GUI_MainDeskMenu</STRONG> (Thumb, 2590 bytes, Stack size 56 bytes, app_gui.o(i.App_GUI_MainDeskMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = App_GUI_MainDeskMenu &rArr; App_GUI_FingerCheck &rArr; APP_FINGER_Operate &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_DefendActionCheck
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetOpenHandleSts
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCombinKeyState
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCloseHandleSts
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetOpenModel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetRegisterSts
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetDoubleCheckSwSts
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetPinState
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GetBleConnect
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyIndex
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiUploadSwSts
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_ResetCombinKeyFlow
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WorkModeGet
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WorkModeCtrl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellCtrl
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_HandleTryForbitWarmCheck
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ForgetLockWarmCheck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_FalseLockWarmCheck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_AutoLockCheck
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetOpenModel
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetDoubleCheckType
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetCloseModel
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_PwdCheckAndTouchHandler
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetAutoLockSts
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheckStop
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_FingerCheck
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckStayDetectAction
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckBellVideoAction
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAlarmButtonRecoveryWarm
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckAlarmButtonActionWarm
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>App_GUI_NetworkUpdateMenu</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_NetworkUpdateMenu))
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>App_GUI_OpenDoorMenu</STRONG> (Thumb, 866 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_OpenDoorMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_OpenDoorMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_DefendActionCheck
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UpBatValLockCtrl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_UnderBatValLockCtrl
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetSysWakeupType
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetRegisterSts
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_SetAlrmWarmEn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_WorkModeCtrl
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_OpenDoorThread
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_CloseDoorThread
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_AutoLockCheck
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StopStayDetectTim
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetOpenModel
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetAutoLockTimPara
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>App_GUI_PwdCheckAndTouchHandler</STRONG> (Thumb, 570 bytes, Stack size 88 bytes, app_gui.o(i.App_GUI_PwdCheckAndTouchHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = App_GUI_PwdCheckAndTouchHandler &rArr; App_PWD_VerifyUserPwd &rArr; App_PWD_QueryPwdByStringFromEeprom &rArr; HAL_EEPROM_ReadBytes &rArr; DRV_HE24C512_ReadBytes &rArr; DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetRegisterSts
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_ChangeDecToString
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValBuf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyIndex
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_VerifyUserPwd
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_VerifyTempPwd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_PWD_VerifySosPwd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MainDeskMenu
</UL>

<P><STRONG><a name="[15d]"></a>App_GUI_Scheduler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_Scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = App_GUI_Scheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuProcess
</UL>

<P><STRONG><a name="[7b]"></a>App_GUI_SetAutoLockMenu</STRONG> (Thumb, 614 bytes, Stack size 16 bytes, app_gui.o(i.App_GUI_SetAutoLockMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_GUI_SetAutoLockMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValBuf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteFixSeting
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>App_GUI_SetDeployMenu</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, app_gui.o(i.App_GUI_SetDeployMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_GUI_SetDeployMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>App_GUI_SetDoubleCheckMenu</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, app_gui.o(i.App_GUI_SetDoubleCheckMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = App_GUI_SetDoubleCheckMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>App_GUI_SetFaceMenu</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_gui.o(i.App_GUI_SetFaceMenu))
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>App_GUI_SetFingerMenu</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, app_gui.o(i.App_GUI_SetFingerMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = App_GUI_SetFingerMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetRegisterSts
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>App_GUI_SetMotorDirMenu</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, app_gui.o(i.App_GUI_SetMotorDirMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_GUI_SetMotorDirMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteFixSeting
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>App_GUI_SetMotorTorsionMenu</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, app_gui.o(i.App_GUI_SetMotorTorsionMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_GUI_SetMotorTorsionMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteFixSeting
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>App_GUI_SetNearSenseMenu</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, app_gui.o(i.App_GUI_SetNearSenseMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_GUI_SetNearSenseMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>App_GUI_SetPwdMenu</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_SetPwdMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_GUI_SetPwdMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>App_GUI_SetRegisterSts</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_SetRegisterSts))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = App_GUI_SetRegisterSts &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_ChangePwdMenu
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_AddAdminFingerMenu
</UL>

<P><STRONG><a name="[80]"></a>App_GUI_SetStayCheckMenu</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, app_gui.o(i.App_GUI_SetStayCheckMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_GUI_SetStayCheckMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>App_GUI_SetSysParaMenu</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_SetSysParaMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_GUI_SetSysParaMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>App_GUI_SetVolGradeMenu</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, app_gui.o(i.App_GUI_SetVolGradeMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = App_GUI_SetVolGradeMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>App_GUI_SmartScreenShowMenu</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, app_gui.o(i.App_GUI_SmartScreenShowMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = App_GUI_SmartScreenShowMenu
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>App_GUI_StayWarmMenu</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_StayWarmMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_StayWarmMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_StopStayDetectTim
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>App_GUI_SystemManageMenu</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, app_gui.o(i.App_GUI_SystemManageMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = App_GUI_SystemManageMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>App_GUI_TryProtectMenu</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_TryProtectMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = App_GUI_TryProtectMenu &rArr; App_LED_OutputCtrl &rArr; HAL_EXPORT_PinSet &rArr; DRV_NCA9555_PinSet &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_VolumeSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SCREEN_Operate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAM_SendCommandStart
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_GetCurrentKeyValue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_BellCtrl
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckBellVideoAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>App_GUI_WakeButSleepMenu</STRONG> (Thumb, 654 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_WakeButSleepMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = App_GUI_WakeButSleepMenu &rArr; SystemWakeupInit &rArr; GetSystemParaFromFlash &rArr; SystemReadFlash &rArr; SystemWriteSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemEventLogSave
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_DefendActionCheck
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetCloseHandleSts
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetSysWakeupType
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetOpenModel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_SetCloseModel
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_RelieveTryProtect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWakeupInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Export_GetPinState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GetBleConnect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Key_GetKeyValidState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_HandleTryForbitWarmCheck
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_ForgetLockWarmCheck
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_FalseLockWarmCheck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Motor_AutoLockCheck
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetOpenModel
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetAutoLockSts
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_CheckStayDetectAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>App_GUI_WeatherUpdateMenu</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, app_gui.o(i.App_GUI_WeatherUpdateMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = App_GUI_WeatherUpdateMenu &rArr; App_WIFI_CommomTx &rArr; App_Wifi_TxMessage &rArr; HAL_Uart_TxMessage &rArr; DRV_Uart_TxMessage &rArr; app_uart_put &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Touch_FuncEnCtrl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_LED_OutputCtrl
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_MenuJump
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_WIFI_CommomTx
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GUI_GetWifiWarmingSwSts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_gui.o(.constdata)
</UL>
<P><STRONG><a name="[270]"></a>finger_pack_start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, finger.o(i.finger_pack_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finger_pack_start
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Operate
</UL>

<P><STRONG><a name="[272]"></a>finger_pack_stop</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, finger.o(i.finger_pack_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = finger_pack_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_status_return_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Poweroff
</UL>

<P><STRONG><a name="[275]"></a>finger_sleep_ex</STRONG> (Thumb, 498 bytes, Stack size 8 bytes, finger.o(i.finger_sleep_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = finger_sleep_ex &rArr; FINGER_WakeUp &rArr; FINGER_Init &rArr; FINGER_Scan &rArr; finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayVoiceThread
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_GetBusyState
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EXPORT_PinGet
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_WakeUp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Scan
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Operate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_GetFlowStatus
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Poweroff
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_SleepEx
</UL>

<P><STRONG><a name="[274]"></a>finger_uart_rx</STRONG> (Thumb, 562 bytes, Stack size 16 bytes, finger.o(i.finger_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = finger_uart_rx &rArr; aes_decrypt_ecb &rArr; aes_decrypt &rArr; inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt_ecb
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_status_return_zero
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_my_printf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Scan
</UL>

<P><STRONG><a name="[3d1]"></a>finger_uart_rx_handler</STRONG> (Thumb, 506 bytes, Stack size 8 bytes, finger.o(i.finger_uart_rx_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = finger_uart_rx_handler &rArr; HAL_Uart_PopByteFromQueue &rArr; app_fifo_get &rArr; fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_PopByteFromQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_GetCurDeviceType
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_uart_rx
</UL>

<P><STRONG><a name="[273]"></a>finger_uart_tx</STRONG> (Thumb, 1128 bytes, Stack size 40 bytes, finger.o(i.finger_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = finger_uart_tx &rArr; aes_encrypt_ecb &rArr; aes_encrypt &rArr; aes_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteSeting
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_GenerateRandVec
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_TxMessage
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt_ecb
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finger_my_printf
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FINGER_Scan
</UL>

<P><STRONG><a name="[29b]"></a>RTC_mktime</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, hal_rtc.o(i.RTC_mktime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TmToTime
</UL>

<P><STRONG><a name="[299]"></a>is_leap_year</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_rtc.o(i.is_leap_year))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeToTm
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_month_days
</UL>

<P><STRONG><a name="[29a]"></a>rtc_month_days</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hal_rtc.o(i.rtc_month_days))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_month_days
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_leap_year
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_TimeToTm
</UL>

<P><STRONG><a name="[280]"></a>HAL_ADC_BatChargeSwitchCtrl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_adc.o(i.HAL_ADC_BatChargeSwitchCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_BatChargeSwitchCtrl &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_FileInit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_BatSupplyPowerSwitch
</UL>

<P><STRONG><a name="[282]"></a>HAL_ADC_BatVolCaptPinEnCtrl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_adc.o(i.HAL_ADC_BatVolCaptPinEnCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_BatVolCaptPinEnCtrl &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_WakeupInit
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_SleepInit
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_FileInit
</UL>

<P><STRONG><a name="[29c]"></a>HAL_Uart_GetComCurNo</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, hal_uart.o(i.HAL_Uart_GetComCurNo))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_DeInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
</UL>

<P><STRONG><a name="[46]"></a>HAL_Uart_PushByteIntoQueue0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_uart.o(i.HAL_Uart_PushByteIntoQueue0))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Uart_PushByteIntoQueue0 &rArr; app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(i.HAL_Uart_ConfigInit)
</UL>
<P><STRONG><a name="[47]"></a>HAL_Uart_PushByteIntoQueue1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_uart.o(i.HAL_Uart_PushByteIntoQueue1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Uart_PushByteIntoQueue1 &rArr; app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_uart.o(i.HAL_Uart_ConfigInit)
</UL>
<P><STRONG><a name="[29d]"></a>HAL_Uart_SetCurDeviceType</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, hal_uart.o(i.HAL_Uart_SetCurDeviceType))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_DeInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Uart_ConfigInit
</UL>

<P><STRONG><a name="[2a4]"></a>HAL_Voice_GetQueueState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_voice.o(i.HAL_Voice_GetQueueState))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayVoiceThread
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_Voice_PlayVoiceNum</STRONG> (Thumb, 1710 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_PlayVoiceNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HAL_Voice_PlayVoiceNum &rArr; DRV_AM5BA340_PlayVoice &rArr; DRV_AM5BA340_SendBytes &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_PlayVoice
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayVoiceThread
</UL>

<P><STRONG><a name="[2a5]"></a>HAL_Voice_PopQueue</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hal_voice.o(i.HAL_Voice_PopQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Voice_PopQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayVoiceThread
</UL>

<P><STRONG><a name="[2a6]"></a>HAL_Voice_PushQueue</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hal_voice.o(i.HAL_Voice_PushQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_Voice_PushQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Voice_PlayingVoice
</UL>

<P><STRONG><a name="[222]"></a>I2C_Ack_I2c</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_iic.o(i.I2C_Ack_I2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Ack_I2c &rArr; SCL_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_0
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_0
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByteEeprom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
</UL>

<P><STRONG><a name="[2aa]"></a>I2C_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_iic.o(i.I2C_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Delay &rArr; PUBLIC_Delayus &rArr; DRV_InterDelayus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RcvByte
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RStart_I2c
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck_I2c
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack_I2c
</UL>

<P><STRONG><a name="[223]"></a>I2C_NoAck_I2c</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_iic.o(i.I2C_NoAck_I2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_NoAck_I2c &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_1
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_0
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByteEeprom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetI2c
</UL>

<P><STRONG><a name="[2ae]"></a>I2C_RStart_I2c</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_iic.o(i.I2C_RStart_I2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_RStart_I2c &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_1
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_0
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_0
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetI2c
</UL>

<P><STRONG><a name="[221]"></a>I2C_RcvByte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_iic.o(i.I2C_RcvByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_RcvByte &rArr; SET_SDA_IN &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SDA_IN
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_0
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_SDA_IN
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByteEeprom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
</UL>

<P><STRONG><a name="[2b1]"></a>I2C_ResetI2c</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_iic.o(i.I2C_ResetI2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SDA_IN
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_SDA_IN
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RStart_I2c
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck_I2c
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
</UL>

<P><STRONG><a name="[21e]"></a>I2C_SendByte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, drv_iic.o(i.I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_1
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_0
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_0
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteEeprom
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteByte
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWrite
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByteEeprom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetI2c
</UL>

<P><STRONG><a name="[21d]"></a>I2C_Start_I2c</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, drv_iic.o(i.I2C_Start_I2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_1
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_0
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_0
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetI2c
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteEeprom
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteByte
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWrite
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByteEeprom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
</UL>

<P><STRONG><a name="[220]"></a>I2C_Stop_I2c</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_iic.o(i.I2C_Stop_I2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Stop_I2c &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_1
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_0
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_0
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteEeprom
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteByte
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWrite
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByteEeprom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetI2c
</UL>

<P><STRONG><a name="[21f]"></a>I2C_WaitAck_I2c</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, drv_iic.o(i.I2C_WaitAck_I2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_WaitAck_I2c &rArr; SET_SDA_IN &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_SDA_IN
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_1
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_1
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCL_OUT_0
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_SDA_IN
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteEeprom
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteByte
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWrite
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByteEeprom
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
</UL>

<P><STRONG><a name="[2b0]"></a>READ_SDA_IN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_iic.o(i.READ_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = READ_SDA_IN
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioRead
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetI2c
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RcvByte
</UL>

<P><STRONG><a name="[2a9]"></a>SCL_OUT_0</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_iic.o(i.SCL_OUT_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SCL_OUT_0 &rArr; DRV_GpioHighOut0 &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RcvByte
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RStart_I2c
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck_I2c
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack_I2c
</UL>

<P><STRONG><a name="[2ac]"></a>SCL_OUT_1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_iic.o(i.SCL_OUT_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SCL_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RcvByte
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RStart_I2c
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck_I2c
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack_I2c
</UL>

<P><STRONG><a name="[2ab]"></a>SDA_OUT_0</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_iic.o(i.SDA_OUT_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDA_OUT_0 &rArr; DRV_GpioHighOut0 &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RStart_I2c
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack_I2c
</UL>

<P><STRONG><a name="[2ad]"></a>SDA_OUT_1</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_iic.o(i.SDA_OUT_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop_I2c
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start_I2c
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RStart_I2c
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NoAck_I2c
</UL>

<P><STRONG><a name="[2af]"></a>SET_SDA_IN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_iic.o(i.SET_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SET_SDA_IN &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck_I2c
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ResetI2c
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RcvByte
</UL>

<P><STRONG><a name="[1d9]"></a>DRV_ADC_AdcSourceRelease</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_adc.o(i.DRV_ADC_AdcSourceRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DRV_ADC_AdcSourceRelease &rArr; nrfx_saadc_uninit &rArr; nrfx_saadc_channel_uninit &rArr; nrfx_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_SleepInit
</UL>

<P><STRONG><a name="[42]"></a>DRV_ADC_CaptureIRQ</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, drv_adc.o(i.DRV_ADC_CaptureIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRV_ADC_CaptureIRQ &rArr; nrfx_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(i.DRV_ADC_ConfigInit)
</UL>
<P><STRONG><a name="[1dd]"></a>DRV_ADC_ConfigInit</STRONG> (Thumb, 246 bytes, Stack size 56 bytes, drv_adc.o(i.DRV_ADC_ConfigInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DRV_ADC_ConfigInit &rArr; nrfx_saadc_init &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_FileInit
</UL>

<P><STRONG><a name="[1f5]"></a>advertising_init</STRONG> (Thumb, 122 bytes, Stack size 192 bytes, drv_ble.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
</UL>

<P><STRONG><a name="[9a]"></a>ble_evt_handler</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, drv_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_evt_handler &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_flush
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_conn_handle_assign
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(sdh_ble_observers3)
</UL>
<P><STRONG><a name="[1f1]"></a>ble_stack_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, drv_ble.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_stack_init &rArr; nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
</UL>

<P><STRONG><a name="[51]"></a>conn_params_error_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, drv_ble.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[1f6]"></a>conn_params_init</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, drv_ble.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = conn_params_init &rArr; ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
</UL>

<P><STRONG><a name="[1f2]"></a>gap_params_init</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, drv_ble.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gap_params_init &rArr; Math_Bytes2String &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Bytes2String
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
</UL>

<P><STRONG><a name="[52]"></a>gatt_evt_handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_ble.o(i.gatt_evt_handler))
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(i.gatt_init)
</UL>
<P><STRONG><a name="[1f3]"></a>gatt_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_ble.o(i.gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatt_init &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_att_mtu_periph_set
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
</UL>

<P><STRONG><a name="[58]"></a>nrf_qwr_error_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, drv_ble.o(i.nrf_qwr_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_qwr_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(i.services_init)
</UL>
<P><STRONG><a name="[59]"></a>nus_data_handler</STRONG> (Thumb, 88 bytes, Stack size 272 bytes, drv_ble.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = nus_data_handler &rArr; PUBLIC_PrintHex &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_PrintHex
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(i.services_init)
</UL>
<P><STRONG><a name="[4c]"></a>on_adv_evt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_ble.o(i.on_adv_evt))
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(i.advertising_init)
</UL>
<P><STRONG><a name="[50]"></a>on_conn_params_evt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_ble.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_ble.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[1f4]"></a>services_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drv_ble.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = services_init &rArr; ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_BleInit
</UL>

<P><STRONG><a name="[43]"></a>DRV_GpioHandler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, drv_gpio.o(i.DRV_GpioHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_GpioHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gpio.o(i.DRV_GpioInterruptEnable)
</UL>
<P><STRONG><a name="[203]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, drv_gpio.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioDisconnect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOutPP
</UL>

<P><STRONG><a name="[208]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, drv_gpio.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullnull
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInputPullup
</UL>

<P><STRONG><a name="[205]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_gpio.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
</UL>

<P><STRONG><a name="[207]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_gpio.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
</UL>

<P><STRONG><a name="[45]"></a>DRV_Uart_EventHandle</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, drv_uart.o(i.DRV_Uart_EventHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DRV_Uart_EventHandle &rArr; app_uart_get &rArr; nrf_drv_uart_rx &rArr; nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart.o(i.DRV_Uart_ConfigInit)
</UL>
<P><STRONG><a name="[24a]"></a>DRV_Motor_GetAmpAdcVal</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, drv_motor.o(i.DRV_Motor_GetAmpAdcVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV_Motor_GetAmpAdcVal &rArr; DRV_ADC_GetVoltage
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_GetVoltage
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_GetAdcVal
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OpenDoorThread
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_CloseDoorThread
</UL>

<P><STRONG><a name="[247]"></a>DRV_Motor_GetTurnDirFromFlash</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_motor.o(i.DRV_Motor_GetTurnDirFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DRV_Motor_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteFixSeting
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OpenDoorThread
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_CloseDoorThread
</UL>

<P><STRONG><a name="[246]"></a>DRV_Motor_GetTurnDirSts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_motor.o(i.DRV_Motor_GetTurnDirSts))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OpenDoorThread
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_CloseDoorThread
</UL>

<P><STRONG><a name="[249]"></a>DRV_Motor_GetTurnTorqueSts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_motor.o(i.DRV_Motor_GetTurnTorqueSts))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OpenDoorThread
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_CloseDoorThread
</UL>

<P><STRONG><a name="[248]"></a>DRV_Motor_OutputCtrl</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, drv_motor.o(i.DRV_Motor_OutputCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DRV_Motor_OutputCtrl &rArr; DRV_GpioHighOut1 &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_OpenDoorThread
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor_CloseDoorThread
</UL>

<P><STRONG><a name="[255]"></a>DRV_Radar_IICWriteByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, drv_radar.o(i.DRV_Radar_IICWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_TurnOn
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_TtiggerHighTime
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SoftReset
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SetDistance
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SenseRangeAdj
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_LightOffTime
</UL>

<P><STRONG><a name="[256]"></a>DRV_Radar_LightOffTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, drv_radar.o(i.DRV_Radar_LightOffTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DRV_Radar_LightOffTime &rArr; DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SetMode
</UL>

<P><STRONG><a name="[257]"></a>DRV_Radar_SenseRangeAdj</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_radar.o(i.DRV_Radar_SenseRangeAdj))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DRV_Radar_SenseRangeAdj &rArr; DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SetMode
</UL>

<P><STRONG><a name="[258]"></a>DRV_Radar_SetDistance</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_radar.o(i.DRV_Radar_SetDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = DRV_Radar_SetDistance &rArr; DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SetMode
</UL>

<P><STRONG><a name="[25a]"></a>DRV_Radar_SoftReset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_radar.o(i.DRV_Radar_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DRV_Radar_SoftReset &rArr; DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SetMode
</UL>

<P><STRONG><a name="[259]"></a>DRV_Radar_TtiggerHighTime</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_radar.o(i.DRV_Radar_TtiggerHighTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DRV_Radar_TtiggerHighTime &rArr; DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SetMode
</UL>

<P><STRONG><a name="[25b]"></a>DRV_Radar_TurnOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_radar.o(i.DRV_Radar_TurnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DRV_Radar_TurnOn &rArr; DRV_Radar_IICWriteByte &rArr; DRV_IICWriteByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_IICWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Radar_SetMode
</UL>

<P><STRONG><a name="[1fd]"></a>DRV_GT316L_ReadBytes</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, drv_gt316l.o(i.DRV_GT316L_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = DRV_GT316L_ReadBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_GetKeyValue
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_GetIICBusState
</UL>

<P><STRONG><a name="[1fb]"></a>DRV_GT316L_SendBytes</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, drv_gt316l.o(i.DRV_GT316L_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DRV_GT316L_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_SleepInit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_PwmOutputCtrl
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GT316L_FileInit
</UL>

<P><STRONG><a name="[24e]"></a>DRV_NCA9555_GetBytes</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, drv_nca9555.o(i.DRV_NCA9555_GetBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = DRV_NCA9555_GetBytes &rArr; DRV_IICReadByte &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinGet
</UL>

<P><STRONG><a name="[24f]"></a>DRV_NCA9555_PortDirectConfig</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, drv_nca9555.o(i.DRV_NCA9555_PortDirectConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DRV_NCA9555_PortDirectConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinDirInit
</UL>

<P><STRONG><a name="[251]"></a>DRV_NCA9555_PortPoloConfig</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, drv_nca9555.o(i.DRV_NCA9555_PortPoloConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_SendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinPoloInit
</UL>

<P><STRONG><a name="[252]"></a>DRV_NCA9555_SendBytes</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, drv_nca9555.o(i.DRV_NCA9555_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinSet
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PortPoloConfig
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PortDirectConfig
</UL>

<P><STRONG><a name="[1d5]"></a>DRV_74HC0452_PinInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, drv_74hc4052.o(i.DRV_74HC0452_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = DRV_74HC0452_PinInit &rArr; DRV_NCA9555_PinPoloInit &rArr; DRV_NCA9555_PortPoloConfig &rArr; DRV_NCA9555_SendBytes &rArr; DRV_IICWrite &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinPoloInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_NCA9555_PinDirInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_74HC0452_UartSelect
</UL>

<P><STRONG><a name="[237]"></a>DRV_Motor218_GetAmpAdcVal</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_motor_218.o(i.DRV_Motor218_GetAmpAdcVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_Motor218_GetAmpAdcVal
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_ADC_GetAdcVal
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
</UL>

<P><STRONG><a name="[230]"></a>DRV_Motor218_GetSensorState</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, drv_motor_218.o(i.DRV_Motor218_GetSensorState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_Motor218_GetSensorState
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioRead
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_PinSenseHandler
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_HandleTryForbitWarmCheck
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForgetLockWarmCheck
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_DefendActionCheck
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_CloseDoorThread
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_AutoLockCheck
</UL>

<P><STRONG><a name="[233]"></a>DRV_Motor218_GetTurnDirFromFlash</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_GetTurnDirFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DRV_Motor218_GetTurnDirFromFlash &rArr; SystemWriteFixSeting &rArr; HAL_EEPROM_WriteBytes &rArr; DRV_HE24C512_WriteBytes &rArr; DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemWriteFixSeting
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceCloseDoorThread
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_CloseDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
</UL>

<P><STRONG><a name="[232]"></a>DRV_Motor218_GetTurnDirSts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_motor_218.o(i.DRV_Motor218_GetTurnDirSts))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceCloseDoorThread
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_CloseDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
</UL>

<P><STRONG><a name="[236]"></a>DRV_Motor218_GetTurnTorqueSts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_motor_218.o(i.DRV_Motor218_GetTurnTorqueSts))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
</UL>

<P><STRONG><a name="[235]"></a>DRV_Motor218_OutputCtrl</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_OutputCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DRV_Motor218_OutputCtrl &rArr; DRV_GpioHighOut1 &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut1
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioHighOut0
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceCloseDoorThread
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_FileInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_CloseDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
</UL>

<P><STRONG><a name="[234]"></a>DRV_Motor218_PinInterruptDisable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_PinInterruptDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DRV_Motor218_PinInterruptDisable &rArr; DRV_GpioInterruptDisable &rArr; nrfx_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInterruptDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceCloseDoorThread
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_CloseDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
</UL>

<P><STRONG><a name="[238]"></a>DRV_Motor218_PinInterruptEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_motor_218.o(i.DRV_Motor218_PinInterruptEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DRV_Motor218_PinInterruptEnable &rArr; DRV_GpioInterruptEnable &rArr; nrfx_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioInterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_OpenDoorThread
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceOpenDoorThread
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_ForceCloseDoorThread
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_FileInit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_CloseDoorThread
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_Motor218_BurnTestCloseDoorThread
</UL>

<P><STRONG><a name="[1e7]"></a>DRV_AM5BA340_SendBytes</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, drv_am5ba340.o(i.DRV_AM5BA340_SendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DRV_AM5BA340_SendBytes &rArr; DRV_GpioOut1 &rArr; DRV_GpioOutPP &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayms
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUBLIC_Delayus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_AM5BA340_PlayVoice
</UL>

<P><STRONG><a name="[212]"></a>DRV_HE24C512_IICGetBytes</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, drv_he24c512.o(i.DRV_HE24C512_IICGetBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = DRV_HE24C512_IICGetBytes &rArr; DRV_IICReadByteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICReadByteEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_ReadBytes
</UL>

<P><STRONG><a name="[214]"></a>DRV_HE24C512_IICSendBytes</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, drv_he24c512.o(i.DRV_HE24C512_IICSendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = DRV_HE24C512_IICSendBytes &rArr; DRV_IICWriteEeprom &rArr; I2C_Start_I2c &rArr; I2C_ResetI2c &rArr; I2C_SendByte &rArr; SDA_OUT_1 &rArr; DRV_GpioInputPullnull &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut1
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GpioOut0
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IICWriteEeprom
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_HE24C512_WriteBytes
</UL>

<P><STRONG><a name="[336]"></a>aes_key_expansion</STRONG> (Thumb, 204 bytes, Stack size 28 bytes, rijndael.o(i.aes_key_expansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = aes_key_expansion &rArr; aes_sub_dword
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_swap_dword
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_sub_dword
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_rot_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[338]"></a>inv_mix_columns</STRONG> (Thumb, 124 bytes, Stack size 44 bytes, rijndael.o(i.inv_mix_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inv_mix_columns &rArr; aes_mul &rArr; aes_xtimes
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[339]"></a>inv_shift_rows</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, rijndael.o(i.inv_shift_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inv_shift_rows
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[33a]"></a>inv_sub_bytes</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, rijndael.o(i.inv_sub_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = inv_sub_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_sub_sbox
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[354]"></a>fifo_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fifo_get &rArr; fifo_peek
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[353]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[3cf]"></a>fifo_peek</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_fifo.o(i.fifo_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>

<P><STRONG><a name="[355]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[34c]"></a>_trans_errno</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, api_hash.o(i._trans_errno))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_update
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ali_sha256_final
</UL>

<P><STRONG><a name="[319]"></a>_dump_id2_conf_info</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, id2_client.o(i._dump_id2_conf_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _dump_id2_conf_info &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_init
</UL>

<P><STRONG><a name="[31c]"></a>_id2_gen_auth_code</STRONG> (Thumb, 704 bytes, Stack size 152 bytes, id2_client.o(i._id2_gen_auth_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = _id2_gen_auth_code &rArr; _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_id
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_get_random
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_base64_encode
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sign
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_snprintf
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_malloc
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_osa_free
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_get_challenge_auth_code
</UL>

<P><STRONG><a name="[323]"></a>_id2_hash</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, id2_client.o(i._id2_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = _id2_hash &rArr; id2_plat_hash_sum &rArr; irot_hal_hash_sum &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_plat_hash_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sign
</UL>

<P><STRONG><a name="[320]"></a>_id2_sign</STRONG> (Thumb, 154 bytes, Stack size 144 bytes, id2_client.o(i._id2_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616<LI>Call Chain = _id2_sign &rArr; _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_log_hex_dump
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sym_cipher
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_gen_auth_code
</UL>

<P><STRONG><a name="[326]"></a>_id2_sym_cipher</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, id2_client.o(i._id2_sym_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = _id2_sym_cipher &rArr; km_cipher &rArr; irot_hal_sym_crypto &rArr; select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_cipher
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_log_hex_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;id2_client_decrypt
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_id2_sign
</UL>

<P><STRONG><a name="[317]"></a>_check_km_key_name</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, km_to_irot.o(i._check_km_key_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _check_km_key_name &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_cipher
</UL>

<P><STRONG><a name="[318]"></a>_dump_chip_conf_info</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, km_to_irot.o(i._dump_chip_conf_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _dump_chip_conf_info &rArr; DRV_InterPrint
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;km_init
</UL>

<P><STRONG><a name="[350]"></a>apdu_transmit_wrap</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, std_se_adapter.o(i.apdu_transmit_wrap))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chip_log_hex_dump
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_sym_crypto
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_get_id2
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_hash_sum
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_application
</UL>

<P><STRONG><a name="[3f7]"></a>open_session</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, std_se_adapter.o(i.open_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = open_session &rArr; se_open_session &rArr; fm_se_register
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_InterPrint
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;se_open_session
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_get_id2
</UL>

<P><STRONG><a name="[3f8]"></a>select_application</STRONG> (Thumb, 82 bytes, Stack size 544 bytes, std_se_adapter.o(i.select_application))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = select_application &rArr; apdu_transmit_wrap &rArr; chip_log_hex_dump &rArr; ls_osa_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apdu_transmit_wrap
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_sym_crypto
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irot_hal_get_id2
</UL>

<P><STRONG><a name="[37e]"></a>appearance_encode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[396]"></a>ble_device_addr_encode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[3c8]"></a>conn_int_check</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[392]"></a>conn_int_encode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[38f]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[393]"></a>manuf_specific_data_encode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[395]"></a>name_encode</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[394]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[390]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[37f]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[391]"></a>uuid_list_encode</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[492]"></a>uuid_list_sized_encode</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[332]"></a>addr_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.addr_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>

<P><STRONG><a name="[331]"></a>adv_mode_next_avail_get</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_advertising.o(i.adv_mode_next_avail_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_mode_next_avail_get
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[473]"></a>adv_mode_next_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.adv_mode_next_get))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_terminated
</UL>

<P><STRONG><a name="[399]"></a>config_is_valid</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_advertising.o(i.config_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[3d2]"></a>flags_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ble_advertising.o(i.flags_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[39d]"></a>flash_access_in_progress</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ble_advertising.o(i.flash_access_in_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = flash_access_in_progress &rArr; nrf_fstorage_is_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[39a]"></a>on_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advertising.o(i.on_connected))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[39b]"></a>on_disconnected</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_advertising.o(i.on_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = on_disconnected &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[39c]"></a>on_terminated</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_advertising.o(i.on_terminated))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = on_terminated &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[39e]"></a>phy_is_valid</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_advertising.o(i.phy_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[3a0]"></a>set_adv_mode_directed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[39f]"></a>set_adv_mode_directed_high_duty</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed_high_duty))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[3a1]"></a>set_adv_mode_fast</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_adv_mode_fast &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[3a2]"></a>set_adv_mode_slow</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_adv_mode_slow &rArr; flags_set &rArr; ble_advdata_parse &rArr; ble_advdata_search
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[480]"></a>use_whitelist</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_advertising.o(i.use_whitelist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = use_whitelist
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[491]"></a>whitelist_has_entries</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;use_whitelist
</UL>

<P><STRONG><a name="[97]"></a>ble_evt_handler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_evt_handler &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[3c9]"></a>conn_params_negotiation</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[471]"></a>instance_get</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[472]"></a>is_conn_params_ok</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[3aa]"></a>on_conn_params_update</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3a7]"></a>on_connect</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3a8]"></a>on_disconnect</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3a9]"></a>on_write</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3ca]"></a>send_error_evt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[47e]"></a>send_update_request</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ble_conn_params.o(i.send_update_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
</UL>

<P><STRONG><a name="[4f]"></a>update_timeout_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = update_timeout_handler &rArr; send_update_request &rArr; send_error_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_update_request
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[94]"></a>ble_evt_handler</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_evt_handler &rArr; record_purge_disconnected &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[3ac]"></a>record_activate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_activate &rArr; nrf_atflags_set &rArr; nrf_atomic_u32_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_set
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[478]"></a>record_invalidate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = record_invalidate &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[3ab]"></a>record_purge_disconnected</STRONG> (Thumb, 66 bytes, Stack size 104 bytes, ble_conn_state.o(i.record_purge_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = record_purge_disconnected &rArr; conn_handle_list_get &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_u32_and
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_handle_list_get
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3ae]"></a>record_set_disconnected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_set_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_set_disconnected &rArr; nrf_atflags_clear &rArr; nrf_atomic_u32_and
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atflags_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[3ba]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>

<P><STRONG><a name="[412]"></a>link_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected_evt
</UL>

<P><STRONG><a name="[413]"></a>on_connected_evt</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_connected_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[414]"></a>on_disconnected_evt</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_ble_gatt.o(i.on_disconnected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_disconnected_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[416]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_exchange_mtu_request_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[415]"></a>on_exchange_mtu_rsp_evt</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_rsp_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_exchange_mtu_rsp_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[41a]"></a>on_rw_authorize_request</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, nrf_ble_qwr.o(i.on_rw_authorize_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_rw_authorize_request
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[419]"></a>on_user_mem_release</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_ble_qwr.o(i.on_user_mem_release))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[418]"></a>on_user_mem_request</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.on_user_mem_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_user_mem_request &rArr; user_mem_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
</UL>

<P><STRONG><a name="[417]"></a>user_mem_reply</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_ble_qwr.o(i.user_mem_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = user_mem_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_qwr_on_ble_evt
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_user_mem_request
</UL>

<P><STRONG><a name="[3b6]"></a>on_connect</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, ble_nus.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = on_connect &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[3b8]"></a>on_hvx_tx_complete</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, ble_nus.o(i.on_hvx_tx_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_hvx_tx_complete &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[3b7]"></a>on_write</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, ble_nus.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_write &rArr; blcm_link_ctx_get &rArr; ble_conn_state_conn_idx &rArr; ble_conn_state_valid &rArr; nrf_atflags_get
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blcm_link_ctx_get
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
</UL>

<P><STRONG><a name="[3b5]"></a>rx_char_add</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, ble_nus.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[3b4]"></a>tx_char_add</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, ble_nus.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[3bf]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_irq_handler
</UL>

<P><STRONG><a name="[53]"></a>clock_irq_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.clock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_irq_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(i.nrf_drv_clock_init)
</UL>
<P><STRONG><a name="[3d9]"></a>hfclk_start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.hfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hfclk_start &rArr; nrfx_clock_hfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>

<P><STRONG><a name="[3dc]"></a>hfclk_stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.hfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hfclk_stop &rArr; nrfx_clock_hfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_stop
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_release
</UL>

<P><STRONG><a name="[3c0]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[41b]"></a>item_enqueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_hfclk_request
</UL>

<P><STRONG><a name="[3fe]"></a>lfclk_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfclk_stop &rArr; nrfx_clock_lfclk_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[a1]"></a>sd_state_evt_handler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_init &rArr; nrfx_clock_enable &rArr; nrfx_power_clock_irq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[9c]"></a>soc_evt_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[56]"></a>uart_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uart_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[55]"></a>uarte_evt_handler</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.uarte_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uarte_evt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_uart.o(i.nrf_drv_uart_init)
</UL>
<P><STRONG><a name="[2b9]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[2ba]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
</UL>

<P><STRONG><a name="[2bb]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[445]"></a>nrf_clock_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
</UL>

<P><STRONG><a name="[446]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_lfclk_stop
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_stop
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_hfclk_start
</UL>

<P><STRONG><a name="[444]"></a>nrfx_power_clock_irq_init</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, nrfx_clock.o(i.nrfx_power_clock_irq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrfx_power_clock_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_clock_enable
</UL>

<P><STRONG><a name="[450]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[279]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[44c]"></a>channel_port_alloc</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, nrfx_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[27b]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[27a]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[27c]"></a>nrf_bitmask_bit_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrfx_gpiote.o(i.nrf_bitmask_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_configured_set
</UL>

<P><STRONG><a name="[44d]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[27d]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[449]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[278]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[433]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[277]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[276]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[44a]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[44e]"></a>pin_configured_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_gpiote.o(i.pin_configured_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pin_configured_set &rArr; nrf_bitmask_bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[44b]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_init
</UL>

<P><STRONG><a name="[447]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[448]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_enable
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[44f]"></a>pin_in_use_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_gpiote_init
</UL>

<P><STRONG><a name="[452]"></a>prs_box_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_prs.o(i.prs_box_get))
<BR><BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_release
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_prs_acquire
</UL>

<P><STRONG><a name="[380]"></a>apply_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrfx_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[3e9]"></a>interrupts_disable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrfx_uart.o(i.interrupts_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interrupts_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[3ef]"></a>interrupts_enable</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nrfx_uart.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = interrupts_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_init
</UL>

<P><STRONG><a name="[430]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrfx_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[42f]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
</UL>

<P><STRONG><a name="[383]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[382]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[381]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[48a]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[466]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[3f0]"></a>nrf_uart_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[385]"></a>nrf_uart_hwfc_pins_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3ea]"></a>nrf_uart_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[3f1]"></a>nrf_uart_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[489]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[468]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[384]"></a>nrf_uart_txrx_pins_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrf_uart_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3eb]"></a>nrfx_get_irq_number</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uart.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
</UL>

<P><STRONG><a name="[46b]"></a>pins_to_default</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, nrfx_uart.o(i.pins_to_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_txrx_pins_set
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_hwfc_pins_set
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_uninit
</UL>

<P><STRONG><a name="[467]"></a>rx_byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrfx_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[48b]"></a>rx_done_event</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, nrfx_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[465]"></a>rx_enable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrfx_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>

<P><STRONG><a name="[46a]"></a>tx_blocking</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[469]"></a>tx_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrfx_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_blocking
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>

<P><STRONG><a name="[48c]"></a>tx_done_event</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrfx_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[464]"></a>uart_irq_handler</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, nrfx_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_0_irq_handler
</UL>

<P><STRONG><a name="[386]"></a>apply_config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrfx_uarte.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_txrx_pins_set
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_hwfc_pins_set
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[3ec]"></a>interrupts_disable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrfx_uarte.o(i.interrupts_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interrupts_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
</UL>

<P><STRONG><a name="[3f2]"></a>interrupts_enable</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, nrfx_uarte.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_get_irq_number
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_int_enable
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_init
</UL>

<P><STRONG><a name="[432]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrfx_uarte.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[431]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
</UL>

<P><STRONG><a name="[389]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[388]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrfx_uarte.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[387]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[48d]"></a>nrf_uarte_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[46f]"></a>nrf_uarte_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[3f3]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_uarte.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[38b]"></a>nrf_uarte_hwfc_pins_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_hwfc_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3ed]"></a>nrf_uarte_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
</UL>

<P><STRONG><a name="[3f4]"></a>nrf_uarte_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[48e]"></a>nrf_uarte_rx_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_rx_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[46e]"></a>nrf_uarte_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[38a]"></a>nrf_uarte_txrx_pins_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrf_uarte_txrx_pins_set))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[3ee]"></a>nrfx_get_irq_number</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_disable
</UL>

<P><STRONG><a name="[46d]"></a>nrfx_is_in_ram</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_uarte.o(i.nrfx_is_in_ram))
<BR><BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
</UL>

<P><STRONG><a name="[470]"></a>pins_to_default</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, nrfx_uarte.o(i.pins_to_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_txrx_pins_set
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_hwfc_pins_set
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_uninit
</UL>

<P><STRONG><a name="[48f]"></a>rx_done_event</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, nrfx_uarte.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[490]"></a>tx_done_event</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, nrfx_uarte.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[46c]"></a>uarte_irq_handler</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, nrfx_uarte.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_rx_amount_get
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_0_irq_handler
</UL>

<P><STRONG><a name="[2c8]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[459]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_init
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_channel_uninit
</UL>

<P><STRONG><a name="[2c5]"></a>nrf_saadc_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[2c6]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[457]"></a>nrf_saadc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_limits_set
</UL>

<P><STRONG><a name="[458]"></a>nrf_saadc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_limits_set
</UL>

<P><STRONG><a name="[45c]"></a>nrf_saadc_limit_int_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_limit_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_limits_set
</UL>

<P><STRONG><a name="[2c7]"></a>nrf_saadc_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrfx_saadc.o(i.nrf_saadc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_sample
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_buffer_convert
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[45d]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrfx_saadc.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_saadc_uninit
</UL>

<P><STRONG><a name="[310]"></a>irq_handler</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nrfx_timer.o(i.irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler &rArr; nrf_timer_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_event_clear
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_int_get
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_timer_compare_event_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[3fb]"></a>nrf_timer_compare_event_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_event_get))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[3fc]"></a>nrf_timer_compare_int_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_compare_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[3fd]"></a>nrf_timer_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrfx_timer.o(i.nrf_timer_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_timer_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler
</UL>

<P><STRONG><a name="[461]"></a>nrf_timer_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>

<P><STRONG><a name="[460]"></a>nrf_timer_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_compare
</UL>

<P><STRONG><a name="[462]"></a>nrf_timer_shorts_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_shorts_disable))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_extended_compare
</UL>

<P><STRONG><a name="[45e]"></a>nrf_timer_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrf_timer_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_resume
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_pause
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_enable
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_clear
</UL>

<P><STRONG><a name="[463]"></a>nrfx_get_irq_number</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrfx_timer.o(i.nrfx_get_irq_number))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_timer_init
</UL>

<P><STRONG><a name="[54]"></a>nrfx_rng_handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_drv_rng.o(i.nrfx_rng_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrfx_rng_handler &rArr; nrf_queue_push &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_stop
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf_drv_rng.o(i.sd_state_evt_handler)
<LI> nrf_drv_rng.o(i.nrf_drv_rng_init)
</UL>
<P><STRONG><a name="[a2]"></a>sd_state_evt_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nrf_drv_rng.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sd_state_evt_handler &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_uninit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_stop
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_start
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_rng.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[2c1]"></a>nrf_rng_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrfx_rng.o(i.nrf_rng_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rng_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_start
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_IRQHandler
</UL>

<P><STRONG><a name="[455]"></a>nrf_rng_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrfx_rng.o(i.nrf_rng_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_uninit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_rng_stop
</UL>

<P><STRONG><a name="[36e]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[370]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[484]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>

<P><STRONG><a name="[36f]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[3c1]"></a>compare_reg_update</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_compare0_set
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[481]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[482]"></a>expired_timers_handler</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, app_timer.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[400]"></a>list_insertions_handler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[3c5]"></a>nrfx_coredep_delay_us</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, app_timer.o(i.nrfx_coredep_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[3c4]"></a>rtc1_compare0_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_compare0_set))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[372]"></a>rtc1_counter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.rtc1_counter_get))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[371]"></a>rtc1_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[3c3]"></a>rtc1_start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc1_start &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[36d]"></a>rtc1_stop</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc1_stop &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[3c2]"></a>ticks_diff_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[487]"></a>timeout_handler_exec</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_timer.o(i.timeout_handler_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timeout_handler_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[2d6]"></a>timer_list_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[483]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_handler_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[402]"></a>timer_list_insert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[401]"></a>timer_list_remove</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = timer_list_remove &rArr; nrfx_coredep_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_coredep_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[373]"></a>timer_start_op_schedule</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, app_timer.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_start_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[374]"></a>timer_stop_op_schedule</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_enque
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[2c2]"></a>timer_timeouts_check</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_timeouts_check &rArr; timer_list_handler_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_counter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[3c6]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, app_timer.o(i.timer_timeouts_check_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_timeouts_check_sched
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[485]"></a>user_op_alloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[486]"></a>user_op_enque</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.user_op_enque))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[488]"></a>fifo_length</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_uart_fifo.o(i.fifo_length))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[377]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_uart_fifo.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_rx &rArr; nrfx_uart_rx &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_rx
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[37b]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, app_uart_fifo.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uarte_tx
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrfx_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[4e]"></a>uart_event_handler</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_tx &rArr; nrfx_uart_tx &rArr; tx_blocking &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[37d]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[37c]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[90]"></a>erase</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = erase &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[477]"></a>erase_execute</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.erase_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[3ce]"></a>event_send</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, nrf_fstorage_sd.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[8c]"></a>init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init &rArr; nrf_atomic_flag_set_fetch &rArr; nrf_atomic_u32_fetch_or
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>is_busy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.is_busy))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[42c]"></a>on_operation_failure</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.on_operation_failure))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[42b]"></a>on_operation_success</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.on_operation_success))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[42d]"></a>queue_free</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_free &rArr; nrf_atfifo_item_free
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_free
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[475]"></a>queue_load_next</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_load_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = queue_load_next &rArr; nrf_atfifo_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[42a]"></a>queue_process</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_load_next
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_free
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[3cd]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fstorage_sd.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase
</UL>

<P><STRONG><a name="[8e]"></a>read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>rmap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.rmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>uninit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uninit &rArr; nrf_atfifo_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_clear
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>wmap</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.wmap))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write &rArr; queue_start &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_put
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atfifo_item_alloc
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(.constdata)
</UL>
<P><STRONG><a name="[476]"></a>write_execute</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_fstorage_sd.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[443]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>

<P><STRONG><a name="[4d]"></a>app_simple_timer_event_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_simple_timer.o(i.app_simple_timer_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_simple_timer_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_simple_timer.o(i.app_simple_timer_init)
</UL>
<P><STRONG><a name="[436]"></a>nrf_queue_next_idx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_queue.o(i.nrf_queue_next_idx))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_is_full
</UL>

<P><STRONG><a name="[439]"></a>queue_read</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, nrf_queue.o(i.queue_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = queue_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
</UL>

<P><STRONG><a name="[438]"></a>queue_utilization_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_queue.o(i.queue_utilization_get))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_utilization_get
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_read
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_queue_push
</UL>

<P><STRONG><a name="[2ca]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[2ce]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[2d0]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[2cf]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[2d4]"></a>_PrintInt</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[2d5]"></a>_PrintUnsigned</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[2d3]"></a>_StoreChar</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[47a]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_evt_irq_disable
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[47b]"></a>__sd_nvic_is_app_accessible_priority</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_is_app_accessible_priority))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[442]"></a>nrf_section_iter_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_section_iter_get))
<BR><BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[479]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, nrf_sdh.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_is_app_accessible_priority
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevices_evt_irq_enable
</UL>

<P><STRONG><a name="[47c]"></a>sd_nvic_SetPriority</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_sdh.o(i.sd_nvic_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_is_app_accessible_priority
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swi_interrupt_priority_workaround
</UL>

<P><STRONG><a name="[43d]"></a>sdh_request_observer_notify</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[43e]"></a>sdh_state_observer_notify</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_init
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[43f]"></a>softdevice_evt_irq_disable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_sdh.o(i.softdevice_evt_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = softdevice_evt_irq_disable &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[441]"></a>softdevices_evt_irq_enable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_sdh.o(i.softdevices_evt_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = softdevices_evt_irq_enable &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[440]"></a>swi_interrupt_priority_workaround</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf_sdh.o(i.swi_interrupt_priority_workaround))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = swi_interrupt_priority_workaround &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[9f]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 108 bytes, Stack size 544 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[a0]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[2f4]"></a>errata_108</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_108))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2ec]"></a>errata_12</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_12))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f5]"></a>errata_136</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_136))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2ed]"></a>errata_16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_16))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f6]"></a>errata_182</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_182))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2ee]"></a>errata_31</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_31))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2ef]"></a>errata_32</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_32))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f0]"></a>errata_36</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f1]"></a>errata_37</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_37))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f2]"></a>errata_57</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_57))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f3]"></a>errata_66</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[31a]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[315]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
</UL>

<P><STRONG><a name="[329]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[328]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
